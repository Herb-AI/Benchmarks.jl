problem_10_0_0 = Problem("problem_10_0_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,8,5,7,10)), RobotState(0,4,5,4,7,10))])
problem_10_0_1 = Problem("problem_10_0_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,6,2,10,10)), RobotState(0,7,4,3,4,10))])
problem_10_0_10 = Problem("problem_10_0_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,7,3,8,10)), RobotState(0,7,9,1,3,10))])
problem_10_0_2 = Problem("problem_10_0_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,7,7,5,10)), RobotState(0,9,7,1,7,10))])
problem_10_0_3 = Problem("problem_10_0_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,7,6,6,10)), RobotState(0,9,10,3,1,10))])
problem_10_0_4 = Problem("problem_10_0_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,7,3,7,10)), RobotState(0,10,2,7,4,10))])
problem_10_0_5 = Problem("problem_10_0_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,5,3,6,10)), RobotState(0,1,4,6,10,10))])
problem_10_0_6 = Problem("problem_10_0_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,6,5,8,10)), RobotState(0,3,10,8,5,10))])
problem_10_0_7 = Problem("problem_10_0_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,5,6,3,10)), RobotState(0,7,5,6,4,10))])
problem_10_0_8 = Problem("problem_10_0_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,6,10,10)), RobotState(0,2,4,3,5,10))])
problem_10_0_9 = Problem("problem_10_0_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,8,8,10,10)), RobotState(0,5,10,5,1,10))])
problem_10_1_0 = Problem("problem_10_1_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,3,9,10)), RobotState(0,1,8,2,8,10))])
problem_10_1_1 = Problem("problem_10_1_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,6,9,5,10)), RobotState(0,1,10,9,5,10))])
problem_10_1_10 = Problem("problem_10_1_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,2,4,10)), RobotState(0,8,3,1,10,10))])
problem_10_1_2 = Problem("problem_10_1_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,3,3,4,10)), RobotState(0,1,1,4,8,10))])
problem_10_1_3 = Problem("problem_10_1_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,7,1,8,10)), RobotState(0,3,5,7,2,10))])
problem_10_1_4 = Problem("problem_10_1_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,9,8,5,10)), RobotState(0,2,2,5,7,10))])
problem_10_1_5 = Problem("problem_10_1_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,2,2,8,10)), RobotState(0,8,2,9,9,10))])
problem_10_1_6 = Problem("problem_10_1_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,9,5,10)), RobotState(0,10,5,8,6,10))])
problem_10_1_7 = Problem("problem_10_1_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,5,9,10)), RobotState(0,2,10,4,1,10))])
problem_10_1_8 = Problem("problem_10_1_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,3,1,10)), RobotState(0,6,10,1,4,10))])
problem_10_1_9 = Problem("problem_10_1_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,9,9,10)), RobotState(0,3,5,2,9,10))])
problem_10_2_0 = Problem("problem_10_2_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,9,10,8,10)), RobotState(0,4,9,2,4,10))])
problem_10_2_1 = Problem("problem_10_2_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,6,1,10)), RobotState(0,5,8,3,3,10))])
problem_10_2_10 = Problem("problem_10_2_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,1,6,4,10)), RobotState(0,5,4,6,6,10))])
problem_10_2_2 = Problem("problem_10_2_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,7,3,5,10)), RobotState(0,6,7,2,3,10))])
problem_10_2_3 = Problem("problem_10_2_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,7,5,10)), RobotState(0,9,10,2,2,10))])
problem_10_2_4 = Problem("problem_10_2_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,10,10,4,10)), RobotState(0,10,3,6,3,10))])
problem_10_2_5 = Problem("problem_10_2_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,2,10,10)), RobotState(0,10,2,6,5,10))])
problem_10_2_6 = Problem("problem_10_2_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,6,10,10)), RobotState(0,6,1,8,4,10))])
problem_10_2_7 = Problem("problem_10_2_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,9,6,3,10)), RobotState(0,8,4,9,5,10))])
problem_10_2_8 = Problem("problem_10_2_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,7,9,7,10)), RobotState(0,1,9,3,3,10))])
problem_10_2_9 = Problem("problem_10_2_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,1,7,3,10)), RobotState(0,7,6,1,8,10))])
problem_10_3_0 = Problem("problem_10_3_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,6,7,3,10)), RobotState(0,9,6,7,6,10))])
problem_10_3_1 = Problem("problem_10_3_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,3,8,10,10)), RobotState(0,2,7,8,6,10))])
problem_10_3_10 = Problem("problem_10_3_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,7,1,3,10)), RobotState(0,1,10,9,1,10))])
problem_10_3_2 = Problem("problem_10_3_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,5,9,10)), RobotState(0,7,5,3,1,10))])
problem_10_3_3 = Problem("problem_10_3_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,8,9,2,10)), RobotState(0,4,1,8,1,10))])
problem_10_3_4 = Problem("problem_10_3_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,2,5,6,10)), RobotState(0,3,8,4,5,10))])
problem_10_3_5 = Problem("problem_10_3_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,7,1,5,10)), RobotState(0,4,6,2,8,10))])
problem_10_3_6 = Problem("problem_10_3_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,2,10,10)), RobotState(0,5,7,9,1,10))])
problem_10_3_7 = Problem("problem_10_3_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,7,2,9,10)), RobotState(0,5,2,4,3,10))])
problem_10_3_8 = Problem("problem_10_3_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,6,6,7,10)), RobotState(0,5,4,2,8,10))])
problem_10_3_9 = Problem("problem_10_3_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,5,7,3,10)), RobotState(0,4,10,10,5,10))])
problem_10_4_0 = Problem("problem_10_4_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,6,2,1,10)), RobotState(0,4,1,6,7,10))])
problem_10_4_1 = Problem("problem_10_4_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,2,1,10)), RobotState(0,9,5,1,8,10))])
problem_10_4_10 = Problem("problem_10_4_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,2,1,1,10)), RobotState(0,3,5,4,8,10))])
problem_10_4_2 = Problem("problem_10_4_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,7,5,6,10)), RobotState(0,8,5,4,6,10))])
problem_10_4_3 = Problem("problem_10_4_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,2,8,10)), RobotState(0,4,3,8,4,10))])
problem_10_4_4 = Problem("problem_10_4_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,1,7,5,10)), RobotState(0,1,5,5,5,10))])
problem_10_4_5 = Problem("problem_10_4_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,9,7,7,10)), RobotState(0,4,4,5,4,10))])
problem_10_4_6 = Problem("problem_10_4_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,6,9,10,10)), RobotState(0,10,5,9,9,10))])
problem_10_4_7 = Problem("problem_10_4_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,1,2,9,10)), RobotState(0,5,2,7,4,10))])
problem_10_4_8 = Problem("problem_10_4_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,9,3,10)), RobotState(0,5,10,9,9,10))])
problem_10_4_9 = Problem("problem_10_4_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,8,2,10)), RobotState(0,8,8,1,7,10))])
problem_10_5_0 = Problem("problem_10_5_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,5,6,10,10)), RobotState(0,1,5,7,2,10))])
problem_10_5_1 = Problem("problem_10_5_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,10,8,5,10)), RobotState(0,3,5,8,6,10))])
problem_10_5_10 = Problem("problem_10_5_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,8,6,4,10)), RobotState(0,9,5,5,8,10))])
problem_10_5_2 = Problem("problem_10_5_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,10,9,8,10)), RobotState(0,8,2,4,8,10))])
problem_10_5_3 = Problem("problem_10_5_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,8,3,7,10)), RobotState(0,8,1,10,7,10))])
problem_10_5_4 = Problem("problem_10_5_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,9,2,5,10)), RobotState(0,3,5,4,3,10))])
problem_10_5_5 = Problem("problem_10_5_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,4,6,9,10)), RobotState(0,7,2,7,8,10))])
problem_10_5_6 = Problem("problem_10_5_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,2,9,10)), RobotState(0,8,2,7,9,10))])
problem_10_5_7 = Problem("problem_10_5_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,8,5,8,10)), RobotState(0,5,9,4,1,10))])
problem_10_5_8 = Problem("problem_10_5_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,3,7,10)), RobotState(0,3,7,5,6,10))])
problem_10_5_9 = Problem("problem_10_5_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,1,9,10)), RobotState(0,5,8,3,3,10))])
problem_10_6_0 = Problem("problem_10_6_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,10,9,3,10)), RobotState(0,7,6,3,8,10))])
problem_10_6_1 = Problem("problem_10_6_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,8,9,9,10)), RobotState(0,9,6,8,7,10))])
problem_10_6_10 = Problem("problem_10_6_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,7,3,10)), RobotState(0,7,2,2,8,10))])
problem_10_6_2 = Problem("problem_10_6_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,2,9,1,10)), RobotState(0,4,7,8,5,10))])
problem_10_6_3 = Problem("problem_10_6_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,4,9,10)), RobotState(0,4,2,4,4,10))])
problem_10_6_4 = Problem("problem_10_6_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,8,1,10)), RobotState(0,5,5,10,7,10))])
problem_10_6_5 = Problem("problem_10_6_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,6,3,10)), RobotState(0,8,2,9,3,10))])
problem_10_6_6 = Problem("problem_10_6_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,3,4,6,10)), RobotState(0,4,1,7,1,10))])
problem_10_6_7 = Problem("problem_10_6_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,5,7,7,10)), RobotState(0,10,8,5,4,10))])
problem_10_6_8 = Problem("problem_10_6_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,7,1,5,10)), RobotState(0,1,8,9,1,10))])
problem_10_6_9 = Problem("problem_10_6_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,4,3,10)), RobotState(0,7,9,9,5,10))])
problem_10_7_0 = Problem("problem_10_7_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,9,8,9,10)), RobotState(0,5,9,5,4,10))])
problem_10_7_1 = Problem("problem_10_7_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,8,1,10)), RobotState(0,1,6,5,1,10))])
problem_10_7_10 = Problem("problem_10_7_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,7,10,1,10)), RobotState(0,9,6,7,8,10))])
problem_10_7_2 = Problem("problem_10_7_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,3,1,2,10)), RobotState(0,9,4,10,7,10))])
problem_10_7_3 = Problem("problem_10_7_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,5,9,6,10)), RobotState(0,4,10,3,7,10))])
problem_10_7_4 = Problem("problem_10_7_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,9,1,10)), RobotState(0,8,2,4,2,10))])
problem_10_7_5 = Problem("problem_10_7_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,1,1,3,10)), RobotState(0,1,4,7,6,10))])
problem_10_7_6 = Problem("problem_10_7_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,1,9,10)), RobotState(0,8,9,7,2,10))])
problem_10_7_7 = Problem("problem_10_7_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,9,1,5,10)), RobotState(0,6,8,5,8,10))])
problem_10_7_8 = Problem("problem_10_7_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,3,8,2,10)), RobotState(0,10,9,5,3,10))])
problem_10_7_9 = Problem("problem_10_7_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,8,5,5,10)), RobotState(0,5,1,4,9,10))])
problem_10_8_0 = Problem("problem_10_8_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,2,9,10)), RobotState(0,1,4,3,9,10))])
problem_10_8_1 = Problem("problem_10_8_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,4,2,5,10)), RobotState(0,7,3,8,6,10))])
problem_10_8_10 = Problem("problem_10_8_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,3,6,10)), RobotState(0,6,4,10,6,10))])
problem_10_8_2 = Problem("problem_10_8_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,7,8,10)), RobotState(0,8,8,1,9,10))])
problem_10_8_3 = Problem("problem_10_8_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,10,10,10,10)), RobotState(0,1,3,4,7,10))])
problem_10_8_4 = Problem("problem_10_8_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,7,9,2,10)), RobotState(0,4,4,3,8,10))])
problem_10_8_5 = Problem("problem_10_8_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,1,4,10)), RobotState(0,7,2,6,2,10))])
problem_10_8_6 = Problem("problem_10_8_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,1,3,1,10)), RobotState(0,5,7,6,6,10))])
problem_10_8_7 = Problem("problem_10_8_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,8,2,1,10)), RobotState(0,2,1,6,1,10))])
problem_10_8_8 = Problem("problem_10_8_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,3,2,7,10)), RobotState(0,4,5,4,6,10))])
problem_10_8_9 = Problem("problem_10_8_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,3,6,1,10)), RobotState(0,5,10,3,1,10))])
problem_10_9_0 = Problem("problem_10_9_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,9,7,3,10)), RobotState(0,1,9,3,9,10))])
problem_10_9_1 = Problem("problem_10_9_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,10,8,2,10)), RobotState(0,7,7,4,10,10))])
problem_10_9_10 = Problem("problem_10_9_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,2,10,10,10)), RobotState(0,2,8,4,5,10))])
problem_10_9_2 = Problem("problem_10_9_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,1,5,1,10)), RobotState(0,10,4,8,1,10))])
problem_10_9_3 = Problem("problem_10_9_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,4,8,6,10)), RobotState(0,8,6,2,4,10))])
problem_10_9_4 = Problem("problem_10_9_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,7,2,10)), RobotState(0,2,8,9,7,10))])
problem_10_9_5 = Problem("problem_10_9_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,2,9,7,10)), RobotState(0,4,8,4,7,10))])
problem_10_9_6 = Problem("problem_10_9_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,7,8,10)), RobotState(0,10,5,2,7,10))])
problem_10_9_7 = Problem("problem_10_9_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,1,3,10)), RobotState(0,7,3,9,4,10))])
problem_10_9_8 = Problem("problem_10_9_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,10,10,6,10)), RobotState(0,3,2,3,3,10))])
problem_10_9_9 = Problem("problem_10_9_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,6,5,10)), RobotState(0,2,8,8,8,10))])
problem_2_0_0 = Problem("problem_2_0_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,2,2)), RobotState(0,1,1,2,1,2))])
problem_2_0_1 = Problem("problem_2_0_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,1,2)), RobotState(0,1,1,1,2,2))])
problem_2_0_10 = Problem("problem_2_0_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,2,2,2,1,2))])
problem_2_0_2 = Problem("problem_2_0_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(0,2,1,2,1,2))])
problem_2_0_3 = Problem("problem_2_0_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,2,2)), RobotState(0,1,2,2,2,2))])
problem_2_0_4 = Problem("problem_2_0_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,2,2)), RobotState(0,2,1,2,2,2))])
problem_2_0_5 = Problem("problem_2_0_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(0,2,1,1,1,2))])
problem_2_0_6 = Problem("problem_2_0_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,1,2,1,2)), RobotState(1,1,2,1,2,2))])
problem_2_0_7 = Problem("problem_2_0_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,1,2)), RobotState(0,2,2,2,1,2))])
problem_2_0_8 = Problem("problem_2_0_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(0,2,1,1,2,2))])
problem_2_0_9 = Problem("problem_2_0_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,2,2)), RobotState(0,2,2,2,1,2))])
problem_2_1_0 = Problem("problem_2_1_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(0,2,2,1,1,2))])
problem_2_1_1 = Problem("problem_2_1_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,2,2,1,2))])
problem_2_1_10 = Problem("problem_2_1_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,1,2)), RobotState(0,1,1,2,1,2))])
problem_2_1_2 = Problem("problem_2_1_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,2,2)), RobotState(0,2,2,1,1,2))])
problem_2_1_3 = Problem("problem_2_1_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(0,2,2,2,1,2))])
problem_2_1_4 = Problem("problem_2_1_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(0,1,1,2,1,2))])
problem_2_1_5 = Problem("problem_2_1_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,2,1,1,2))])
problem_2_1_6 = Problem("problem_2_1_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,2,1,2,2,2))])
problem_2_1_7 = Problem("problem_2_1_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(0,2,1,2,1,2))])
problem_2_1_8 = Problem("problem_2_1_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,1,2)), RobotState(0,2,1,1,2,2))])
problem_2_1_9 = Problem("problem_2_1_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(1,2,2,2,2,2))])
problem_2_2_0 = Problem("problem_2_2_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,1,2)), RobotState(0,2,1,2,2,2))])
problem_2_2_1 = Problem("problem_2_2_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,1,2)), RobotState(0,2,2,1,1,2))])
problem_2_2_10 = Problem("problem_2_2_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(0,2,2,1,1,2))])
problem_2_2_2 = Problem("problem_2_2_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,1,2,1,2)), RobotState(0,2,2,1,2,2))])
problem_2_2_3 = Problem("problem_2_2_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,2,2)), RobotState(0,2,1,2,2,2))])
problem_2_2_4 = Problem("problem_2_2_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(0,2,1,1,2,2))])
problem_2_2_5 = Problem("problem_2_2_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,1,2,1,2,2))])
problem_2_2_6 = Problem("problem_2_2_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,1,1,1,2,2))])
problem_2_2_7 = Problem("problem_2_2_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,2,1,1,2,2))])
problem_2_2_8 = Problem("problem_2_2_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(1,2,2,2,2,2))])
problem_2_2_9 = Problem("problem_2_2_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,2)), RobotState(0,1,2,2,2,2))])
problem_2_3_0 = Problem("problem_2_3_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,1,2)), RobotState(0,2,2,2,2,2))])
problem_2_3_1 = Problem("problem_2_3_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(0,1,2,2,2,2))])
problem_2_3_10 = Problem("problem_2_3_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,1,2)), RobotState(0,2,2,1,2,2))])
problem_2_3_2 = Problem("problem_2_3_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,1,2)), RobotState(0,1,1,2,1,2))])
problem_2_3_3 = Problem("problem_2_3_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,2,2)), RobotState(0,1,1,2,1,2))])
problem_2_3_4 = Problem("problem_2_3_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(0,1,2,2,2,2))])
problem_2_3_5 = Problem("problem_2_3_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(0,2,1,1,1,2))])
problem_2_3_6 = Problem("problem_2_3_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,2,2)), RobotState(0,2,2,1,1,2))])
problem_2_3_7 = Problem("problem_2_3_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,2,2)), RobotState(0,1,1,2,2,2))])
problem_2_3_8 = Problem("problem_2_3_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,2)), RobotState(1,2,2,2,2,2))])
problem_2_3_9 = Problem("problem_2_3_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,1,2)), RobotState(0,2,2,1,2,2))])
problem_2_4_0 = Problem("problem_2_4_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,1,2)), RobotState(1,1,1,1,1,2))])
problem_2_4_1 = Problem("problem_2_4_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,2,2)), RobotState(0,2,2,1,1,2))])
problem_2_4_10 = Problem("problem_2_4_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(0,1,2,1,1,2))])
problem_2_4_2 = Problem("problem_2_4_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(0,2,1,2,2,2))])
problem_2_4_3 = Problem("problem_2_4_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,2)), RobotState(0,2,2,2,2,2))])
problem_2_4_4 = Problem("problem_2_4_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,2)), RobotState(0,2,2,2,1,2))])
problem_2_4_5 = Problem("problem_2_4_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,1,2)), RobotState(0,2,2,1,2,2))])
problem_2_4_6 = Problem("problem_2_4_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(0,1,2,2,1,2))])
problem_2_4_7 = Problem("problem_2_4_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(1,2,2,2,2,2))])
problem_2_4_8 = Problem("problem_2_4_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,1,2)), RobotState(0,1,1,1,2,2))])
problem_2_4_9 = Problem("problem_2_4_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,2,2)), RobotState(0,1,1,2,2,2))])
problem_2_5_0 = Problem("problem_2_5_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,1,2)), RobotState(1,2,1,2,1,2))])
problem_2_5_1 = Problem("problem_2_5_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,2,2,2,2)), RobotState(0,1,2,2,1,2))])
problem_2_5_10 = Problem("problem_2_5_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,2,2)), RobotState(0,2,2,2,1,2))])
problem_2_5_2 = Problem("problem_2_5_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,2,2)), RobotState(0,2,2,2,1,2))])
problem_2_5_3 = Problem("problem_2_5_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,1,2,1,2)), RobotState(0,1,1,2,2,2))])
problem_2_5_4 = Problem("problem_2_5_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(0,1,2,1,1,2))])
problem_2_5_5 = Problem("problem_2_5_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(1,1,1,1,1,2))])
problem_2_5_6 = Problem("problem_2_5_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,1,2)), RobotState(0,2,2,1,1,2))])
problem_2_5_7 = Problem("problem_2_5_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,2)), RobotState(0,2,2,1,1,2))])
problem_2_5_8 = Problem("problem_2_5_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(1,1,1,1,1,2))])
problem_2_5_9 = Problem("problem_2_5_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(1,1,2,1,2,2))])
problem_2_6_0 = Problem("problem_2_6_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,2,2)), RobotState(0,1,1,1,1,2))])
problem_2_6_1 = Problem("problem_2_6_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,2,2,1,2,2))])
problem_2_6_10 = Problem("problem_2_6_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,2,2)), RobotState(0,2,2,2,2,2))])
problem_2_6_2 = Problem("problem_2_6_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,2,2)), RobotState(0,1,1,2,1,2))])
problem_2_6_3 = Problem("problem_2_6_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,2,2,2,2))])
problem_2_6_4 = Problem("problem_2_6_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,2,2)), RobotState(0,2,1,1,1,2))])
problem_2_6_5 = Problem("problem_2_6_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,2,2,2,2)), RobotState(0,2,2,1,2,2))])
problem_2_6_6 = Problem("problem_2_6_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(0,1,1,1,1,2))])
problem_2_6_7 = Problem("problem_2_6_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,2,2,2,2)), RobotState(0,2,1,2,1,2))])
problem_2_6_8 = Problem("problem_2_6_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,1,2,2,2))])
problem_2_6_9 = Problem("problem_2_6_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(0,2,1,1,1,2))])
problem_2_7_0 = Problem("problem_2_7_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,2,2,1,2,2))])
problem_2_7_1 = Problem("problem_2_7_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,2,2,1,2,2))])
problem_2_7_10 = Problem("problem_2_7_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(1,1,2,1,2,2))])
problem_2_7_2 = Problem("problem_2_7_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,2,1,2,2)), RobotState(0,2,1,2,2,2))])
problem_2_7_3 = Problem("problem_2_7_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,1,2)), RobotState(0,2,2,2,2,2))])
problem_2_7_4 = Problem("problem_2_7_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(0,2,2,1,2,2))])
problem_2_7_5 = Problem("problem_2_7_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,1,2)), RobotState(0,1,1,1,2,2))])
problem_2_7_6 = Problem("problem_2_7_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,1,2)), RobotState(0,1,2,1,1,2))])
problem_2_7_7 = Problem("problem_2_7_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,2,2)), RobotState(0,1,1,2,2,2))])
problem_2_7_8 = Problem("problem_2_7_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(0,2,2,1,1,2))])
problem_2_7_9 = Problem("problem_2_7_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(0,2,1,2,2,2))])
problem_2_8_0 = Problem("problem_2_8_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,2,2)), RobotState(0,1,2,2,2,2))])
problem_2_8_1 = Problem("problem_2_8_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(0,2,1,2,2,2))])
problem_2_8_10 = Problem("problem_2_8_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,2,2,1,2))])
problem_2_8_2 = Problem("problem_2_8_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(0,2,1,2,1,2))])
problem_2_8_3 = Problem("problem_2_8_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(0,1,1,2,2,2))])
problem_2_8_4 = Problem("problem_2_8_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(1,2,1,2,1,2))])
problem_2_8_5 = Problem("problem_2_8_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,1,2)), RobotState(0,1,1,1,2,2))])
problem_2_8_6 = Problem("problem_2_8_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,2)), RobotState(0,1,1,1,1,2))])
problem_2_8_7 = Problem("problem_2_8_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(0,1,2,2,1,2))])
problem_2_8_8 = Problem("problem_2_8_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,2,1,1,2))])
problem_2_8_9 = Problem("problem_2_8_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,2,1,1,1,2))])
problem_2_9_0 = Problem("problem_2_9_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,2,2,2,1,2))])
problem_2_9_1 = Problem("problem_2_9_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(0,2,2,2,1,2))])
problem_2_9_10 = Problem("problem_2_9_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,1,2)), RobotState(0,1,2,2,1,2))])
problem_2_9_2 = Problem("problem_2_9_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(1,2,2,2,2,2))])
problem_2_9_3 = Problem("problem_2_9_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,2,2)), RobotState(1,1,1,1,1,2))])
problem_2_9_4 = Problem("problem_2_9_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(1,1,2,1,2,2))])
problem_2_9_5 = Problem("problem_2_9_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(0,1,2,2,2,2))])
problem_2_9_6 = Problem("problem_2_9_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,1,1,2,2))])
problem_2_9_7 = Problem("problem_2_9_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(0,1,1,2,1,2))])
problem_2_9_8 = Problem("problem_2_9_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,1,2)), RobotState(0,1,2,1,2,2))])
problem_2_9_9 = Problem("problem_2_9_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,2,1,2,2))])
problem_4_0_0 = Problem("problem_4_0_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,4,1,4)), RobotState(0,4,2,3,1,4))])
problem_4_0_1 = Problem("problem_4_0_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,3,4,4)), RobotState(0,2,4,4,2,4))])
problem_4_0_10 = Problem("problem_4_0_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,1,2,4)), RobotState(0,2,4,3,1,4))])
problem_4_0_2 = Problem("problem_4_0_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,3,4,4)), RobotState(0,4,3,2,2,4))])
problem_4_0_3 = Problem("problem_4_0_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,1,1,4)), RobotState(0,3,4,4,2,4))])
problem_4_0_4 = Problem("problem_4_0_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,1,1,4)), RobotState(0,2,4,1,1,4))])
problem_4_0_5 = Problem("problem_4_0_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,4,3,4)), RobotState(0,1,1,3,2,4))])
problem_4_0_6 = Problem("problem_4_0_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,4,4,4)), RobotState(0,2,4,1,4,4))])
problem_4_0_7 = Problem("problem_4_0_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,3,3,4)), RobotState(0,2,1,3,2,4))])
problem_4_0_8 = Problem("problem_4_0_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,3,4,4)), RobotState(0,1,4,4,4,4))])
problem_4_0_9 = Problem("problem_4_0_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,3,4)), RobotState(0,3,3,1,2,4))])
problem_4_1_0 = Problem("problem_4_1_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,2,4,4)), RobotState(0,1,4,2,1,4))])
problem_4_1_1 = Problem("problem_4_1_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,1,1,4)), RobotState(0,3,3,1,3,4))])
problem_4_1_10 = Problem("problem_4_1_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,1,4,4)), RobotState(0,1,1,2,1,4))])
problem_4_1_2 = Problem("problem_4_1_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,3,4,4)), RobotState(0,1,3,2,1,4))])
problem_4_1_3 = Problem("problem_4_1_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,2,3,4)), RobotState(0,2,1,2,4,4))])
problem_4_1_4 = Problem("problem_4_1_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,2,2,4)), RobotState(0,3,3,4,4,4))])
problem_4_1_5 = Problem("problem_4_1_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,3,4,4)), RobotState(0,2,1,1,1,4))])
problem_4_1_6 = Problem("problem_4_1_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,1,4)), RobotState(0,3,2,1,3,4))])
problem_4_1_7 = Problem("problem_4_1_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,4,3,4)), RobotState(0,1,3,3,4,4))])
problem_4_1_8 = Problem("problem_4_1_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,2,3,4)), RobotState(0,3,3,2,4,4))])
problem_4_1_9 = Problem("problem_4_1_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,2,4,4)), RobotState(0,4,1,2,3,4))])
problem_4_2_0 = Problem("problem_4_2_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,4,1,4)), RobotState(0,4,1,4,4,4))])
problem_4_2_1 = Problem("problem_4_2_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,2,4,4)), RobotState(0,3,4,2,2,4))])
problem_4_2_10 = Problem("problem_4_2_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,2,3,4)), RobotState(1,4,1,4,1,4))])
problem_4_2_2 = Problem("problem_4_2_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,3,1,4)), RobotState(0,1,3,4,4,4))])
problem_4_2_3 = Problem("problem_4_2_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,2,3,4)), RobotState(0,3,1,3,4,4))])
problem_4_2_4 = Problem("problem_4_2_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,4,1,4)), RobotState(0,1,2,3,2,4))])
problem_4_2_5 = Problem("problem_4_2_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,4,4,4)), RobotState(0,4,1,3,1,4))])
problem_4_2_6 = Problem("problem_4_2_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,4,3,4)), RobotState(0,3,3,1,2,4))])
problem_4_2_7 = Problem("problem_4_2_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,4,4,4)), RobotState(0,1,2,2,2,4))])
problem_4_2_8 = Problem("problem_4_2_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,3,2,4)), RobotState(0,1,2,2,1,4))])
problem_4_2_9 = Problem("problem_4_2_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,4)), RobotState(0,2,3,4,4,4))])
problem_4_3_0 = Problem("problem_4_3_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,4,1,4)), RobotState(0,1,2,2,2,4))])
problem_4_3_1 = Problem("problem_4_3_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,2,2,4)), RobotState(0,3,1,2,1,4))])
problem_4_3_10 = Problem("problem_4_3_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,3,4,4)), RobotState(0,3,1,4,1,4))])
problem_4_3_2 = Problem("problem_4_3_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,4,2,4)), RobotState(0,2,3,4,3,4))])
problem_4_3_3 = Problem("problem_4_3_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,3,3,4)), RobotState(0,2,1,4,3,4))])
problem_4_3_4 = Problem("problem_4_3_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,4,4,4)), RobotState(0,3,2,2,3,4))])
problem_4_3_5 = Problem("problem_4_3_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,3,1,4)), RobotState(0,4,4,4,4,4))])
problem_4_3_6 = Problem("problem_4_3_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,1,2,4)), RobotState(0,1,3,1,1,4))])
problem_4_3_7 = Problem("problem_4_3_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,1,4,4)), RobotState(0,4,2,3,1,4))])
problem_4_3_8 = Problem("problem_4_3_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,2,4,4)), RobotState(0,3,2,3,1,4))])
problem_4_3_9 = Problem("problem_4_3_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,2,3,4)), RobotState(0,1,4,3,1,4))])
problem_4_4_0 = Problem("problem_4_4_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,4,4)), RobotState(0,3,2,3,2,4))])
problem_4_4_1 = Problem("problem_4_4_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,3,2,4)), RobotState(0,1,2,4,3,4))])
problem_4_4_10 = Problem("problem_4_4_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,1,3,4)), RobotState(0,2,2,2,1,4))])
problem_4_4_2 = Problem("problem_4_4_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,2,2,4)), RobotState(0,1,1,2,2,4))])
problem_4_4_3 = Problem("problem_4_4_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,3,4)), RobotState(0,3,4,4,1,4))])
problem_4_4_4 = Problem("problem_4_4_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,3,4,4)), RobotState(0,2,3,4,4,4))])
problem_4_4_5 = Problem("problem_4_4_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,3,3,4)), RobotState(0,1,2,2,1,4))])
problem_4_4_6 = Problem("problem_4_4_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,2,1,4)), RobotState(0,1,1,3,3,4))])
problem_4_4_7 = Problem("problem_4_4_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,3,1,4)), RobotState(0,3,2,2,4,4))])
problem_4_4_8 = Problem("problem_4_4_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,3,2,3,4)), RobotState(0,3,1,3,2,4))])
problem_4_4_9 = Problem("problem_4_4_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,1,1,4)), RobotState(0,3,4,3,1,4))])
problem_4_5_0 = Problem("problem_4_5_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,2,2,4)), RobotState(0,2,2,3,1,4))])
problem_4_5_1 = Problem("problem_4_5_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,3,4,4)), RobotState(0,2,1,3,4,4))])
problem_4_5_10 = Problem("problem_4_5_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,1,2,4)), RobotState(1,2,4,2,4,4))])
problem_4_5_2 = Problem("problem_4_5_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,4,2,4)), RobotState(0,1,2,4,2,4))])
problem_4_5_3 = Problem("problem_4_5_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,1,2,4)), RobotState(0,4,3,3,1,4))])
problem_4_5_4 = Problem("problem_4_5_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,3,1,4)), RobotState(0,4,2,2,2,4))])
problem_4_5_5 = Problem("problem_4_5_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,4,4,4)), RobotState(0,4,4,1,2,4))])
problem_4_5_6 = Problem("problem_4_5_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,1,3,4)), RobotState(0,1,4,2,3,4))])
problem_4_5_7 = Problem("problem_4_5_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,4,1,4)), RobotState(0,1,4,1,1,4))])
problem_4_5_8 = Problem("problem_4_5_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,1,1,4)), RobotState(0,3,4,4,1,4))])
problem_4_5_9 = Problem("problem_4_5_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,1,3,4)), RobotState(0,3,1,4,4,4))])
problem_4_6_0 = Problem("problem_4_6_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,3,2,4)), RobotState(0,2,3,3,4,4))])
problem_4_6_1 = Problem("problem_4_6_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,2,2,4)), RobotState(0,3,1,2,2,4))])
problem_4_6_10 = Problem("problem_4_6_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,3,4)), RobotState(0,3,2,3,4,4))])
problem_4_6_2 = Problem("problem_4_6_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,4,4,4,4,4)), RobotState(0,3,3,4,1,4))])
problem_4_6_3 = Problem("problem_4_6_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,4,2,4)), RobotState(0,3,3,4,2,4))])
problem_4_6_4 = Problem("problem_4_6_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,3,3,4)), RobotState(1,3,1,3,1,4))])
problem_4_6_5 = Problem("problem_4_6_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,4,1,4)), RobotState(0,2,2,1,3,4))])
problem_4_6_6 = Problem("problem_4_6_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,3,3,4)), RobotState(0,4,1,1,4,4))])
problem_4_6_7 = Problem("problem_4_6_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,4,4)), RobotState(0,1,1,1,4,4))])
problem_4_6_8 = Problem("problem_4_6_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,1,1,4)), RobotState(0,2,4,4,3,4))])
problem_4_6_9 = Problem("problem_4_6_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,2,4,4)), RobotState(0,4,3,4,4,4))])
problem_4_7_0 = Problem("problem_4_7_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,3,2,4)), RobotState(0,3,1,3,2,4))])
problem_4_7_1 = Problem("problem_4_7_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,1,3,4)), RobotState(0,3,4,4,1,4))])
problem_4_7_10 = Problem("problem_4_7_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,1,2,4)), RobotState(1,1,3,1,3,4))])
problem_4_7_2 = Problem("problem_4_7_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,3,3,4)), RobotState(0,4,1,1,4,4))])
problem_4_7_3 = Problem("problem_4_7_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,4,3,4)), RobotState(0,2,3,4,2,4))])
problem_4_7_4 = Problem("problem_4_7_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,3,3,4)), RobotState(0,4,2,1,2,4))])
problem_4_7_5 = Problem("problem_4_7_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,1,2,4)), RobotState(0,2,2,4,4,4))])
problem_4_7_6 = Problem("problem_4_7_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,3,4,4)), RobotState(1,3,4,3,4,4))])
problem_4_7_7 = Problem("problem_4_7_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,1,4,4)), RobotState(1,2,4,2,4,4))])
problem_4_7_8 = Problem("problem_4_7_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,4,4,4)), RobotState(0,1,4,4,1,4))])
problem_4_7_9 = Problem("problem_4_7_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,4,2,4)), RobotState(0,2,1,3,3,4))])
problem_4_8_0 = Problem("problem_4_8_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,2,3,4)), RobotState(0,2,4,4,4,4))])
problem_4_8_1 = Problem("problem_4_8_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,2,2,2,4)), RobotState(0,4,4,4,3,4))])
problem_4_8_10 = Problem("problem_4_8_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,4,3,4)), RobotState(0,3,3,4,2,4))])
problem_4_8_2 = Problem("problem_4_8_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,4,1,4)), RobotState(0,2,4,1,1,4))])
problem_4_8_3 = Problem("problem_4_8_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,2,4,4)), RobotState(0,1,2,3,4,4))])
problem_4_8_4 = Problem("problem_4_8_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,2,2,4)), RobotState(0,4,2,2,3,4))])
problem_4_8_5 = Problem("problem_4_8_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,4,2,4)), RobotState(0,1,2,4,1,4))])
problem_4_8_6 = Problem("problem_4_8_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,4,1,4)), RobotState(0,3,1,4,3,4))])
problem_4_8_7 = Problem("problem_4_8_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,1,3,4)), RobotState(0,1,1,4,3,4))])
problem_4_8_8 = Problem("problem_4_8_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,3,2,4)), RobotState(0,3,1,3,4,4))])
problem_4_8_9 = Problem("problem_4_8_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,1,4,4)), RobotState(0,2,3,3,3,4))])
problem_4_9_0 = Problem("problem_4_9_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,1,4,4)), RobotState(0,2,2,2,3,4))])
problem_4_9_1 = Problem("problem_4_9_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,3,3,4)), RobotState(0,3,2,3,3,4))])
problem_4_9_10 = Problem("problem_4_9_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,3,3,4)), RobotState(0,4,4,1,4,4))])
problem_4_9_2 = Problem("problem_4_9_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,2,3,4)), RobotState(0,3,1,4,1,4))])
problem_4_9_3 = Problem("problem_4_9_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,3,3,4)), RobotState(0,3,2,4,2,4))])
problem_4_9_4 = Problem("problem_4_9_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,3,3,4)), RobotState(0,3,4,2,1,4))])
problem_4_9_5 = Problem("problem_4_9_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,1,1,4)), RobotState(0,2,1,2,3,4))])
problem_4_9_6 = Problem("problem_4_9_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,3,2,4)), RobotState(0,2,2,2,2,4))])
problem_4_9_7 = Problem("problem_4_9_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,1,4,4)), RobotState(0,1,4,4,3,4))])
problem_4_9_8 = Problem("problem_4_9_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,1,2,4)), RobotState(0,1,1,3,2,4))])
problem_4_9_9 = Problem("problem_4_9_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,3,1,4)), RobotState(0,4,3,2,3,4))])
problem_6_0_0 = Problem("problem_6_0_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,2,6,6,6)), RobotState(0,2,3,3,6,6))])
problem_6_0_1 = Problem("problem_6_0_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,2,4,6)), RobotState(0,6,2,6,5,6))])
problem_6_0_10 = Problem("problem_6_0_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,6,1,1,6)), RobotState(0,1,2,2,3,6))])
problem_6_0_2 = Problem("problem_6_0_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,4,2,6)), RobotState(0,1,5,4,6,6))])
problem_6_0_3 = Problem("problem_6_0_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,6,4,4,6)), RobotState(0,4,4,3,2,6))])
problem_6_0_4 = Problem("problem_6_0_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,3,6,6)), RobotState(0,6,6,2,4,6))])
problem_6_0_5 = Problem("problem_6_0_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,5,6,6)), RobotState(0,2,3,6,5,6))])
problem_6_0_6 = Problem("problem_6_0_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,5,2,6)), RobotState(0,6,6,3,1,6))])
problem_6_0_7 = Problem("problem_6_0_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,5,2,6)), RobotState(0,4,1,1,4,6))])
problem_6_0_8 = Problem("problem_6_0_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,2,1,6)), RobotState(0,4,3,2,5,6))])
problem_6_0_9 = Problem("problem_6_0_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,3,1,3,6)), RobotState(0,5,4,1,3,6))])
problem_6_1_0 = Problem("problem_6_1_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,5,3,6)), RobotState(0,3,4,1,4,6))])
problem_6_1_1 = Problem("problem_6_1_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,3,3,6)), RobotState(0,4,3,2,1,6))])
problem_6_1_10 = Problem("problem_6_1_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,1,5,6)), RobotState(0,4,5,2,1,6))])
problem_6_1_2 = Problem("problem_6_1_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,4,1,6)), RobotState(0,2,6,3,2,6))])
problem_6_1_3 = Problem("problem_6_1_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,1,5,6)), RobotState(0,6,3,1,3,6))])
problem_6_1_4 = Problem("problem_6_1_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,1,4,6)), RobotState(0,1,4,1,1,6))])
problem_6_1_5 = Problem("problem_6_1_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,5,4,6,6)), RobotState(0,6,6,3,4,6))])
problem_6_1_6 = Problem("problem_6_1_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,4,2,6)), RobotState(0,5,3,4,6,6))])
problem_6_1_7 = Problem("problem_6_1_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,4,5,6)), RobotState(0,3,6,6,2,6))])
problem_6_1_8 = Problem("problem_6_1_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,3,5,2,6)), RobotState(0,6,2,6,2,6))])
problem_6_1_9 = Problem("problem_6_1_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,6,3,6)), RobotState(0,6,6,3,5,6))])
problem_6_2_0 = Problem("problem_6_2_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,6,2,6)), RobotState(0,3,6,4,6,6))])
problem_6_2_1 = Problem("problem_6_2_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,5,4,6)), RobotState(0,2,2,1,3,6))])
problem_6_2_10 = Problem("problem_6_2_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,3,4,6)), RobotState(0,2,1,3,3,6))])
problem_6_2_2 = Problem("problem_6_2_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,1,2,6)), RobotState(0,5,4,1,5,6))])
problem_6_2_3 = Problem("problem_6_2_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,6,2,6)), RobotState(0,3,5,1,1,6))])
problem_6_2_4 = Problem("problem_6_2_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,3,2,6)), RobotState(0,4,3,2,1,6))])
problem_6_2_5 = Problem("problem_6_2_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,6,3,6)), RobotState(0,1,6,3,4,6))])
problem_6_2_6 = Problem("problem_6_2_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,6,6,4,6)), RobotState(0,6,5,4,6,6))])
problem_6_2_7 = Problem("problem_6_2_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,6,2,6)), RobotState(0,2,4,6,5,6))])
problem_6_2_8 = Problem("problem_6_2_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,4,4,6)), RobotState(0,6,2,5,2,6))])
problem_6_2_9 = Problem("problem_6_2_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,5,3,2,6)), RobotState(0,2,2,5,5,6))])
problem_6_3_0 = Problem("problem_6_3_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,3,5,6)), RobotState(0,2,6,5,1,6))])
problem_6_3_1 = Problem("problem_6_3_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,1,1,6)), RobotState(0,6,2,4,5,6))])
problem_6_3_10 = Problem("problem_6_3_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,1,1,6)), RobotState(0,4,2,6,4,6))])
problem_6_3_2 = Problem("problem_6_3_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,3,6,6)), RobotState(1,6,4,6,4,6))])
problem_6_3_3 = Problem("problem_6_3_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,3,2,6)), RobotState(0,6,4,4,6,6))])
problem_6_3_4 = Problem("problem_6_3_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,5,3,3,6)), RobotState(0,1,3,4,5,6))])
problem_6_3_5 = Problem("problem_6_3_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,1,6,6)), RobotState(0,5,6,6,5,6))])
problem_6_3_6 = Problem("problem_6_3_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,3,1,6)), RobotState(0,3,5,2,6,6))])
problem_6_3_7 = Problem("problem_6_3_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,1,6,2,6)), RobotState(0,4,5,2,1,6))])
problem_6_3_8 = Problem("problem_6_3_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,1,1,6)), RobotState(0,3,4,5,5,6))])
problem_6_3_9 = Problem("problem_6_3_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,5,1,6)), RobotState(0,4,3,4,2,6))])
problem_6_4_0 = Problem("problem_6_4_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,1,4,6)), RobotState(0,5,4,4,6,6))])
problem_6_4_1 = Problem("problem_6_4_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,4,4,1,6)), RobotState(0,4,3,5,3,6))])
problem_6_4_10 = Problem("problem_6_4_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,3,3,6,6)), RobotState(0,2,2,4,2,6))])
problem_6_4_2 = Problem("problem_6_4_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,2,5,6)), RobotState(0,3,6,4,4,6))])
problem_6_4_3 = Problem("problem_6_4_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,5,2,6)), RobotState(0,5,5,6,4,6))])
problem_6_4_4 = Problem("problem_6_4_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,2,3,2,6)), RobotState(0,1,3,4,6,6))])
problem_6_4_5 = Problem("problem_6_4_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,6,3,6,6)), RobotState(0,5,1,3,5,6))])
problem_6_4_6 = Problem("problem_6_4_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,3,6,6)), RobotState(0,4,4,1,4,6))])
problem_6_4_7 = Problem("problem_6_4_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,6,2,4,6)), RobotState(0,6,5,5,4,6))])
problem_6_4_8 = Problem("problem_6_4_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,4,2,6)), RobotState(0,2,6,2,4,6))])
problem_6_4_9 = Problem("problem_6_4_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,5,2,6)), RobotState(0,5,6,6,3,6))])
problem_6_5_0 = Problem("problem_6_5_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,6,2,6)), RobotState(1,2,4,2,4,6))])
problem_6_5_1 = Problem("problem_6_5_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,3,2,6)), RobotState(0,6,6,3,2,6))])
problem_6_5_10 = Problem("problem_6_5_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,6,2,3,6)), RobotState(0,4,3,6,5,6))])
problem_6_5_2 = Problem("problem_6_5_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,5,2,5,6)), RobotState(0,2,4,1,3,6))])
problem_6_5_3 = Problem("problem_6_5_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,5,5,6)), RobotState(0,2,1,6,1,6))])
problem_6_5_4 = Problem("problem_6_5_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,5,1,6)), RobotState(0,4,1,6,2,6))])
problem_6_5_5 = Problem("problem_6_5_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,6,3,6)), RobotState(0,3,5,2,2,6))])
problem_6_5_6 = Problem("problem_6_5_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,3,5,6)), RobotState(0,1,4,3,1,6))])
problem_6_5_7 = Problem("problem_6_5_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,3,3,3,6)), RobotState(0,6,1,5,5,6))])
problem_6_5_8 = Problem("problem_6_5_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,3,5,6)), RobotState(0,5,4,3,3,6))])
problem_6_5_9 = Problem("problem_6_5_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,1,5,6)), RobotState(0,5,1,4,5,6))])
problem_6_6_0 = Problem("problem_6_6_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,6,6,3,6)), RobotState(0,5,4,6,6,6))])
problem_6_6_1 = Problem("problem_6_6_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,4,3,6)), RobotState(0,2,5,4,5,6))])
problem_6_6_10 = Problem("problem_6_6_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,4,3,6,6)), RobotState(0,2,6,4,2,6))])
problem_6_6_2 = Problem("problem_6_6_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,4,1,6)), RobotState(0,6,5,4,6,6))])
problem_6_6_3 = Problem("problem_6_6_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,5,3,6)), RobotState(0,6,1,2,2,6))])
problem_6_6_4 = Problem("problem_6_6_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,2,2,6)), RobotState(0,1,1,2,4,6))])
problem_6_6_5 = Problem("problem_6_6_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,3,3,6)), RobotState(0,2,6,1,1,6))])
problem_6_6_6 = Problem("problem_6_6_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,3,2,6)), RobotState(0,4,1,5,5,6))])
problem_6_6_7 = Problem("problem_6_6_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,6,2,6)), RobotState(0,1,6,2,6,6))])
problem_6_6_8 = Problem("problem_6_6_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,4,6,6)), RobotState(0,5,5,3,1,6))])
problem_6_6_9 = Problem("problem_6_6_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,4,3,6)), RobotState(0,5,5,1,4,6))])
problem_6_7_0 = Problem("problem_6_7_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,4,3,6)), RobotState(0,2,2,1,3,6))])
problem_6_7_1 = Problem("problem_6_7_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,3,1,6,6)), RobotState(0,3,2,4,4,6))])
problem_6_7_10 = Problem("problem_6_7_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,6,6)), RobotState(0,5,4,4,2,6))])
problem_6_7_2 = Problem("problem_6_7_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,4,1,6)), RobotState(0,6,3,3,4,6))])
problem_6_7_3 = Problem("problem_6_7_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,3,2,6)), RobotState(0,4,4,6,3,6))])
problem_6_7_4 = Problem("problem_6_7_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,5,3,3,6)), RobotState(0,1,1,3,1,6))])
problem_6_7_5 = Problem("problem_6_7_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,1,6,6)), RobotState(0,4,2,6,6,6))])
problem_6_7_6 = Problem("problem_6_7_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,6,6,1,6)), RobotState(0,3,5,6,6,6))])
problem_6_7_7 = Problem("problem_6_7_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,4,4,6)), RobotState(0,3,1,6,4,6))])
problem_6_7_8 = Problem("problem_6_7_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,3,3,5,6)), RobotState(0,6,4,2,4,6))])
problem_6_7_9 = Problem("problem_6_7_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,3,2,6)), RobotState(0,3,4,6,5,6))])
problem_6_8_0 = Problem("problem_6_8_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,6,1,6)), RobotState(0,4,6,3,6,6))])
problem_6_8_1 = Problem("problem_6_8_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,1,4,6)), RobotState(0,4,4,1,5,6))])
problem_6_8_10 = Problem("problem_6_8_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,5,6,1,6)), RobotState(0,2,5,6,5,6))])
problem_6_8_2 = Problem("problem_6_8_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,5,4,6)), RobotState(0,2,1,3,3,6))])
problem_6_8_3 = Problem("problem_6_8_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,1,1,6)), RobotState(0,1,3,6,6,6))])
problem_6_8_4 = Problem("problem_6_8_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,5,6,6)), RobotState(0,1,1,4,2,6))])
problem_6_8_5 = Problem("problem_6_8_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,3,2,6)), RobotState(0,3,6,2,3,6))])
problem_6_8_6 = Problem("problem_6_8_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,6,4,6)), RobotState(0,4,5,1,6,6))])
problem_6_8_7 = Problem("problem_6_8_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,2,6,1,6)), RobotState(0,3,3,2,3,6))])
problem_6_8_8 = Problem("problem_6_8_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,1,2,4,6)), RobotState(0,1,3,6,2,6))])
problem_6_8_9 = Problem("problem_6_8_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,5,2,5,6)), RobotState(0,3,4,6,4,6))])
problem_6_9_0 = Problem("problem_6_9_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,5,5,1,6)), RobotState(0,1,6,3,1,6))])
problem_6_9_1 = Problem("problem_6_9_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,6,1,6)), RobotState(0,2,2,4,2,6))])
problem_6_9_10 = Problem("problem_6_9_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,6,3,6)), RobotState(0,2,4,3,6,6))])
problem_6_9_2 = Problem("problem_6_9_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,3,1,6)), RobotState(0,6,1,2,2,6))])
problem_6_9_3 = Problem("problem_6_9_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,2,4,3,6)), RobotState(0,6,6,4,5,6))])
problem_6_9_4 = Problem("problem_6_9_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,5,1,6)), RobotState(0,5,1,1,6,6))])
problem_6_9_5 = Problem("problem_6_9_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,3,2,6)), RobotState(0,6,6,1,2,6))])
problem_6_9_6 = Problem("problem_6_9_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,6,2,6)), RobotState(0,5,3,4,5,6))])
problem_6_9_7 = Problem("problem_6_9_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,2,2,6)), RobotState(0,1,1,3,1,6))])
problem_6_9_8 = Problem("problem_6_9_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,5,6,6,6)), RobotState(1,4,1,4,1,6))])
problem_6_9_9 = Problem("problem_6_9_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,1,1,6)), RobotState(0,4,2,4,2,6))])
problem_8_0_0 = Problem("problem_8_0_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,7,4,4,8)), RobotState(0,4,6,2,6,8))])
problem_8_0_1 = Problem("problem_8_0_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,8,2,7,8)), RobotState(0,1,4,7,5,8))])
problem_8_0_10 = Problem("problem_8_0_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,8,5,6,8)), RobotState(0,7,7,3,5,8))])
problem_8_0_2 = Problem("problem_8_0_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,5,4,1,8)), RobotState(0,1,7,4,6,8))])
problem_8_0_3 = Problem("problem_8_0_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,4,2,8)), RobotState(0,4,7,6,6,8))])
problem_8_0_4 = Problem("problem_8_0_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,7,1,5,8)), RobotState(0,5,8,8,8,8))])
problem_8_0_5 = Problem("problem_8_0_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,3,5,6,8)), RobotState(0,8,1,8,1,8))])
problem_8_0_6 = Problem("problem_8_0_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,8,8,2,8)), RobotState(0,2,5,8,5,8))])
problem_8_0_7 = Problem("problem_8_0_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,3,5,8)), RobotState(0,7,7,2,2,8))])
problem_8_0_8 = Problem("problem_8_0_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,3,3,8)), RobotState(0,5,5,7,6,8))])
problem_8_0_9 = Problem("problem_8_0_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,3,7,5,8)), RobotState(0,6,6,5,2,8))])
problem_8_1_0 = Problem("problem_8_1_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,8,7,8,8)), RobotState(0,1,8,3,7,8))])
problem_8_1_1 = Problem("problem_8_1_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,6,1,5,8)), RobotState(0,3,3,5,6,8))])
problem_8_1_10 = Problem("problem_8_1_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,7,2,8)), RobotState(0,2,5,5,3,8))])
problem_8_1_2 = Problem("problem_8_1_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,8,3,7,8)), RobotState(0,1,5,8,8,8))])
problem_8_1_3 = Problem("problem_8_1_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,7,8,4,8)), RobotState(0,4,3,7,3,8))])
problem_8_1_4 = Problem("problem_8_1_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,5,7,8)), RobotState(0,2,1,5,6,8))])
problem_8_1_5 = Problem("problem_8_1_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,3,2,8)), RobotState(0,5,2,5,8,8))])
problem_8_1_6 = Problem("problem_8_1_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,6,8,5,8)), RobotState(0,1,7,7,7,8))])
problem_8_1_7 = Problem("problem_8_1_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,8,2,6,8)), RobotState(0,8,5,7,1,8))])
problem_8_1_8 = Problem("problem_8_1_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,5,4,8,8)), RobotState(0,5,4,5,8,8))])
problem_8_1_9 = Problem("problem_8_1_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,8,5,3,8)), RobotState(0,1,1,1,7,8))])
problem_8_2_0 = Problem("problem_8_2_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,3,3,2,8)), RobotState(0,1,1,3,8,8))])
problem_8_2_1 = Problem("problem_8_2_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,6,8,8,8)), RobotState(0,8,6,7,2,8))])
problem_8_2_10 = Problem("problem_8_2_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,8,4,7,8)), RobotState(0,5,7,2,3,8))])
problem_8_2_2 = Problem("problem_8_2_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,4,5,1,8)), RobotState(0,8,1,1,4,8))])
problem_8_2_3 = Problem("problem_8_2_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,1,4,6,8)), RobotState(0,8,7,7,8,8))])
problem_8_2_4 = Problem("problem_8_2_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,8,5,7,8)), RobotState(0,8,5,2,2,8))])
problem_8_2_5 = Problem("problem_8_2_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,7,5,8)), RobotState(0,2,4,4,5,8))])
problem_8_2_6 = Problem("problem_8_2_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,6,2,7,8)), RobotState(0,8,6,5,6,8))])
problem_8_2_7 = Problem("problem_8_2_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,2,7,7,8)), RobotState(0,2,2,5,6,8))])
problem_8_2_8 = Problem("problem_8_2_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,5,8,3,8)), RobotState(0,7,1,2,3,8))])
problem_8_2_9 = Problem("problem_8_2_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,3,1,8)), RobotState(0,2,7,6,2,8))])
problem_8_3_0 = Problem("problem_8_3_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,1,4,8)), RobotState(0,7,2,5,8,8))])
problem_8_3_1 = Problem("problem_8_3_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,8,8,4,8)), RobotState(0,8,2,2,8,8))])
problem_8_3_10 = Problem("problem_8_3_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,1,5,8)), RobotState(0,4,4,2,5,8))])
problem_8_3_2 = Problem("problem_8_3_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,3,7,8)), RobotState(0,7,8,8,2,8))])
problem_8_3_3 = Problem("problem_8_3_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,1,2,6,8)), RobotState(0,4,6,1,4,8))])
problem_8_3_4 = Problem("problem_8_3_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,8,5,8)), RobotState(0,2,5,7,6,8))])
problem_8_3_5 = Problem("problem_8_3_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,5,5,8)), RobotState(0,3,8,6,1,8))])
problem_8_3_6 = Problem("problem_8_3_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,2,2,8)), RobotState(0,8,4,1,6,8))])
problem_8_3_7 = Problem("problem_8_3_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,7,7,8)), RobotState(0,6,3,7,5,8))])
problem_8_3_8 = Problem("problem_8_3_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,3,7,4,8)), RobotState(0,6,3,5,3,8))])
problem_8_3_9 = Problem("problem_8_3_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,7,1,8)), RobotState(0,2,4,6,5,8))])
problem_8_4_0 = Problem("problem_8_4_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,5,4,4,8)), RobotState(0,4,8,2,4,8))])
problem_8_4_1 = Problem("problem_8_4_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,8,7,4,8)), RobotState(0,3,5,7,5,8))])
problem_8_4_10 = Problem("problem_8_4_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,8,2,6,8)), RobotState(0,1,2,4,5,8))])
problem_8_4_2 = Problem("problem_8_4_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,5,5,1,8)), RobotState(0,7,1,4,3,8))])
problem_8_4_3 = Problem("problem_8_4_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,7,2,2,8)), RobotState(0,2,3,6,7,8))])
problem_8_4_4 = Problem("problem_8_4_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,6,7,8)), RobotState(0,2,7,4,5,8))])
problem_8_4_5 = Problem("problem_8_4_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,7,7,4,8)), RobotState(0,5,6,4,6,8))])
problem_8_4_6 = Problem("problem_8_4_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,5,7,8,8)), RobotState(0,5,5,3,2,8))])
problem_8_4_7 = Problem("problem_8_4_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,8,7,8)), RobotState(0,8,3,2,1,8))])
problem_8_4_8 = Problem("problem_8_4_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,8,1,6,8)), RobotState(0,2,8,6,6,8))])
problem_8_4_9 = Problem("problem_8_4_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,7,5,4,8)), RobotState(0,3,2,7,1,8))])
problem_8_5_0 = Problem("problem_8_5_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,8,4,5,8)), RobotState(0,1,3,4,8,8))])
problem_8_5_1 = Problem("problem_8_5_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,2,1,6,8)), RobotState(0,3,7,7,3,8))])
problem_8_5_10 = Problem("problem_8_5_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,5,5,3,8)), RobotState(0,8,2,6,8,8))])
problem_8_5_2 = Problem("problem_8_5_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,4,7,1,8)), RobotState(0,5,6,4,5,8))])
problem_8_5_3 = Problem("problem_8_5_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,7,1,6,8)), RobotState(0,7,1,7,1,8))])
problem_8_5_4 = Problem("problem_8_5_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,6,6,6,8)), RobotState(0,4,8,4,8,8))])
problem_8_5_5 = Problem("problem_8_5_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,6,7,8,8)), RobotState(1,6,5,6,5,8))])
problem_8_5_6 = Problem("problem_8_5_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,8,2,2,8)), RobotState(0,7,4,1,2,8))])
problem_8_5_7 = Problem("problem_8_5_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,6,3,8)), RobotState(0,8,6,3,8,8))])
problem_8_5_8 = Problem("problem_8_5_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,5,8,3,8)), RobotState(0,1,8,3,2,8))])
problem_8_5_9 = Problem("problem_8_5_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,5,2,6,8)), RobotState(0,8,8,1,5,8))])
problem_8_6_0 = Problem("problem_8_6_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,6,8,7,8)), RobotState(0,5,6,2,5,8))])
problem_8_6_1 = Problem("problem_8_6_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,8,6,5,8)), RobotState(0,2,1,2,6,8))])
problem_8_6_10 = Problem("problem_8_6_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,7,8,5,8)), RobotState(0,4,7,7,1,8))])
problem_8_6_2 = Problem("problem_8_6_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,6,2,8)), RobotState(0,7,1,1,2,8))])
problem_8_6_3 = Problem("problem_8_6_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,4,4,8)), RobotState(0,5,4,7,1,8))])
problem_8_6_4 = Problem("problem_8_6_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,8,7,8,8)), RobotState(0,2,5,4,8,8))])
problem_8_6_5 = Problem("problem_8_6_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,6,5,4,8)), RobotState(0,5,1,8,8,8))])
problem_8_6_6 = Problem("problem_8_6_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,6,1,8)), RobotState(0,7,8,8,2,8))])
problem_8_6_7 = Problem("problem_8_6_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,5,8,8)), RobotState(0,5,2,1,5,8))])
problem_8_6_8 = Problem("problem_8_6_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,6,8,8)), RobotState(0,4,3,6,1,8))])
problem_8_6_9 = Problem("problem_8_6_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,1,5,8)), RobotState(0,5,6,6,2,8))])
problem_8_7_0 = Problem("problem_8_7_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,1,3,2,8)), RobotState(0,5,3,6,2,8))])
problem_8_7_1 = Problem("problem_8_7_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,4,1,7,8)), RobotState(0,8,1,4,1,8))])
problem_8_7_10 = Problem("problem_8_7_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,8,2,4,8)), RobotState(0,7,1,7,6,8))])
problem_8_7_2 = Problem("problem_8_7_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,7,2,1,8)), RobotState(0,8,5,3,6,8))])
problem_8_7_3 = Problem("problem_8_7_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,8,4,8)), RobotState(0,4,8,6,2,8))])
problem_8_7_4 = Problem("problem_8_7_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,1,5,7,8)), RobotState(0,4,7,1,8,8))])
problem_8_7_5 = Problem("problem_8_7_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,5,7,8)), RobotState(0,5,4,4,4,8))])
problem_8_7_6 = Problem("problem_8_7_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,1,1,8)), RobotState(0,5,6,1,5,8))])
problem_8_7_7 = Problem("problem_8_7_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,3,5,1,8)), RobotState(0,5,5,5,3,8))])
problem_8_7_8 = Problem("problem_8_7_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,8,8,4,8)), RobotState(0,8,2,1,1,8))])
problem_8_7_9 = Problem("problem_8_7_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,5,1,4,8)), RobotState(0,4,6,5,1,8))])
problem_8_8_0 = Problem("problem_8_8_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,2,3,1,8)), RobotState(0,3,4,3,8,8))])
problem_8_8_1 = Problem("problem_8_8_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,8,5,6,8)), RobotState(0,1,7,2,6,8))])
problem_8_8_10 = Problem("problem_8_8_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,4,3,4,8)), RobotState(0,8,3,2,1,8))])
problem_8_8_2 = Problem("problem_8_8_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,6,8,8)), RobotState(0,3,5,5,3,8))])
problem_8_8_3 = Problem("problem_8_8_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,5,2,1,8)), RobotState(0,1,1,7,2,8))])
problem_8_8_4 = Problem("problem_8_8_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,4,4,6,8)), RobotState(0,6,3,3,1,8))])
problem_8_8_5 = Problem("problem_8_8_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,3,7,5,8)), RobotState(0,6,4,2,5,8))])
problem_8_8_6 = Problem("problem_8_8_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,2,8,8)), RobotState(0,6,5,6,8,8))])
problem_8_8_7 = Problem("problem_8_8_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,1,1,8)), RobotState(0,5,8,6,6,8))])
problem_8_8_8 = Problem("problem_8_8_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,7,8,5,8)), RobotState(0,2,1,7,2,8))])
problem_8_8_9 = Problem("problem_8_8_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,5,2,8)), RobotState(0,3,3,1,6,8))])
problem_8_9_0 = Problem("problem_8_9_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,6,8,6,8)), RobotState(0,3,8,6,2,8))])
problem_8_9_1 = Problem("problem_8_9_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,7,8)), RobotState(0,2,8,2,8,8))])
problem_8_9_10 = Problem("problem_8_9_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,7,3,2,8)), RobotState(0,3,5,8,8,8))])
problem_8_9_2 = Problem("problem_8_9_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,4,2,8)), RobotState(0,3,4,6,6,8))])
problem_8_9_3 = Problem("problem_8_9_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,5,4,8)), RobotState(0,3,5,8,6,8))])
problem_8_9_4 = Problem("problem_8_9_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,2,5,3,8)), RobotState(0,2,2,3,3,8))])
problem_8_9_5 = Problem("problem_8_9_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,4,2,4,2,8)), RobotState(0,1,4,2,6,8))])
problem_8_9_6 = Problem("problem_8_9_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,8,6,2,8)), RobotState(0,6,3,7,3,8))])
problem_8_9_7 = Problem("problem_8_9_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,1,2,8,8)), RobotState(0,6,7,1,5,8))])
problem_8_9_8 = Problem("problem_8_9_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,8,5,2,8)), RobotState(0,7,7,7,5,8))])
problem_8_9_9 = Problem("problem_8_9_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,4,3,8,8)), RobotState(0,2,5,2,2,8))])
problem_10_0_0 = Problem("problem_10_0_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,8,5,7,10)), RobotState(0,4,5,4,7,10))])
problem_10_0_1 = Problem("problem_10_0_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,6,2,10,10)), RobotState(0,7,4,3,4,10))])
problem_10_0_10 = Problem("problem_10_0_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,7,3,8,10)), RobotState(0,7,9,1,3,10))])
problem_10_0_2 = Problem("problem_10_0_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,7,7,5,10)), RobotState(0,9,7,1,7,10))])
problem_10_0_3 = Problem("problem_10_0_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,7,6,6,10)), RobotState(0,9,10,3,1,10))])
problem_10_0_4 = Problem("problem_10_0_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,7,3,7,10)), RobotState(0,10,2,7,4,10))])
problem_10_0_5 = Problem("problem_10_0_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,5,3,6,10)), RobotState(0,1,4,6,10,10))])
problem_10_0_6 = Problem("problem_10_0_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,6,5,8,10)), RobotState(0,3,10,8,5,10))])
problem_10_0_7 = Problem("problem_10_0_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,5,6,3,10)), RobotState(0,7,5,6,4,10))])
problem_10_0_8 = Problem("problem_10_0_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,6,10,10)), RobotState(0,2,4,3,5,10))])
problem_10_0_9 = Problem("problem_10_0_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,8,8,10,10)), RobotState(0,5,10,5,1,10))])
problem_10_1_0 = Problem("problem_10_1_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,3,9,10)), RobotState(0,1,8,2,8,10))])
problem_10_1_1 = Problem("problem_10_1_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,6,9,5,10)), RobotState(0,1,10,9,5,10))])
problem_10_1_10 = Problem("problem_10_1_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,2,4,10)), RobotState(0,8,3,1,10,10))])
problem_10_1_2 = Problem("problem_10_1_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,3,3,4,10)), RobotState(0,1,1,4,8,10))])
problem_10_1_3 = Problem("problem_10_1_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,7,1,8,10)), RobotState(0,3,5,7,2,10))])
problem_10_1_4 = Problem("problem_10_1_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,9,8,5,10)), RobotState(0,2,2,5,7,10))])
problem_10_1_5 = Problem("problem_10_1_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,2,2,8,10)), RobotState(0,8,2,9,9,10))])
problem_10_1_6 = Problem("problem_10_1_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,9,5,10)), RobotState(0,10,5,8,6,10))])
problem_10_1_7 = Problem("problem_10_1_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,5,9,10)), RobotState(0,2,10,4,1,10))])
problem_10_1_8 = Problem("problem_10_1_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,3,1,10)), RobotState(0,6,10,1,4,10))])
problem_10_1_9 = Problem("problem_10_1_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,9,9,10)), RobotState(0,3,5,2,9,10))])
problem_10_2_0 = Problem("problem_10_2_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,9,10,8,10)), RobotState(0,4,9,2,4,10))])
problem_10_2_1 = Problem("problem_10_2_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,6,1,10)), RobotState(0,5,8,3,3,10))])
problem_10_2_10 = Problem("problem_10_2_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,1,6,4,10)), RobotState(0,5,4,6,6,10))])
problem_10_2_2 = Problem("problem_10_2_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,7,3,5,10)), RobotState(0,6,7,2,3,10))])
problem_10_2_3 = Problem("problem_10_2_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,7,5,10)), RobotState(0,9,10,2,2,10))])
problem_10_2_4 = Problem("problem_10_2_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,10,10,4,10)), RobotState(0,10,3,6,3,10))])
problem_10_2_5 = Problem("problem_10_2_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,2,10,10)), RobotState(0,10,2,6,5,10))])
problem_10_2_6 = Problem("problem_10_2_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,6,10,10)), RobotState(0,6,1,8,4,10))])
problem_10_2_7 = Problem("problem_10_2_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,9,6,3,10)), RobotState(0,8,4,9,5,10))])
problem_10_2_8 = Problem("problem_10_2_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,7,9,7,10)), RobotState(0,1,9,3,3,10))])
problem_10_2_9 = Problem("problem_10_2_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,1,7,3,10)), RobotState(0,7,6,1,8,10))])
problem_10_3_0 = Problem("problem_10_3_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,6,7,3,10)), RobotState(0,9,6,7,6,10))])
problem_10_3_1 = Problem("problem_10_3_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,3,8,10,10)), RobotState(0,2,7,8,6,10))])
problem_10_3_10 = Problem("problem_10_3_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,7,1,3,10)), RobotState(0,1,10,9,1,10))])
problem_10_3_2 = Problem("problem_10_3_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,5,9,10)), RobotState(0,7,5,3,1,10))])
problem_10_3_3 = Problem("problem_10_3_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,8,9,2,10)), RobotState(0,4,1,8,1,10))])
problem_10_3_4 = Problem("problem_10_3_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,2,5,6,10)), RobotState(0,3,8,4,5,10))])
problem_10_3_5 = Problem("problem_10_3_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,7,1,5,10)), RobotState(0,4,6,2,8,10))])
problem_10_3_6 = Problem("problem_10_3_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,2,10,10)), RobotState(0,5,7,9,1,10))])
problem_10_3_7 = Problem("problem_10_3_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,7,2,9,10)), RobotState(0,5,2,4,3,10))])
problem_10_3_8 = Problem("problem_10_3_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,6,6,7,10)), RobotState(0,5,4,2,8,10))])
problem_10_3_9 = Problem("problem_10_3_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,5,7,3,10)), RobotState(0,4,10,10,5,10))])
problem_10_4_0 = Problem("problem_10_4_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,6,2,1,10)), RobotState(0,4,1,6,7,10))])
problem_10_4_1 = Problem("problem_10_4_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,2,1,10)), RobotState(0,9,5,1,8,10))])
problem_10_4_10 = Problem("problem_10_4_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,2,1,1,10)), RobotState(0,3,5,4,8,10))])
problem_10_4_2 = Problem("problem_10_4_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,7,5,6,10)), RobotState(0,8,5,4,6,10))])
problem_10_4_3 = Problem("problem_10_4_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,2,8,10)), RobotState(0,4,3,8,4,10))])
problem_10_4_4 = Problem("problem_10_4_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,1,7,5,10)), RobotState(0,1,5,5,5,10))])
problem_10_4_5 = Problem("problem_10_4_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,9,7,7,10)), RobotState(0,4,4,5,4,10))])
problem_10_4_6 = Problem("problem_10_4_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,6,9,10,10)), RobotState(0,10,5,9,9,10))])
problem_10_4_7 = Problem("problem_10_4_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,1,2,9,10)), RobotState(0,5,2,7,4,10))])
problem_10_4_8 = Problem("problem_10_4_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,9,3,10)), RobotState(0,5,10,9,9,10))])
problem_10_4_9 = Problem("problem_10_4_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,8,2,10)), RobotState(0,8,8,1,7,10))])
problem_10_5_0 = Problem("problem_10_5_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,5,6,10,10)), RobotState(0,1,5,7,2,10))])
problem_10_5_1 = Problem("problem_10_5_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,10,8,5,10)), RobotState(0,3,5,8,6,10))])
problem_10_5_10 = Problem("problem_10_5_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,8,6,4,10)), RobotState(0,9,5,5,8,10))])
problem_10_5_2 = Problem("problem_10_5_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,10,9,8,10)), RobotState(0,8,2,4,8,10))])
problem_10_5_3 = Problem("problem_10_5_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,8,3,7,10)), RobotState(0,8,1,10,7,10))])
problem_10_5_4 = Problem("problem_10_5_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,9,2,5,10)), RobotState(0,3,5,4,3,10))])
problem_10_5_5 = Problem("problem_10_5_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,4,6,9,10)), RobotState(0,7,2,7,8,10))])
problem_10_5_6 = Problem("problem_10_5_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,2,9,10)), RobotState(0,8,2,7,9,10))])
problem_10_5_7 = Problem("problem_10_5_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,8,5,8,10)), RobotState(0,5,9,4,1,10))])
problem_10_5_8 = Problem("problem_10_5_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,3,7,10)), RobotState(0,3,7,5,6,10))])
problem_10_5_9 = Problem("problem_10_5_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,1,9,10)), RobotState(0,5,8,3,3,10))])
problem_10_6_0 = Problem("problem_10_6_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,10,9,3,10)), RobotState(0,7,6,3,8,10))])
problem_10_6_1 = Problem("problem_10_6_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,8,9,9,10)), RobotState(0,9,6,8,7,10))])
problem_10_6_10 = Problem("problem_10_6_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,7,3,10)), RobotState(0,7,2,2,8,10))])
problem_10_6_2 = Problem("problem_10_6_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,2,9,1,10)), RobotState(0,4,7,8,5,10))])
problem_10_6_3 = Problem("problem_10_6_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,4,9,10)), RobotState(0,4,2,4,4,10))])
problem_10_6_4 = Problem("problem_10_6_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,8,1,10)), RobotState(0,5,5,10,7,10))])
problem_10_6_5 = Problem("problem_10_6_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,6,3,10)), RobotState(0,8,2,9,3,10))])
problem_10_6_6 = Problem("problem_10_6_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,3,4,6,10)), RobotState(0,4,1,7,1,10))])
problem_10_6_7 = Problem("problem_10_6_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,5,7,7,10)), RobotState(0,10,8,5,4,10))])
problem_10_6_8 = Problem("problem_10_6_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,7,1,5,10)), RobotState(0,1,8,9,1,10))])
problem_10_6_9 = Problem("problem_10_6_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,4,3,10)), RobotState(0,7,9,9,5,10))])
problem_10_7_0 = Problem("problem_10_7_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,9,8,9,10)), RobotState(0,5,9,5,4,10))])
problem_10_7_1 = Problem("problem_10_7_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,8,1,10)), RobotState(0,1,6,5,1,10))])
problem_10_7_10 = Problem("problem_10_7_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,7,10,1,10)), RobotState(0,9,6,7,8,10))])
problem_10_7_2 = Problem("problem_10_7_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,3,1,2,10)), RobotState(0,9,4,10,7,10))])
problem_10_7_3 = Problem("problem_10_7_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,5,9,6,10)), RobotState(0,4,10,3,7,10))])
problem_10_7_4 = Problem("problem_10_7_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,9,1,10)), RobotState(0,8,2,4,2,10))])
problem_10_7_5 = Problem("problem_10_7_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,1,1,3,10)), RobotState(0,1,4,7,6,10))])
problem_10_7_6 = Problem("problem_10_7_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,1,9,10)), RobotState(0,8,9,7,2,10))])
problem_10_7_7 = Problem("problem_10_7_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,9,1,5,10)), RobotState(0,6,8,5,8,10))])
problem_10_7_8 = Problem("problem_10_7_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,3,8,2,10)), RobotState(0,10,9,5,3,10))])
problem_10_7_9 = Problem("problem_10_7_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,8,5,5,10)), RobotState(0,5,1,4,9,10))])
problem_10_8_0 = Problem("problem_10_8_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,2,9,10)), RobotState(0,1,4,3,9,10))])
problem_10_8_1 = Problem("problem_10_8_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,4,2,5,10)), RobotState(0,7,3,8,6,10))])
problem_10_8_10 = Problem("problem_10_8_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,3,6,10)), RobotState(0,6,4,10,6,10))])
problem_10_8_2 = Problem("problem_10_8_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,7,8,10)), RobotState(0,8,8,1,9,10))])
problem_10_8_3 = Problem("problem_10_8_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,10,10,10,10)), RobotState(0,1,3,4,7,10))])
problem_10_8_4 = Problem("problem_10_8_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,7,9,2,10)), RobotState(0,4,4,3,8,10))])
problem_10_8_5 = Problem("problem_10_8_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,1,4,10)), RobotState(0,7,2,6,2,10))])
problem_10_8_6 = Problem("problem_10_8_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,1,3,1,10)), RobotState(0,5,7,6,6,10))])
problem_10_8_7 = Problem("problem_10_8_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,8,2,1,10)), RobotState(0,2,1,6,1,10))])
problem_10_8_8 = Problem("problem_10_8_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,3,2,7,10)), RobotState(0,4,5,4,6,10))])
problem_10_8_9 = Problem("problem_10_8_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,3,6,1,10)), RobotState(0,5,10,3,1,10))])
problem_10_9_0 = Problem("problem_10_9_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,9,7,3,10)), RobotState(0,1,9,3,9,10))])
problem_10_9_1 = Problem("problem_10_9_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,10,8,2,10)), RobotState(0,7,7,4,10,10))])
problem_10_9_10 = Problem("problem_10_9_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,9,2,10,10,10)), RobotState(0,2,8,4,5,10))])
problem_10_9_2 = Problem("problem_10_9_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,1,5,1,10)), RobotState(0,10,4,8,1,10))])
problem_10_9_3 = Problem("problem_10_9_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,4,8,6,10)), RobotState(0,8,6,2,4,10))])
problem_10_9_4 = Problem("problem_10_9_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,7,2,10)), RobotState(0,2,8,9,7,10))])
problem_10_9_5 = Problem("problem_10_9_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,10,2,9,7,10)), RobotState(0,4,8,4,7,10))])
problem_10_9_6 = Problem("problem_10_9_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,7,8,10)), RobotState(0,10,5,2,7,10))])
problem_10_9_7 = Problem("problem_10_9_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,1,3,10)), RobotState(0,7,3,9,4,10))])
problem_10_9_8 = Problem("problem_10_9_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,10,10,6,10)), RobotState(0,3,2,3,3,10))])
problem_10_9_9 = Problem("problem_10_9_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,6,5,10)), RobotState(0,2,8,8,8,10))])
problem_2_0_0 = Problem("problem_2_0_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,2,2)), RobotState(0,1,1,2,1,2))])
problem_2_0_1 = Problem("problem_2_0_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,1,2)), RobotState(0,1,1,1,2,2))])
problem_2_0_10 = Problem("problem_2_0_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,2,2,2,1,2))])
problem_2_0_2 = Problem("problem_2_0_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(0,2,1,2,1,2))])
problem_2_0_3 = Problem("problem_2_0_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,2,2)), RobotState(0,1,2,2,2,2))])
problem_2_0_4 = Problem("problem_2_0_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,2,2)), RobotState(0,2,1,2,2,2))])
problem_2_0_5 = Problem("problem_2_0_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(0,2,1,1,1,2))])
problem_2_0_6 = Problem("problem_2_0_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,1,2,1,2)), RobotState(1,1,2,1,2,2))])
problem_2_0_7 = Problem("problem_2_0_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,1,2)), RobotState(0,2,2,2,1,2))])
problem_2_0_8 = Problem("problem_2_0_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(0,2,1,1,2,2))])
problem_2_0_9 = Problem("problem_2_0_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,2,2)), RobotState(0,2,2,2,1,2))])
problem_2_1_0 = Problem("problem_2_1_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(0,2,2,1,1,2))])
problem_2_1_1 = Problem("problem_2_1_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,2,2,1,2))])
problem_2_1_10 = Problem("problem_2_1_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,1,2)), RobotState(0,1,1,2,1,2))])
problem_2_1_2 = Problem("problem_2_1_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,2,2)), RobotState(0,2,2,1,1,2))])
problem_2_1_3 = Problem("problem_2_1_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(0,2,2,2,1,2))])
problem_2_1_4 = Problem("problem_2_1_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(0,1,1,2,1,2))])
problem_2_1_5 = Problem("problem_2_1_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,2,1,1,2))])
problem_2_1_6 = Problem("problem_2_1_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,2,1,2,2,2))])
problem_2_1_7 = Problem("problem_2_1_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(0,2,1,2,1,2))])
problem_2_1_8 = Problem("problem_2_1_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,1,2)), RobotState(0,2,1,1,2,2))])
problem_2_1_9 = Problem("problem_2_1_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(1,2,2,2,2,2))])
problem_2_2_0 = Problem("problem_2_2_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,1,2)), RobotState(0,2,1,2,2,2))])
problem_2_2_1 = Problem("problem_2_2_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,1,2)), RobotState(0,2,2,1,1,2))])
problem_2_2_10 = Problem("problem_2_2_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(0,2,2,1,1,2))])
problem_2_2_2 = Problem("problem_2_2_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,1,2,1,2)), RobotState(0,2,2,1,2,2))])
problem_2_2_3 = Problem("problem_2_2_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,2,2)), RobotState(0,2,1,2,2,2))])
problem_2_2_4 = Problem("problem_2_2_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(0,2,1,1,2,2))])
problem_2_2_5 = Problem("problem_2_2_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,1,2,1,2,2))])
problem_2_2_6 = Problem("problem_2_2_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,1,1,1,2,2))])
problem_2_2_7 = Problem("problem_2_2_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,2,1,1,2,2))])
problem_2_2_8 = Problem("problem_2_2_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(1,2,2,2,2,2))])
problem_2_2_9 = Problem("problem_2_2_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,2)), RobotState(0,1,2,2,2,2))])
problem_2_3_0 = Problem("problem_2_3_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,1,2)), RobotState(0,2,2,2,2,2))])
problem_2_3_1 = Problem("problem_2_3_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(0,1,2,2,2,2))])
problem_2_3_10 = Problem("problem_2_3_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,1,2)), RobotState(0,2,2,1,2,2))])
problem_2_3_2 = Problem("problem_2_3_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,1,2)), RobotState(0,1,1,2,1,2))])
problem_2_3_3 = Problem("problem_2_3_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,2,2)), RobotState(0,1,1,2,1,2))])
problem_2_3_4 = Problem("problem_2_3_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(0,1,2,2,2,2))])
problem_2_3_5 = Problem("problem_2_3_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(0,2,1,1,1,2))])
problem_2_3_6 = Problem("problem_2_3_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,2,2)), RobotState(0,2,2,1,1,2))])
problem_2_3_7 = Problem("problem_2_3_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,2,2)), RobotState(0,1,1,2,2,2))])
problem_2_3_8 = Problem("problem_2_3_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,2)), RobotState(1,2,2,2,2,2))])
problem_2_3_9 = Problem("problem_2_3_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,1,2)), RobotState(0,2,2,1,2,2))])
problem_2_4_0 = Problem("problem_2_4_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,1,2)), RobotState(1,1,1,1,1,2))])
problem_2_4_1 = Problem("problem_2_4_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,2,2)), RobotState(0,2,2,1,1,2))])
problem_2_4_10 = Problem("problem_2_4_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(0,1,2,1,1,2))])
problem_2_4_2 = Problem("problem_2_4_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(0,2,1,2,2,2))])
problem_2_4_3 = Problem("problem_2_4_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,2)), RobotState(0,2,2,2,2,2))])
problem_2_4_4 = Problem("problem_2_4_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,2)), RobotState(0,2,2,2,1,2))])
problem_2_4_5 = Problem("problem_2_4_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,1,2)), RobotState(0,2,2,1,2,2))])
problem_2_4_6 = Problem("problem_2_4_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(0,1,2,2,1,2))])
problem_2_4_7 = Problem("problem_2_4_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(1,2,2,2,2,2))])
problem_2_4_8 = Problem("problem_2_4_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,1,2)), RobotState(0,1,1,1,2,2))])
problem_2_4_9 = Problem("problem_2_4_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,2,2)), RobotState(0,1,1,2,2,2))])
problem_2_5_0 = Problem("problem_2_5_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,1,2)), RobotState(1,2,1,2,1,2))])
problem_2_5_1 = Problem("problem_2_5_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,2,2,2,2)), RobotState(0,1,2,2,1,2))])
problem_2_5_10 = Problem("problem_2_5_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,2,2)), RobotState(0,2,2,2,1,2))])
problem_2_5_2 = Problem("problem_2_5_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,2,2)), RobotState(0,2,2,2,1,2))])
problem_2_5_3 = Problem("problem_2_5_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,1,2,1,2)), RobotState(0,1,1,2,2,2))])
problem_2_5_4 = Problem("problem_2_5_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(0,1,2,1,1,2))])
problem_2_5_5 = Problem("problem_2_5_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(1,1,1,1,1,2))])
problem_2_5_6 = Problem("problem_2_5_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,1,2)), RobotState(0,2,2,1,1,2))])
problem_2_5_7 = Problem("problem_2_5_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,2)), RobotState(0,2,2,1,1,2))])
problem_2_5_8 = Problem("problem_2_5_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(1,1,1,1,1,2))])
problem_2_5_9 = Problem("problem_2_5_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(1,1,2,1,2,2))])
problem_2_6_0 = Problem("problem_2_6_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,2,2)), RobotState(0,1,1,1,1,2))])
problem_2_6_1 = Problem("problem_2_6_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,2,2,1,2,2))])
problem_2_6_10 = Problem("problem_2_6_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,2,2)), RobotState(0,2,2,2,2,2))])
problem_2_6_2 = Problem("problem_2_6_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,2,2)), RobotState(0,1,1,2,1,2))])
problem_2_6_3 = Problem("problem_2_6_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,2,2,2,2))])
problem_2_6_4 = Problem("problem_2_6_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,2,2)), RobotState(0,2,1,1,1,2))])
problem_2_6_5 = Problem("problem_2_6_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,2,2,2,2)), RobotState(0,2,2,1,2,2))])
problem_2_6_6 = Problem("problem_2_6_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(0,1,1,1,1,2))])
problem_2_6_7 = Problem("problem_2_6_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,2,2,2,2)), RobotState(0,2,1,2,1,2))])
problem_2_6_8 = Problem("problem_2_6_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,1,2,2,2))])
problem_2_6_9 = Problem("problem_2_6_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(0,2,1,1,1,2))])
problem_2_7_0 = Problem("problem_2_7_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,2,2,1,2,2))])
problem_2_7_1 = Problem("problem_2_7_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,2,2,1,2,2))])
problem_2_7_10 = Problem("problem_2_7_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(1,1,2,1,2,2))])
problem_2_7_2 = Problem("problem_2_7_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,2,1,2,2)), RobotState(0,2,1,2,2,2))])
problem_2_7_3 = Problem("problem_2_7_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,1,2)), RobotState(0,2,2,2,2,2))])
problem_2_7_4 = Problem("problem_2_7_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(0,2,2,1,2,2))])
problem_2_7_5 = Problem("problem_2_7_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,1,2)), RobotState(0,1,1,1,2,2))])
problem_2_7_6 = Problem("problem_2_7_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,1,2)), RobotState(0,1,2,1,1,2))])
problem_2_7_7 = Problem("problem_2_7_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,2,2)), RobotState(0,1,1,2,2,2))])
problem_2_7_8 = Problem("problem_2_7_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(0,2,2,1,1,2))])
problem_2_7_9 = Problem("problem_2_7_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(0,2,1,2,2,2))])
problem_2_8_0 = Problem("problem_2_8_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,2,2)), RobotState(0,1,2,2,2,2))])
problem_2_8_1 = Problem("problem_2_8_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(0,2,1,2,2,2))])
problem_2_8_10 = Problem("problem_2_8_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,2,2,1,2))])
problem_2_8_2 = Problem("problem_2_8_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(0,2,1,2,1,2))])
problem_2_8_3 = Problem("problem_2_8_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,2,2)), RobotState(0,1,1,2,2,2))])
problem_2_8_4 = Problem("problem_2_8_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(1,2,1,2,1,2))])
problem_2_8_5 = Problem("problem_2_8_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,1,2)), RobotState(0,1,1,1,2,2))])
problem_2_8_6 = Problem("problem_2_8_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,2)), RobotState(0,1,1,1,1,2))])
problem_2_8_7 = Problem("problem_2_8_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(0,1,2,2,1,2))])
problem_2_8_8 = Problem("problem_2_8_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,2,1,1,2))])
problem_2_8_9 = Problem("problem_2_8_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,2,1,1,1,2))])
problem_2_9_0 = Problem("problem_2_9_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,2,2)), RobotState(0,2,2,2,1,2))])
problem_2_9_1 = Problem("problem_2_9_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,1,1,1,1,2)), RobotState(0,2,2,2,1,2))])
problem_2_9_10 = Problem("problem_2_9_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,1,2)), RobotState(0,1,2,2,1,2))])
problem_2_9_2 = Problem("problem_2_9_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,1,2)), RobotState(1,2,2,2,2,2))])
problem_2_9_3 = Problem("problem_2_9_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,2,2)), RobotState(1,1,1,1,1,2))])
problem_2_9_4 = Problem("problem_2_9_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,2,2)), RobotState(1,1,2,1,2,2))])
problem_2_9_5 = Problem("problem_2_9_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(0,1,2,2,2,2))])
problem_2_9_6 = Problem("problem_2_9_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,1,1,2,2))])
problem_2_9_7 = Problem("problem_2_9_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,1,2)), RobotState(0,1,1,2,1,2))])
problem_2_9_8 = Problem("problem_2_9_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,1,2)), RobotState(0,1,2,1,2,2))])
problem_2_9_9 = Problem("problem_2_9_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,1,1,2)), RobotState(0,1,2,1,2,2))])
problem_4_0_0 = Problem("problem_4_0_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,4,1,4)), RobotState(0,4,2,3,1,4))])
problem_4_0_1 = Problem("problem_4_0_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,3,4,4)), RobotState(0,2,4,4,2,4))])
problem_4_0_10 = Problem("problem_4_0_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,1,2,4)), RobotState(0,2,4,3,1,4))])
problem_4_0_2 = Problem("problem_4_0_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,3,4,4)), RobotState(0,4,3,2,2,4))])
problem_4_0_3 = Problem("problem_4_0_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,1,1,4)), RobotState(0,3,4,4,2,4))])
problem_4_0_4 = Problem("problem_4_0_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,1,1,4)), RobotState(0,2,4,1,1,4))])
problem_4_0_5 = Problem("problem_4_0_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,4,3,4)), RobotState(0,1,1,3,2,4))])
problem_4_0_6 = Problem("problem_4_0_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,4,4,4)), RobotState(0,2,4,1,4,4))])
problem_4_0_7 = Problem("problem_4_0_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,3,3,4)), RobotState(0,2,1,3,2,4))])
problem_4_0_8 = Problem("problem_4_0_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,3,4,4)), RobotState(0,1,4,4,4,4))])
problem_4_0_9 = Problem("problem_4_0_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,1,3,4)), RobotState(0,3,3,1,2,4))])
problem_4_1_0 = Problem("problem_4_1_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,2,4,4)), RobotState(0,1,4,2,1,4))])
problem_4_1_1 = Problem("problem_4_1_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,1,1,4)), RobotState(0,3,3,1,3,4))])
problem_4_1_10 = Problem("problem_4_1_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,1,4,4)), RobotState(0,1,1,2,1,4))])
problem_4_1_2 = Problem("problem_4_1_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,3,4,4)), RobotState(0,1,3,2,1,4))])
problem_4_1_3 = Problem("problem_4_1_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,2,3,4)), RobotState(0,2,1,2,4,4))])
problem_4_1_4 = Problem("problem_4_1_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,2,2,4)), RobotState(0,3,3,4,4,4))])
problem_4_1_5 = Problem("problem_4_1_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,3,4,4)), RobotState(0,2,1,1,1,4))])
problem_4_1_6 = Problem("problem_4_1_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,1,4)), RobotState(0,3,2,1,3,4))])
problem_4_1_7 = Problem("problem_4_1_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,4,3,4)), RobotState(0,1,3,3,4,4))])
problem_4_1_8 = Problem("problem_4_1_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,2,3,4)), RobotState(0,3,3,2,4,4))])
problem_4_1_9 = Problem("problem_4_1_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,2,4,4)), RobotState(0,4,1,2,3,4))])
problem_4_2_0 = Problem("problem_4_2_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,4,1,4)), RobotState(0,4,1,4,4,4))])
problem_4_2_1 = Problem("problem_4_2_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,2,4,4)), RobotState(0,3,4,2,2,4))])
problem_4_2_10 = Problem("problem_4_2_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,2,3,4)), RobotState(1,4,1,4,1,4))])
problem_4_2_2 = Problem("problem_4_2_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,3,1,4)), RobotState(0,1,3,4,4,4))])
problem_4_2_3 = Problem("problem_4_2_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,2,3,4)), RobotState(0,3,1,3,4,4))])
problem_4_2_4 = Problem("problem_4_2_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,4,1,4)), RobotState(0,1,2,3,2,4))])
problem_4_2_5 = Problem("problem_4_2_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,4,4,4)), RobotState(0,4,1,3,1,4))])
problem_4_2_6 = Problem("problem_4_2_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,4,3,4)), RobotState(0,3,3,1,2,4))])
problem_4_2_7 = Problem("problem_4_2_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,4,4,4)), RobotState(0,1,2,2,2,4))])
problem_4_2_8 = Problem("problem_4_2_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,3,2,4)), RobotState(0,1,2,2,1,4))])
problem_4_2_9 = Problem("problem_4_2_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,2,2,4)), RobotState(0,2,3,4,4,4))])
problem_4_3_0 = Problem("problem_4_3_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,4,1,4)), RobotState(0,1,2,2,2,4))])
problem_4_3_1 = Problem("problem_4_3_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,2,2,4)), RobotState(0,3,1,2,1,4))])
problem_4_3_10 = Problem("problem_4_3_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,3,4,4)), RobotState(0,3,1,4,1,4))])
problem_4_3_2 = Problem("problem_4_3_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,4,2,4)), RobotState(0,2,3,4,3,4))])
problem_4_3_3 = Problem("problem_4_3_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,3,3,4)), RobotState(0,2,1,4,3,4))])
problem_4_3_4 = Problem("problem_4_3_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,4,4,4)), RobotState(0,3,2,2,3,4))])
problem_4_3_5 = Problem("problem_4_3_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,3,1,4)), RobotState(0,4,4,4,4,4))])
problem_4_3_6 = Problem("problem_4_3_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,1,2,4)), RobotState(0,1,3,1,1,4))])
problem_4_3_7 = Problem("problem_4_3_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,1,4,4)), RobotState(0,4,2,3,1,4))])
problem_4_3_8 = Problem("problem_4_3_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,2,4,4)), RobotState(0,3,2,3,1,4))])
problem_4_3_9 = Problem("problem_4_3_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,2,3,4)), RobotState(0,1,4,3,1,4))])
problem_4_4_0 = Problem("problem_4_4_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,2,4,4)), RobotState(0,3,2,3,2,4))])
problem_4_4_1 = Problem("problem_4_4_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,3,2,4)), RobotState(0,1,2,4,3,4))])
problem_4_4_10 = Problem("problem_4_4_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,1,3,4)), RobotState(0,2,2,2,1,4))])
problem_4_4_2 = Problem("problem_4_4_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,2,2,4)), RobotState(0,1,1,2,2,4))])
problem_4_4_3 = Problem("problem_4_4_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,2,3,4)), RobotState(0,3,4,4,1,4))])
problem_4_4_4 = Problem("problem_4_4_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,3,4,4)), RobotState(0,2,3,4,4,4))])
problem_4_4_5 = Problem("problem_4_4_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,3,3,4)), RobotState(0,1,2,2,1,4))])
problem_4_4_6 = Problem("problem_4_4_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,2,1,4)), RobotState(0,1,1,3,3,4))])
problem_4_4_7 = Problem("problem_4_4_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,3,1,4)), RobotState(0,3,2,2,4,4))])
problem_4_4_8 = Problem("problem_4_4_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,3,2,3,4)), RobotState(0,3,1,3,2,4))])
problem_4_4_9 = Problem("problem_4_4_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,1,1,4)), RobotState(0,3,4,3,1,4))])
problem_4_5_0 = Problem("problem_4_5_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,2,2,4)), RobotState(0,2,2,3,1,4))])
problem_4_5_1 = Problem("problem_4_5_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,3,4,4)), RobotState(0,2,1,3,4,4))])
problem_4_5_10 = Problem("problem_4_5_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,1,2,4)), RobotState(1,2,4,2,4,4))])
problem_4_5_2 = Problem("problem_4_5_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,4,2,4)), RobotState(0,1,2,4,2,4))])
problem_4_5_3 = Problem("problem_4_5_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,1,2,4)), RobotState(0,4,3,3,1,4))])
problem_4_5_4 = Problem("problem_4_5_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,3,1,4)), RobotState(0,4,2,2,2,4))])
problem_4_5_5 = Problem("problem_4_5_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,4,4,4)), RobotState(0,4,4,1,2,4))])
problem_4_5_6 = Problem("problem_4_5_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,1,3,4)), RobotState(0,1,4,2,3,4))])
problem_4_5_7 = Problem("problem_4_5_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,4,1,4)), RobotState(0,1,4,1,1,4))])
problem_4_5_8 = Problem("problem_4_5_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,1,1,4)), RobotState(0,3,4,4,1,4))])
problem_4_5_9 = Problem("problem_4_5_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,1,3,4)), RobotState(0,3,1,4,4,4))])
problem_4_6_0 = Problem("problem_4_6_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,3,2,4)), RobotState(0,2,3,3,4,4))])
problem_4_6_1 = Problem("problem_4_6_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,2,2,4)), RobotState(0,3,1,2,2,4))])
problem_4_6_10 = Problem("problem_4_6_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,3,4)), RobotState(0,3,2,3,4,4))])
problem_4_6_2 = Problem("problem_4_6_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,4,4,4,4,4)), RobotState(0,3,3,4,1,4))])
problem_4_6_3 = Problem("problem_4_6_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,4,2,4)), RobotState(0,3,3,4,2,4))])
problem_4_6_4 = Problem("problem_4_6_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,3,3,4)), RobotState(1,3,1,3,1,4))])
problem_4_6_5 = Problem("problem_4_6_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,4,1,4)), RobotState(0,2,2,1,3,4))])
problem_4_6_6 = Problem("problem_4_6_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,3,3,4)), RobotState(0,4,1,1,4,4))])
problem_4_6_7 = Problem("problem_4_6_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,2,4,4)), RobotState(0,1,1,1,4,4))])
problem_4_6_8 = Problem("problem_4_6_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,1,1,4)), RobotState(0,2,4,4,3,4))])
problem_4_6_9 = Problem("problem_4_6_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,2,4,4)), RobotState(0,4,3,4,4,4))])
problem_4_7_0 = Problem("problem_4_7_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,3,2,4)), RobotState(0,3,1,3,2,4))])
problem_4_7_1 = Problem("problem_4_7_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,1,3,4)), RobotState(0,3,4,4,1,4))])
problem_4_7_10 = Problem("problem_4_7_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,1,2,4)), RobotState(1,1,3,1,3,4))])
problem_4_7_2 = Problem("problem_4_7_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,3,3,4)), RobotState(0,4,1,1,4,4))])
problem_4_7_3 = Problem("problem_4_7_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,4,3,4)), RobotState(0,2,3,4,2,4))])
problem_4_7_4 = Problem("problem_4_7_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,3,3,4)), RobotState(0,4,2,1,2,4))])
problem_4_7_5 = Problem("problem_4_7_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,1,2,4)), RobotState(0,2,2,4,4,4))])
problem_4_7_6 = Problem("problem_4_7_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,3,4,4)), RobotState(1,3,4,3,4,4))])
problem_4_7_7 = Problem("problem_4_7_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,1,4,4)), RobotState(1,2,4,2,4,4))])
problem_4_7_8 = Problem("problem_4_7_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,4,4,4)), RobotState(0,1,4,4,1,4))])
problem_4_7_9 = Problem("problem_4_7_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,4,2,4)), RobotState(0,2,1,3,3,4))])
problem_4_8_0 = Problem("problem_4_8_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,2,3,4)), RobotState(0,2,4,4,4,4))])
problem_4_8_1 = Problem("problem_4_8_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,2,2,2,4)), RobotState(0,4,4,4,3,4))])
problem_4_8_10 = Problem("problem_4_8_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,4,3,4)), RobotState(0,3,3,4,2,4))])
problem_4_8_2 = Problem("problem_4_8_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,4,1,4)), RobotState(0,2,4,1,1,4))])
problem_4_8_3 = Problem("problem_4_8_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,2,4,4)), RobotState(0,1,2,3,4,4))])
problem_4_8_4 = Problem("problem_4_8_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,2,2,4)), RobotState(0,4,2,2,3,4))])
problem_4_8_5 = Problem("problem_4_8_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,4,2,4)), RobotState(0,1,2,4,1,4))])
problem_4_8_6 = Problem("problem_4_8_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,4,1,4)), RobotState(0,3,1,4,3,4))])
problem_4_8_7 = Problem("problem_4_8_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,1,3,4)), RobotState(0,1,1,4,3,4))])
problem_4_8_8 = Problem("problem_4_8_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,3,2,4)), RobotState(0,3,1,3,4,4))])
problem_4_8_9 = Problem("problem_4_8_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,1,4,4)), RobotState(0,2,3,3,3,4))])
problem_4_9_0 = Problem("problem_4_9_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,1,4,4)), RobotState(0,2,2,2,3,4))])
problem_4_9_1 = Problem("problem_4_9_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,3,3,4)), RobotState(0,3,2,3,3,4))])
problem_4_9_10 = Problem("problem_4_9_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,3,3,4)), RobotState(0,4,4,1,4,4))])
problem_4_9_2 = Problem("problem_4_9_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,2,3,4)), RobotState(0,3,1,4,1,4))])
problem_4_9_3 = Problem("problem_4_9_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,3,3,4)), RobotState(0,3,2,4,2,4))])
problem_4_9_4 = Problem("problem_4_9_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,3,3,4)), RobotState(0,3,4,2,1,4))])
problem_4_9_5 = Problem("problem_4_9_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,1,1,4)), RobotState(0,2,1,2,3,4))])
problem_4_9_6 = Problem("problem_4_9_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,3,2,4)), RobotState(0,2,2,2,2,4))])
problem_4_9_7 = Problem("problem_4_9_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,1,4,4)), RobotState(0,1,4,4,3,4))])
problem_4_9_8 = Problem("problem_4_9_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,1,2,4)), RobotState(0,1,1,3,2,4))])
problem_4_9_9 = Problem("problem_4_9_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,3,1,4)), RobotState(0,4,3,2,3,4))])
problem_6_0_0 = Problem("problem_6_0_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,2,6,6,6)), RobotState(0,2,3,3,6,6))])
problem_6_0_1 = Problem("problem_6_0_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,2,4,6)), RobotState(0,6,2,6,5,6))])
problem_6_0_10 = Problem("problem_6_0_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,6,1,1,6)), RobotState(0,1,2,2,3,6))])
problem_6_0_2 = Problem("problem_6_0_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,4,2,6)), RobotState(0,1,5,4,6,6))])
problem_6_0_3 = Problem("problem_6_0_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,6,4,4,6)), RobotState(0,4,4,3,2,6))])
problem_6_0_4 = Problem("problem_6_0_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,3,6,6)), RobotState(0,6,6,2,4,6))])
problem_6_0_5 = Problem("problem_6_0_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,5,6,6)), RobotState(0,2,3,6,5,6))])
problem_6_0_6 = Problem("problem_6_0_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,5,2,6)), RobotState(0,6,6,3,1,6))])
problem_6_0_7 = Problem("problem_6_0_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,5,2,6)), RobotState(0,4,1,1,4,6))])
problem_6_0_8 = Problem("problem_6_0_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,2,1,6)), RobotState(0,4,3,2,5,6))])
problem_6_0_9 = Problem("problem_6_0_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,3,1,3,6)), RobotState(0,5,4,1,3,6))])
problem_6_1_0 = Problem("problem_6_1_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,5,3,6)), RobotState(0,3,4,1,4,6))])
problem_6_1_1 = Problem("problem_6_1_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,3,3,6)), RobotState(0,4,3,2,1,6))])
problem_6_1_10 = Problem("problem_6_1_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,1,5,6)), RobotState(0,4,5,2,1,6))])
problem_6_1_2 = Problem("problem_6_1_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,4,1,6)), RobotState(0,2,6,3,2,6))])
problem_6_1_3 = Problem("problem_6_1_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,1,5,6)), RobotState(0,6,3,1,3,6))])
problem_6_1_4 = Problem("problem_6_1_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,1,4,6)), RobotState(0,1,4,1,1,6))])
problem_6_1_5 = Problem("problem_6_1_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,5,4,6,6)), RobotState(0,6,6,3,4,6))])
problem_6_1_6 = Problem("problem_6_1_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,4,2,6)), RobotState(0,5,3,4,6,6))])
problem_6_1_7 = Problem("problem_6_1_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,4,5,6)), RobotState(0,3,6,6,2,6))])
problem_6_1_8 = Problem("problem_6_1_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,3,5,2,6)), RobotState(0,6,2,6,2,6))])
problem_6_1_9 = Problem("problem_6_1_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,6,3,6)), RobotState(0,6,6,3,5,6))])
problem_6_2_0 = Problem("problem_6_2_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,6,2,6)), RobotState(0,3,6,4,6,6))])
problem_6_2_1 = Problem("problem_6_2_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,5,4,6)), RobotState(0,2,2,1,3,6))])
problem_6_2_10 = Problem("problem_6_2_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,3,4,6)), RobotState(0,2,1,3,3,6))])
problem_6_2_2 = Problem("problem_6_2_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,1,2,6)), RobotState(0,5,4,1,5,6))])
problem_6_2_3 = Problem("problem_6_2_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,6,2,6)), RobotState(0,3,5,1,1,6))])
problem_6_2_4 = Problem("problem_6_2_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,3,2,6)), RobotState(0,4,3,2,1,6))])
problem_6_2_5 = Problem("problem_6_2_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,6,3,6)), RobotState(0,1,6,3,4,6))])
problem_6_2_6 = Problem("problem_6_2_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,6,6,4,6)), RobotState(0,6,5,4,6,6))])
problem_6_2_7 = Problem("problem_6_2_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,6,2,6)), RobotState(0,2,4,6,5,6))])
problem_6_2_8 = Problem("problem_6_2_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,4,4,6)), RobotState(0,6,2,5,2,6))])
problem_6_2_9 = Problem("problem_6_2_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,5,3,2,6)), RobotState(0,2,2,5,5,6))])
problem_6_3_0 = Problem("problem_6_3_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,3,5,6)), RobotState(0,2,6,5,1,6))])
problem_6_3_1 = Problem("problem_6_3_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,1,1,6)), RobotState(0,6,2,4,5,6))])
problem_6_3_10 = Problem("problem_6_3_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,1,1,6)), RobotState(0,4,2,6,4,6))])
problem_6_3_2 = Problem("problem_6_3_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,3,6,6)), RobotState(1,6,4,6,4,6))])
problem_6_3_3 = Problem("problem_6_3_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,3,3,2,6)), RobotState(0,6,4,4,6,6))])
problem_6_3_4 = Problem("problem_6_3_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,5,3,3,6)), RobotState(0,1,3,4,5,6))])
problem_6_3_5 = Problem("problem_6_3_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,1,6,6)), RobotState(0,5,6,6,5,6))])
problem_6_3_6 = Problem("problem_6_3_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,3,1,6)), RobotState(0,3,5,2,6,6))])
problem_6_3_7 = Problem("problem_6_3_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,1,6,2,6)), RobotState(0,4,5,2,1,6))])
problem_6_3_8 = Problem("problem_6_3_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,1,1,6)), RobotState(0,3,4,5,5,6))])
problem_6_3_9 = Problem("problem_6_3_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,5,1,6)), RobotState(0,4,3,4,2,6))])
problem_6_4_0 = Problem("problem_6_4_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,1,4,6)), RobotState(0,5,4,4,6,6))])
problem_6_4_1 = Problem("problem_6_4_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,4,4,1,6)), RobotState(0,4,3,5,3,6))])
problem_6_4_10 = Problem("problem_6_4_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,3,3,6,6)), RobotState(0,2,2,4,2,6))])
problem_6_4_2 = Problem("problem_6_4_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,2,5,6)), RobotState(0,3,6,4,4,6))])
problem_6_4_3 = Problem("problem_6_4_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,5,2,6)), RobotState(0,5,5,6,4,6))])
problem_6_4_4 = Problem("problem_6_4_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,2,3,2,6)), RobotState(0,1,3,4,6,6))])
problem_6_4_5 = Problem("problem_6_4_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,6,3,6,6)), RobotState(0,5,1,3,5,6))])
problem_6_4_6 = Problem("problem_6_4_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,3,6,6)), RobotState(0,4,4,1,4,6))])
problem_6_4_7 = Problem("problem_6_4_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,6,2,4,6)), RobotState(0,6,5,5,4,6))])
problem_6_4_8 = Problem("problem_6_4_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,4,2,6)), RobotState(0,2,6,2,4,6))])
problem_6_4_9 = Problem("problem_6_4_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,5,2,6)), RobotState(0,5,6,6,3,6))])
problem_6_5_0 = Problem("problem_6_5_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,6,2,6)), RobotState(1,2,4,2,4,6))])
problem_6_5_1 = Problem("problem_6_5_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,3,2,6)), RobotState(0,6,6,3,2,6))])
problem_6_5_10 = Problem("problem_6_5_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,6,2,3,6)), RobotState(0,4,3,6,5,6))])
problem_6_5_2 = Problem("problem_6_5_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,2,5,2,5,6)), RobotState(0,2,4,1,3,6))])
problem_6_5_3 = Problem("problem_6_5_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,5,5,6)), RobotState(0,2,1,6,1,6))])
problem_6_5_4 = Problem("problem_6_5_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,5,1,6)), RobotState(0,4,1,6,2,6))])
problem_6_5_5 = Problem("problem_6_5_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,6,3,6)), RobotState(0,3,5,2,2,6))])
problem_6_5_6 = Problem("problem_6_5_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,3,5,6)), RobotState(0,1,4,3,1,6))])
problem_6_5_7 = Problem("problem_6_5_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,3,3,3,6)), RobotState(0,6,1,5,5,6))])
problem_6_5_8 = Problem("problem_6_5_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,3,5,6)), RobotState(0,5,4,3,3,6))])
problem_6_5_9 = Problem("problem_6_5_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,1,5,6)), RobotState(0,5,1,4,5,6))])
problem_6_6_0 = Problem("problem_6_6_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,6,6,3,6)), RobotState(0,5,4,6,6,6))])
problem_6_6_1 = Problem("problem_6_6_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,4,3,6)), RobotState(0,2,5,4,5,6))])
problem_6_6_10 = Problem("problem_6_6_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,4,3,6,6)), RobotState(0,2,6,4,2,6))])
problem_6_6_2 = Problem("problem_6_6_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,1,4,1,6)), RobotState(0,6,5,4,6,6))])
problem_6_6_3 = Problem("problem_6_6_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,5,3,6)), RobotState(0,6,1,2,2,6))])
problem_6_6_4 = Problem("problem_6_6_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,2,2,6)), RobotState(0,1,1,2,4,6))])
problem_6_6_5 = Problem("problem_6_6_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,3,3,6)), RobotState(0,2,6,1,1,6))])
problem_6_6_6 = Problem("problem_6_6_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,3,2,6)), RobotState(0,4,1,5,5,6))])
problem_6_6_7 = Problem("problem_6_6_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,6,2,6)), RobotState(0,1,6,2,6,6))])
problem_6_6_8 = Problem("problem_6_6_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,4,6,6)), RobotState(0,5,5,3,1,6))])
problem_6_6_9 = Problem("problem_6_6_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,4,3,6)), RobotState(0,5,5,1,4,6))])
problem_6_7_0 = Problem("problem_6_7_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,4,3,6)), RobotState(0,2,2,1,3,6))])
problem_6_7_1 = Problem("problem_6_7_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,3,1,6,6)), RobotState(0,3,2,4,4,6))])
problem_6_7_10 = Problem("problem_6_7_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,1,6,6)), RobotState(0,5,4,4,2,6))])
problem_6_7_2 = Problem("problem_6_7_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,4,1,6)), RobotState(0,6,3,3,4,6))])
problem_6_7_3 = Problem("problem_6_7_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,1,3,2,6)), RobotState(0,4,4,6,3,6))])
problem_6_7_4 = Problem("problem_6_7_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,5,3,3,6)), RobotState(0,1,1,3,1,6))])
problem_6_7_5 = Problem("problem_6_7_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,1,6,6)), RobotState(0,4,2,6,6,6))])
problem_6_7_6 = Problem("problem_6_7_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,6,6,1,6)), RobotState(0,3,5,6,6,6))])
problem_6_7_7 = Problem("problem_6_7_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,4,4,6)), RobotState(0,3,1,6,4,6))])
problem_6_7_8 = Problem("problem_6_7_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,3,3,5,6)), RobotState(0,6,4,2,4,6))])
problem_6_7_9 = Problem("problem_6_7_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,3,2,6)), RobotState(0,3,4,6,5,6))])
problem_6_8_0 = Problem("problem_6_8_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,6,1,6)), RobotState(0,4,6,3,6,6))])
problem_6_8_1 = Problem("problem_6_8_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,1,4,6)), RobotState(0,4,4,1,5,6))])
problem_6_8_10 = Problem("problem_6_8_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,5,6,1,6)), RobotState(0,2,5,6,5,6))])
problem_6_8_2 = Problem("problem_6_8_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,5,4,6)), RobotState(0,2,1,3,3,6))])
problem_6_8_3 = Problem("problem_6_8_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,1,1,6)), RobotState(0,1,3,6,6,6))])
problem_6_8_4 = Problem("problem_6_8_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,5,6,6)), RobotState(0,1,1,4,2,6))])
problem_6_8_5 = Problem("problem_6_8_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,4,3,2,6)), RobotState(0,3,6,2,3,6))])
problem_6_8_6 = Problem("problem_6_8_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,4,6,4,6)), RobotState(0,4,5,1,6,6))])
problem_6_8_7 = Problem("problem_6_8_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,2,6,1,6)), RobotState(0,3,3,2,3,6))])
problem_6_8_8 = Problem("problem_6_8_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,1,2,4,6)), RobotState(0,1,3,6,2,6))])
problem_6_8_9 = Problem("problem_6_8_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,5,2,5,6)), RobotState(0,3,4,6,4,6))])
problem_6_9_0 = Problem("problem_6_9_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,5,5,1,6)), RobotState(0,1,6,3,1,6))])
problem_6_9_1 = Problem("problem_6_9_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,6,1,6)), RobotState(0,2,2,4,2,6))])
problem_6_9_10 = Problem("problem_6_9_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,2,6,3,6)), RobotState(0,2,4,3,6,6))])
problem_6_9_2 = Problem("problem_6_9_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,3,1,6)), RobotState(0,6,1,2,2,6))])
problem_6_9_3 = Problem("problem_6_9_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,2,4,3,6)), RobotState(0,6,6,4,5,6))])
problem_6_9_4 = Problem("problem_6_9_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,5,1,6)), RobotState(0,5,1,1,6,6))])
problem_6_9_5 = Problem("problem_6_9_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,3,2,6)), RobotState(0,6,6,1,2,6))])
problem_6_9_6 = Problem("problem_6_9_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,5,6,2,6)), RobotState(0,5,3,4,5,6))])
problem_6_9_7 = Problem("problem_6_9_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,2,2,6)), RobotState(0,1,1,3,1,6))])
problem_6_9_8 = Problem("problem_6_9_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,5,6,6,6)), RobotState(1,4,1,4,1,6))])
problem_6_9_9 = Problem("problem_6_9_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,1,1,6)), RobotState(0,4,2,4,2,6))])
problem_8_0_0 = Problem("problem_8_0_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,7,4,4,8)), RobotState(0,4,6,2,6,8))])
problem_8_0_1 = Problem("problem_8_0_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,8,2,7,8)), RobotState(0,1,4,7,5,8))])
problem_8_0_10 = Problem("problem_8_0_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,8,5,6,8)), RobotState(0,7,7,3,5,8))])
problem_8_0_2 = Problem("problem_8_0_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,5,4,1,8)), RobotState(0,1,7,4,6,8))])
problem_8_0_3 = Problem("problem_8_0_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,4,2,8)), RobotState(0,4,7,6,6,8))])
problem_8_0_4 = Problem("problem_8_0_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,7,1,5,8)), RobotState(0,5,8,8,8,8))])
problem_8_0_5 = Problem("problem_8_0_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,3,5,6,8)), RobotState(0,8,1,8,1,8))])
problem_8_0_6 = Problem("problem_8_0_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,8,8,2,8)), RobotState(0,2,5,8,5,8))])
problem_8_0_7 = Problem("problem_8_0_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,3,5,8)), RobotState(0,7,7,2,2,8))])
problem_8_0_8 = Problem("problem_8_0_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,3,3,8)), RobotState(0,5,5,7,6,8))])
problem_8_0_9 = Problem("problem_8_0_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,3,7,5,8)), RobotState(0,6,6,5,2,8))])
problem_8_1_0 = Problem("problem_8_1_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,8,7,8,8)), RobotState(0,1,8,3,7,8))])
problem_8_1_1 = Problem("problem_8_1_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,6,1,5,8)), RobotState(0,3,3,5,6,8))])
problem_8_1_10 = Problem("problem_8_1_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,7,2,8)), RobotState(0,2,5,5,3,8))])
problem_8_1_2 = Problem("problem_8_1_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,8,3,7,8)), RobotState(0,1,5,8,8,8))])
problem_8_1_3 = Problem("problem_8_1_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,7,8,4,8)), RobotState(0,4,3,7,3,8))])
problem_8_1_4 = Problem("problem_8_1_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,5,7,8)), RobotState(0,2,1,5,6,8))])
problem_8_1_5 = Problem("problem_8_1_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,4,3,2,8)), RobotState(0,5,2,5,8,8))])
problem_8_1_6 = Problem("problem_8_1_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,6,8,5,8)), RobotState(0,1,7,7,7,8))])
problem_8_1_7 = Problem("problem_8_1_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,8,2,6,8)), RobotState(0,8,5,7,1,8))])
problem_8_1_8 = Problem("problem_8_1_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,5,4,8,8)), RobotState(0,5,4,5,8,8))])
problem_8_1_9 = Problem("problem_8_1_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,8,5,3,8)), RobotState(0,1,1,1,7,8))])
problem_8_2_0 = Problem("problem_8_2_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,3,3,2,8)), RobotState(0,1,1,3,8,8))])
problem_8_2_1 = Problem("problem_8_2_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,6,8,8,8)), RobotState(0,8,6,7,2,8))])
problem_8_2_10 = Problem("problem_8_2_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,8,4,7,8)), RobotState(0,5,7,2,3,8))])
problem_8_2_2 = Problem("problem_8_2_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,4,5,1,8)), RobotState(0,8,1,1,4,8))])
problem_8_2_3 = Problem("problem_8_2_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,1,4,6,8)), RobotState(0,8,7,7,8,8))])
problem_8_2_4 = Problem("problem_8_2_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,8,5,7,8)), RobotState(0,8,5,2,2,8))])
problem_8_2_5 = Problem("problem_8_2_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,7,5,8)), RobotState(0,2,4,4,5,8))])
problem_8_2_6 = Problem("problem_8_2_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,6,2,7,8)), RobotState(0,8,6,5,6,8))])
problem_8_2_7 = Problem("problem_8_2_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,2,7,7,8)), RobotState(0,2,2,5,6,8))])
problem_8_2_8 = Problem("problem_8_2_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,5,8,3,8)), RobotState(0,7,1,2,3,8))])
problem_8_2_9 = Problem("problem_8_2_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,3,1,8)), RobotState(0,2,7,6,2,8))])
problem_8_3_0 = Problem("problem_8_3_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,3,1,4,8)), RobotState(0,7,2,5,8,8))])
problem_8_3_1 = Problem("problem_8_3_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,8,8,4,8)), RobotState(0,8,2,2,8,8))])
problem_8_3_10 = Problem("problem_8_3_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,1,5,8)), RobotState(0,4,4,2,5,8))])
problem_8_3_2 = Problem("problem_8_3_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,3,7,8)), RobotState(0,7,8,8,2,8))])
problem_8_3_3 = Problem("problem_8_3_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,1,2,6,8)), RobotState(0,4,6,1,4,8))])
problem_8_3_4 = Problem("problem_8_3_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,8,5,8)), RobotState(0,2,5,7,6,8))])
problem_8_3_5 = Problem("problem_8_3_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,5,5,8)), RobotState(0,3,8,6,1,8))])
problem_8_3_6 = Problem("problem_8_3_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,3,2,2,8)), RobotState(0,8,4,1,6,8))])
problem_8_3_7 = Problem("problem_8_3_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,7,7,8)), RobotState(0,6,3,7,5,8))])
problem_8_3_8 = Problem("problem_8_3_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,3,7,4,8)), RobotState(0,6,3,5,3,8))])
problem_8_3_9 = Problem("problem_8_3_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,7,1,8)), RobotState(0,2,4,6,5,8))])
problem_8_4_0 = Problem("problem_8_4_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,5,4,4,8)), RobotState(0,4,8,2,4,8))])
problem_8_4_1 = Problem("problem_8_4_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,8,7,4,8)), RobotState(0,3,5,7,5,8))])
problem_8_4_10 = Problem("problem_8_4_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,8,2,6,8)), RobotState(0,1,2,4,5,8))])
problem_8_4_2 = Problem("problem_8_4_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,5,5,1,8)), RobotState(0,7,1,4,3,8))])
problem_8_4_3 = Problem("problem_8_4_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,7,2,2,8)), RobotState(0,2,3,6,7,8))])
problem_8_4_4 = Problem("problem_8_4_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,5,6,7,8)), RobotState(0,2,7,4,5,8))])
problem_8_4_5 = Problem("problem_8_4_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,7,7,4,8)), RobotState(0,5,6,4,6,8))])
problem_8_4_6 = Problem("problem_8_4_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,5,7,8,8)), RobotState(0,5,5,3,2,8))])
problem_8_4_7 = Problem("problem_8_4_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,8,7,8)), RobotState(0,8,3,2,1,8))])
problem_8_4_8 = Problem("problem_8_4_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,8,1,6,8)), RobotState(0,2,8,6,6,8))])
problem_8_4_9 = Problem("problem_8_4_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,7,5,4,8)), RobotState(0,3,2,7,1,8))])
problem_8_5_0 = Problem("problem_8_5_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,8,4,5,8)), RobotState(0,1,3,4,8,8))])
problem_8_5_1 = Problem("problem_8_5_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,2,1,6,8)), RobotState(0,3,7,7,3,8))])
problem_8_5_10 = Problem("problem_8_5_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,5,5,3,8)), RobotState(0,8,2,6,8,8))])
problem_8_5_2 = Problem("problem_8_5_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,4,7,1,8)), RobotState(0,5,6,4,5,8))])
problem_8_5_3 = Problem("problem_8_5_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,7,1,6,8)), RobotState(0,7,1,7,1,8))])
problem_8_5_4 = Problem("problem_8_5_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,6,6,6,8)), RobotState(0,4,8,4,8,8))])
problem_8_5_5 = Problem("problem_8_5_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,6,7,8,8)), RobotState(1,6,5,6,5,8))])
problem_8_5_6 = Problem("problem_8_5_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,8,2,2,8)), RobotState(0,7,4,1,2,8))])
problem_8_5_7 = Problem("problem_8_5_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,6,3,8)), RobotState(0,8,6,3,8,8))])
problem_8_5_8 = Problem("problem_8_5_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,5,8,3,8)), RobotState(0,1,8,3,2,8))])
problem_8_5_9 = Problem("problem_8_5_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,5,2,6,8)), RobotState(0,8,8,1,5,8))])
problem_8_6_0 = Problem("problem_8_6_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,6,8,7,8)), RobotState(0,5,6,2,5,8))])
problem_8_6_1 = Problem("problem_8_6_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,8,6,5,8)), RobotState(0,2,1,2,6,8))])
problem_8_6_10 = Problem("problem_8_6_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,7,8,5,8)), RobotState(0,4,7,7,1,8))])
problem_8_6_2 = Problem("problem_8_6_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,6,2,8)), RobotState(0,7,1,1,2,8))])
problem_8_6_3 = Problem("problem_8_6_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,4,4,8)), RobotState(0,5,4,7,1,8))])
problem_8_6_4 = Problem("problem_8_6_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,8,7,8,8)), RobotState(0,2,5,4,8,8))])
problem_8_6_5 = Problem("problem_8_6_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,6,5,4,8)), RobotState(0,5,1,8,8,8))])
problem_8_6_6 = Problem("problem_8_6_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,6,1,8)), RobotState(0,7,8,8,2,8))])
problem_8_6_7 = Problem("problem_8_6_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,2,5,8,8)), RobotState(0,5,2,1,5,8))])
problem_8_6_8 = Problem("problem_8_6_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,2,6,8,8)), RobotState(0,4,3,6,1,8))])
problem_8_6_9 = Problem("problem_8_6_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,4,1,5,8)), RobotState(0,5,6,6,2,8))])
problem_8_7_0 = Problem("problem_8_7_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,1,3,2,8)), RobotState(0,5,3,6,2,8))])
problem_8_7_1 = Problem("problem_8_7_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,4,1,7,8)), RobotState(0,8,1,4,1,8))])
problem_8_7_10 = Problem("problem_8_7_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,8,2,4,8)), RobotState(0,7,1,7,6,8))])
problem_8_7_2 = Problem("problem_8_7_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,7,2,1,8)), RobotState(0,8,5,3,6,8))])
problem_8_7_3 = Problem("problem_8_7_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,6,8,4,8)), RobotState(0,4,8,6,2,8))])
problem_8_7_4 = Problem("problem_8_7_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,1,5,7,8)), RobotState(0,4,7,1,8,8))])
problem_8_7_5 = Problem("problem_8_7_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,5,7,8)), RobotState(0,5,4,4,4,8))])
problem_8_7_6 = Problem("problem_8_7_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,3,1,1,8)), RobotState(0,5,6,1,5,8))])
problem_8_7_7 = Problem("problem_8_7_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,3,5,1,8)), RobotState(0,5,5,5,3,8))])
problem_8_7_8 = Problem("problem_8_7_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,2,8,8,4,8)), RobotState(0,8,2,1,1,8))])
problem_8_7_9 = Problem("problem_8_7_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,6,5,1,4,8)), RobotState(0,4,6,5,1,8))])
problem_8_8_0 = Problem("problem_8_8_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,2,3,1,8)), RobotState(0,3,4,3,8,8))])
problem_8_8_1 = Problem("problem_8_8_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,8,5,6,8)), RobotState(0,1,7,2,6,8))])
problem_8_8_10 = Problem("problem_8_8_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,4,3,4,8)), RobotState(0,8,3,2,1,8))])
problem_8_8_2 = Problem("problem_8_8_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,6,8,8)), RobotState(0,3,5,5,3,8))])
problem_8_8_3 = Problem("problem_8_8_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,5,2,1,8)), RobotState(0,1,1,7,2,8))])
problem_8_8_4 = Problem("problem_8_8_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,4,4,6,8)), RobotState(0,6,3,3,1,8))])
problem_8_8_5 = Problem("problem_8_8_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,3,7,5,8)), RobotState(0,6,4,2,5,8))])
problem_8_8_6 = Problem("problem_8_8_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,1,2,8,8)), RobotState(0,6,5,6,8,8))])
problem_8_8_7 = Problem("problem_8_8_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,2,1,1,8)), RobotState(0,5,8,6,6,8))])
problem_8_8_8 = Problem("problem_8_8_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,7,8,5,8)), RobotState(0,2,1,7,2,8))])
problem_8_8_9 = Problem("problem_8_8_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,6,5,2,8)), RobotState(0,3,3,1,6,8))])
problem_8_9_0 = Problem("problem_8_9_0", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,6,8,6,8)), RobotState(0,3,8,6,2,8))])
problem_8_9_1 = Problem("problem_8_9_1", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,1,1,1,7,8)), RobotState(0,2,8,2,8,8))])
problem_8_9_10 = Problem("problem_8_9_10", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,7,3,2,8)), RobotState(0,3,5,8,8,8))])
problem_8_9_2 = Problem("problem_8_9_2", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,4,4,2,8)), RobotState(0,3,4,6,6,8))])
problem_8_9_3 = Problem("problem_8_9_3", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,3,1,5,4,8)), RobotState(0,3,5,8,6,8))])
problem_8_9_4 = Problem("problem_8_9_4", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,2,5,3,8)), RobotState(0,2,2,3,3,8))])
problem_8_9_5 = Problem("problem_8_9_5", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(1,4,2,4,2,8)), RobotState(0,1,4,2,6,8))])
problem_8_9_6 = Problem("problem_8_9_6", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,4,8,6,2,8)), RobotState(0,6,3,7,3,8))])
problem_8_9_7 = Problem("problem_8_9_7", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,8,1,2,8,8)), RobotState(0,6,7,1,5,8))])
problem_8_9_8 = Problem("problem_8_9_8", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,5,8,5,2,8)), RobotState(0,7,7,7,5,8))])
problem_8_9_9 = Problem("problem_8_9_9", [
	IOExample(Dict{Symbol, Any}(:in => RobotState(0,7,4,3,8,8)), RobotState(0,2,5,2,2,8))])
