problem_100 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "369K 16 Oct 17:30 JCR-Menu.ppt"), "16 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "321K 10 Oct 13:12 ECRC-LP-61.ps"), "10 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "313K 15 Oct 15:11 KR_2018_paper_91.pdf"), "15 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "732K 11 Oct 17:59 guide.pdf"), "11 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "582K 18 Oct 12:13 make-01.pdf"), "18 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "71K 16 Oct 17:29 events.ics"), "16 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "433M 10 Oct 13:24 mercury-14.01.1.tar"), "10 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "300K 6 Oct 14:49 Retirement.pdf"), "6 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "1.6M 15 Oct 17:19 summary.pdf"), "15 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "720K 16 Oct 09:49 logic_primer.ppt"), "16 Oct")])
problem_101 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''"), "\\'''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''''"), "\\''''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''"), "\\''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''''"), "\\'''''''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''"), "\\'''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''"), "\\''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''"), "\\'''''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''"), "\\'''''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''''"), "\\''''''''''''''''''''")])
problem_102 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "BA French"), "French"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Modern History"), "Modern History"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Computer Science"), "Computer Science"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Media Studies"), "Media Studies"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Philosophy, Politics and Economics"), "Philosophy, Politics and Economics"), 
	IOExample(Dict{Symbol, Any}(:x => "BA English"), "English"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Geography"), "Geography"), 
	IOExample(Dict{Symbol, Any}(:x => "BA History"), "History"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Mathematics"), "Mathematics"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Anthropology"), "Anthropology")])
problem_103 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "6 J. American Chemical Society 29,272 881,457"), "6"), 
	IOExample(Dict{Symbol, Any}(:x => "7 Physical Review B 48,888 612,377"), "7"), 
	IOExample(Dict{Symbol, Any}(:x => "9 New England Journal of Medicine 3,564 568,698"), "9"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Physical Review Letters 31,112 884,911"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Applied Physics Letters 36,759 549,224"), "10"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Journal of Biological Chemistry 54,695 1,652,432"), "1"), 
	IOExample(Dict{Symbol, Any}(:x => "8 Astrophysical Journal 26,418 581,299"), "8"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Nature 10,549 1,242,392"), "3"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Science 9,369 1,125,022"), "4"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Proc. Natl. Acad. Sci. USA (PNAS) 30,396 1,376,541"), "2")])
problem_104 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "10 Applied Physics Letters 36,759 549,224"), "36,759"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Nature 10,549 1,242,392"), "10,549"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Journal of Biological Chemistry 54,695 1,652,432"), "54,695"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Physical Review Letters 31,112 884,911"), "31,112"), 
	IOExample(Dict{Symbol, Any}(:x => "8 Astrophysical Journal 26,418 581,299"), "26,418"), 
	IOExample(Dict{Symbol, Any}(:x => "9 New England Journal of Medicine 3,564 568,698"), "3,564"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Science 9,369 1,125,022"), "9,369"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Proc. Natl. Acad. Sci. USA (PNAS) 30,396 1,376,541"), "30,396"), 
	IOExample(Dict{Symbol, Any}(:x => "6 J. American Chemical Society 29,272 881,457"), "29,272"), 
	IOExample(Dict{Symbol, Any}(:x => "7 Physical Review B 48,888 612,377"), "48,888")])
problem_105 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5 Physical Review Letters 31,112 884,911"), "Physical Review Letters"), 
	IOExample(Dict{Symbol, Any}(:x => "7 Physical Review B 48,888 612,377"), "Physical Review B"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Proc. Natl. Acad. Sci. USA (PNAS) 30,396 1,376,541"), "Proc. Natl. Acad. Sci. USA (PNAS)"), 
	IOExample(Dict{Symbol, Any}(:x => "8 Astrophysical Journal 26,418 581,299"), "Astrophysical Journal"), 
	IOExample(Dict{Symbol, Any}(:x => "9 New England Journal of Medicine 3,564 568,698"), "New England Journal of Medicine"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Applied Physics Letters 36,759 549,224"), "Applied Physics Letters"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Nature 10,549 1,242,392"), "Nature"), 
	IOExample(Dict{Symbol, Any}(:x => "6 J. American Chemical Society 29,272 881,457"), "J. American Chemical Society"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Science 9,369 1,125,022"), "Science"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Journal of Biological Chemistry 54,695 1,652,432"), "Journal of Biological Chemistry")])
problem_106 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Xinyuan Wang @amberwanguk"), "@amberwanguk"), 
	IOExample(Dict{Symbol, Any}(:x => "Elisabetta Costa @elisax00"), "@elisax00"), 
	IOExample(Dict{Symbol, Any}(:x => "Tom M Mitchell @tommmitchell"), "@tommmitchell"), 
	IOExample(Dict{Symbol, Any}(:x => "Michael Wooldridge @wooldridgemike"), "@wooldridgemike"), 
	IOExample(Dict{Symbol, Any}(:x => "William Cohen @professorwcohen"), "@professorwcohen"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Henry @g7vdj"), "@g7vdj"), 
	IOExample(Dict{Symbol, Any}(:x => "Daniel Miller @DannyAnth"), "@DannyAnth"), 
	IOExample(Dict{Symbol, Any}(:x => "Rishabh Singh @rishabhs"), "@rishabhs"), 
	IOExample(Dict{Symbol, Any}(:x => "Laura Haapio-Kirk @LauraLHK"), "@LauraLHK"), 
	IOExample(Dict{Symbol, Any}(:x => "Shriram Venkatraman @venkatshriram"), "@venkatshriram")])
problem_107 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1.6M 15 Oct 17:19 summary.pdf"), "17:19"), 
	IOExample(Dict{Symbol, Any}(:x => "582K 18 Oct 12:13 make-01.pdf"), "12:13"), 
	IOExample(Dict{Symbol, Any}(:x => "433M 10 Oct 13:24 mercury-14.01.1.tar"), "13:24"), 
	IOExample(Dict{Symbol, Any}(:x => "300K 6 Oct 14:49 Retirement.pdf"), "14:49"), 
	IOExample(Dict{Symbol, Any}(:x => "321K 10 Oct 13:12 ECRC-LP-61.ps"), "13:12"), 
	IOExample(Dict{Symbol, Any}(:x => "313K 15 Oct 15:11 KR_2018_paper_91.pdf"), "15:11"), 
	IOExample(Dict{Symbol, Any}(:x => "71K 16 Oct 17:29 events.ics"), "17:29"), 
	IOExample(Dict{Symbol, Any}(:x => "720K 16 Oct 09:49 logic_primer.ppt"), "09:49"), 
	IOExample(Dict{Symbol, Any}(:x => "369K 16 Oct 17:30 JCR-Menu.ppt"), "17:30"), 
	IOExample(Dict{Symbol, Any}(:x => "732K 11 Oct 17:59 guide.pdf"), "17:59")])
problem_108 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "a,l,i,c,e"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "g,e,r,a,d,l,i,n,e"), "geradline"), 
	IOExample(Dict{Symbol, Any}(:x => "b,o,b"), "bob"), 
	IOExample(Dict{Symbol, Any}(:x => "c,a,r,o,l"), "carol"), 
	IOExample(Dict{Symbol, Any}(:x => "f,r,e,d"), "fred"), 
	IOExample(Dict{Symbol, Any}(:x => "d,a,v,i,d"), "david"), 
	IOExample(Dict{Symbol, Any}(:x => "h,e,n,r,y"), "henry"), 
	IOExample(Dict{Symbol, Any}(:x => "j,e,a,n,n,e"), "jeanne"), 
	IOExample(Dict{Symbol, Any}(:x => "e,d,i,t,h"), "edith"), 
	IOExample(Dict{Symbol, Any}(:x => "i,n,g,e"), "inge")])
problem_109 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Kevin,Jason,Matthew"), "KJM"), 
	IOExample(Dict{Symbol, Any}(:x => "Bob,Ben,Carol"), "BBC"), 
	IOExample(Dict{Symbol, Any}(:x => "Raymond,Frank,Timothy"), "RFT"), 
	IOExample(Dict{Symbol, Any}(:x => "David,James,James"), "DJJ"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald,Steven,George"), "DSG"), 
	IOExample(Dict{Symbol, Any}(:x => "Alice,Bob,Charlie"), "ABC"), 
	IOExample(Dict{Symbol, Any}(:x => "Arthur,Joe,Juan"), "AJJ"), 
	IOExample(Dict{Symbol, Any}(:x => "Jeanne,Laura,Sarah"), "JLS"), 
	IOExample(Dict{Symbol, Any}(:x => "Jose,Larry,Scott"), "JLS"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam,Andy,Sid"), "SAS")])
problem_10 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Jeanne Laura Sarah"), "Jeanne Sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "Alice Bob Charlie"), "Alice Charlie"), 
	IOExample(Dict{Symbol, Any}(:x => "Bob Ben Carol"), "Bob Carol"), 
	IOExample(Dict{Symbol, Any}(:x => "David James James"), "David James"), 
	IOExample(Dict{Symbol, Any}(:x => "Kevin Jason Matthew"), "Kevin Matthew"), 
	IOExample(Dict{Symbol, Any}(:x => "Raymond Frank Timothy"), "Raymond Timothy"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Steven George"), "Donald George"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Andy Sid"), "Sam Sid"), 
	IOExample(Dict{Symbol, Any}(:x => "Arthur Joe Juan"), "Arthur Juan"), 
	IOExample(Dict{Symbol, Any}(:x => "Jose Larry Scott"), "Jose Scott")])
problem_110 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Marin Lorentzen"), "Marin LORENTZEN"), 
	IOExample(Dict{Symbol, Any}(:x => "Verlene Ottley"), "Verlene OTTLEY"), 
	IOExample(Dict{Symbol, Any}(:x => "Annita Nicely"), "Annita NICELY"), 
	IOExample(Dict{Symbol, Any}(:x => "David Beckham"), "David BECKHAM"), 
	IOExample(Dict{Symbol, Any}(:x => "Joanie Faas"), "Joanie FAAS"), 
	IOExample(Dict{Symbol, Any}(:x => "Tim Howard"), "Tim HOWARD"), 
	IOExample(Dict{Symbol, Any}(:x => "Oma Cornelison"), "Oma CORNELISON"), 
	IOExample(Dict{Symbol, Any}(:x => "Micheal Owen"), "Micheal OWEN"), 
	IOExample(Dict{Symbol, Any}(:x => "James Brown"), "James BROWN"), 
	IOExample(Dict{Symbol, Any}(:x => "David Batty"), "David BATTY")])
problem_111 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Micheal Owen"), "OWEN"), 
	IOExample(Dict{Symbol, Any}(:x => "Marin Lorentzen"), "LORENTZEN"), 
	IOExample(Dict{Symbol, Any}(:x => "Annita Nicely"), "NICELY"), 
	IOExample(Dict{Symbol, Any}(:x => "David Beckham"), "BECKHAM"), 
	IOExample(Dict{Symbol, Any}(:x => "David Batty"), "BATTY"), 
	IOExample(Dict{Symbol, Any}(:x => "Verlene Ottley"), "OTTLEY"), 
	IOExample(Dict{Symbol, Any}(:x => "James Brown"), "BROWN"), 
	IOExample(Dict{Symbol, Any}(:x => "Joanie Faas"), "FAAS"), 
	IOExample(Dict{Symbol, Any}(:x => "Tim Howard"), "HOWARD"), 
	IOExample(Dict{Symbol, Any}(:x => "Oma Cornelison"), "CORNELISON")])
problem_112 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "DAVID BECKHAM"), "David Beckham"), 
	IOExample(Dict{Symbol, Any}(:x => "MICHEAL OWEN"), "Micheal Owen"), 
	IOExample(Dict{Symbol, Any}(:x => "MARIN LORENTZEN"), "Marin Lorentzen"), 
	IOExample(Dict{Symbol, Any}(:x => "ANNITA NICELY"), "Annita Nicely"), 
	IOExample(Dict{Symbol, Any}(:x => "OMA CORNELISON"), "Oma Cornelison"), 
	IOExample(Dict{Symbol, Any}(:x => "DAVID BATTY"), "David Batty"), 
	IOExample(Dict{Symbol, Any}(:x => "TIM HOWARD"), "Tim Howard"), 
	IOExample(Dict{Symbol, Any}(:x => "JAMES BROWN"), "James Brown"), 
	IOExample(Dict{Symbol, Any}(:x => "VERLENE OTTLEY"), "Verlene Ottley"), 
	IOExample(Dict{Symbol, Any}(:x => "JOANIE FAAS"), "Joanie Faas")])
problem_113 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ox1 3xw"), "OX13XW"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 3dp"), "OX13DP"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 4bh"), "OX14BH"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 0bn"), "OX10BN"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 3lp"), "OX13LP"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 3bw"), "OX13BW"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 3lz"), "OX13LZ"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 3cp"), "OX13CP"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 4ah"), "OX14AH"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 3bn"), "OX13BN")])
problem_114 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "732K 11 Oct 17:59 guide.pdf"), "guide.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "313K 15 Oct 15:11 KR_2018_paper_91.pdf"), "KR_2018_paper_91.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "1.6M 15 Oct 17:19 summary.pdf"), "summary.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "582K 18 Oct 12:13 make-01.pdf"), "make-01.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "300K 6 Oct 14:49 Retirement.pdf"), "Retirement.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "369K 16 Oct 17:30 JCR-Menu.ppt"), "JCR-Menu.ppt"), 
	IOExample(Dict{Symbol, Any}(:x => "433M 10 Oct 13:24 mercury-14.01.1.tar"), "mercury-14.01.1.tar"), 
	IOExample(Dict{Symbol, Any}(:x => "720K 16 Oct 09:49 logic_primer.ppt"), "logic_primer.ppt"), 
	IOExample(Dict{Symbol, Any}(:x => "321K 10 Oct 13:12 ECRC-LP-61.ps"), "ECRC-LP-61.ps"), 
	IOExample(Dict{Symbol, Any}(:x => "71K 16 Oct 17:29 events.ics"), "events.ics")])
problem_115 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "300K 6 Oct 14:49 Retirement.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "369K 16 Oct 17:30 JCR-Menu.ppt"), "ppt"), 
	IOExample(Dict{Symbol, Any}(:x => "582K 18 Oct 12:13 make-01.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "313K 15 Oct 15:11 KR_2018_paper_91.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "71K 16 Oct 17:29 events.ics"), "ics"), 
	IOExample(Dict{Symbol, Any}(:x => "732K 11 Oct 17:59 guide.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "1.6M 15 Oct 17:19 summary.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "433M 10 Oct 13:24 mercury-14.01.1.tar"), "tar"), 
	IOExample(Dict{Symbol, Any}(:x => "720K 16 Oct 09:49 logic_primer.ppt"), "ppt"), 
	IOExample(Dict{Symbol, Any}(:x => "321K 10 Oct 13:12 ECRC-LP-61.ps"), "ps")])
problem_116 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;10;"), "10"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;0;"), "0"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;11;"), "11"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;4;"), "4"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;13;"), "13"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;14;"), "14"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;12;"), "12"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;2;"), "2"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;3;"), "3"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;20;"), "20")])
problem_117 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "verlene ottley"), "Verlene Ottley"), 
	IOExample(Dict{Symbol, Any}(:x => "marin lorentzen"), "Marin Lorentzen"), 
	IOExample(Dict{Symbol, Any}(:x => "david batty"), "David Batty"), 
	IOExample(Dict{Symbol, Any}(:x => "joanie faas"), "Joanie Faas"), 
	IOExample(Dict{Symbol, Any}(:x => "david beckham"), "David Beckham"), 
	IOExample(Dict{Symbol, Any}(:x => "micheal owen"), "Micheal Owen"), 
	IOExample(Dict{Symbol, Any}(:x => "tim howard"), "Tim Howard"), 
	IOExample(Dict{Symbol, Any}(:x => "james brown"), "James Brown"), 
	IOExample(Dict{Symbol, Any}(:x => "oma cornelison"), "Oma Cornelison"), 
	IOExample(Dict{Symbol, Any}(:x => "annita nicely"), "Annita Nicely")])
problem_118 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Luc De Raedt: Panel: Logic and Learnability. EWSL 1991: 344"), "Panel: Logic and Learnability"), 
	IOExample(Dict{Symbol, Any}(:x => "Ivan Bratko: Machine learning in artificial intelligence. AI in Engineering 8(3): 159-164 (1993)"), "Machine learning in artificial intelligence"), 
	IOExample(Dict{Symbol, Any}(:x => "Michael Bain: Experiments in Non-Monotonic Learning. ML 1991: 380-384"), "Experiments in Non-Monotonic Learning"), 
	IOExample(Dict{Symbol, Any}(:x => "Hendrik Blockeel: Top-Down Induction of First Order Logical Decision Trees. AI Commun. 12(1-2): 119-120 (1999)"), "Top-Down Induction of First Order Logical Decision Trees"), 
	IOExample(Dict{Symbol, Any}(:x => "Katsumi Inoue: Extended Logic Programs with Default Assumptions. ICLP 1991: 490-504"), "Extended Logic Programs with Default Assumptions"), 
	IOExample(Dict{Symbol, Any}(:x => "Andrew Cropper: Learning Efficient Logic Programs. IJCAI 2015: 4359-4360"), "Learning Efficient Logic Programs"), 
	IOExample(Dict{Symbol, Any}(:x => "Ute Schmid: KI und Informatik. KI 26(1): 1-4 (2012)"), "KI und Informatik"), 
	IOExample(Dict{Symbol, Any}(:x => "Stephen Muggleton: Inductive Logic Programming. ALT 1990: 42-62"), "Inductive Logic Programming"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Michie: Heuristic Search. Comput. J. 14(1): 96-102 (1971)"), "Heuristic Search"), 
	IOExample(Dict{Symbol, Any}(:x => "Claude Sammut: Concept Learning by Experiment. IJCAI 1981: 104-105"), "Concept Learning by Experiment")])
problem_119 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Luc De Raedt: Panel: Logic and Learnability. EWSL 1991: 344"), "Panel: Logic and Learnability"), 
	IOExample(Dict{Symbol, Any}(:x => "Andrew Cropper: Learning Efficient Logic Programs. IJCAI 2015: 4359-4360"), "Cropper"), 
	IOExample(Dict{Symbol, Any}(:x => "Hendrik Blockeel: Top-Down Induction of First Order Logical Decision Trees. AI Commun. 12(1-2): 119-120 (1999)"), "Blockeel"), 
	IOExample(Dict{Symbol, Any}(:x => "Claude Sammut: Concept Learning by Experiment. IJCAI 1981: 104-105"), "Sammut"), 
	IOExample(Dict{Symbol, Any}(:x => "Ute Schmid: KI und Informatik. KI 26(1): 1-4 (2012)"), "Schmid"), 
	IOExample(Dict{Symbol, Any}(:x => "Ivan Bratko: Machine learning in artificial intelligence. AI in Engineering 8(3): 159-164 (1993)"), "Bratko"), 
	IOExample(Dict{Symbol, Any}(:x => "Katsumi Inoue: Extended Logic Programs with Default Assumptions. ICLP 1991: 490-504"), "Inoue"), 
	IOExample(Dict{Symbol, Any}(:x => "Stephen Muggleton: Inductive Logic Programming. ALT 1990: 42-62"), "Muggleton"), 
	IOExample(Dict{Symbol, Any}(:x => "Michael Bain: Experiments in Non-Monotonic Learning. ML 1991: 380-384"), "Bain"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Michie: Heuristic Search. Comput. J. 14(1): 96-102 (1971)"), "Michie")])
problem_11 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Arthur Joe Juan"), "AJ Juan"), 
	IOExample(Dict{Symbol, Any}(:x => "Kevin Jason Matthew"), "KJ Matthew"), 
	IOExample(Dict{Symbol, Any}(:x => "Jeanne Laura Sarah"), "JL Sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "Raymond Frank Timothy"), "RF Timothy"), 
	IOExample(Dict{Symbol, Any}(:x => "Jose Larry Scott"), "JL Scott"), 
	IOExample(Dict{Symbol, Any}(:x => "Bob Ben Carol"), "BB Carol"), 
	IOExample(Dict{Symbol, Any}(:x => "Alice Bob Charlie"), "AB Charlie"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Steven George"), "DS George"), 
	IOExample(Dict{Symbol, Any}(:x => "David James James"), "DJ James"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Andy Sid"), "SA Sid")])
problem_120 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Cat's Cradle (1963)"), "1963"), 
	IOExample(Dict{Symbol, Any}(:x => "Jailbird (1979)"), "1979"), 
	IOExample(Dict{Symbol, Any}(:x => "Galapagos (1985)"), "1985"), 
	IOExample(Dict{Symbol, Any}(:x => "The Sirens of Titan (1959)"), "1959"), 
	IOExample(Dict{Symbol, Any}(:x => "Slaughterhouse-Five (1969)"), "1969"), 
	IOExample(Dict{Symbol, Any}(:x => "Deadeye Dick (1982)"), "1982"), 
	IOExample(Dict{Symbol, Any}(:x => "Mother Night (1961)"), "1961"), 
	IOExample(Dict{Symbol, Any}(:x => "Breakfast of Champions (1973)"), "1973"), 
	IOExample(Dict{Symbol, Any}(:x => "Player Piano (1952)"), "1952"), 
	IOExample(Dict{Symbol, Any}(:x => "Slapstick (1976)"), "1976")])
problem_121 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Cat's Cradle (1963)"), "Cat's Cradle"), 
	IOExample(Dict{Symbol, Any}(:x => "Player Piano (1952)"), "Player Piano"), 
	IOExample(Dict{Symbol, Any}(:x => "Jailbird (1979)"), "Jailbird"), 
	IOExample(Dict{Symbol, Any}(:x => "The Sirens of Titan (1959)"), "The Sirens of Titan"), 
	IOExample(Dict{Symbol, Any}(:x => "Deadeye Dick (1982)"), "Deadeye Dick"), 
	IOExample(Dict{Symbol, Any}(:x => "Mother Night (1961)"), "Mother Night"), 
	IOExample(Dict{Symbol, Any}(:x => "Galapagos (1985)"), "Galapagos"), 
	IOExample(Dict{Symbol, Any}(:x => "Slaughterhouse-Five (1969)"), "Slaughterhouse-Five"), 
	IOExample(Dict{Symbol, Any}(:x => "Breakfast of Champions (1973)"), "Breakfast of Champions"), 
	IOExample(Dict{Symbol, Any}(:x => "Slapstick (1976)"), "Slapstick")])
problem_122 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Xinyuan Wang @amberwanguk"), "Xinyuan Wang"), 
	IOExample(Dict{Symbol, Any}(:x => "Elisabetta Costa @elisax00"), "Elisabetta Costa"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Henry @g7vdj"), "Sam Henry"), 
	IOExample(Dict{Symbol, Any}(:x => "Rishabh Singh @rishabhs"), "Rishabh Singh"), 
	IOExample(Dict{Symbol, Any}(:x => "Tom M Mitchell @tommmitchell"), "Tom M Mitchell"), 
	IOExample(Dict{Symbol, Any}(:x => "Laura Haapio-Kirk @LauraLHK"), "Laura Haapio-Kirk"), 
	IOExample(Dict{Symbol, Any}(:x => "Michael Wooldridge @wooldridgemike"), "Michael Wooldridge"), 
	IOExample(Dict{Symbol, Any}(:x => "William Cohen @professorwcohen"), "William Cohen"), 
	IOExample(Dict{Symbol, Any}(:x => "Daniel Miller @DannyAnth"), "Daniel Miller"), 
	IOExample(Dict{Symbol, Any}(:x => "Shriram Venkatraman @venkatshriram"), "Shriram Venkatraman")])
problem_123 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "cchhrriiss"), "chris"), 
	IOExample(Dict{Symbol, Any}(:x => "cchhaarrlleess"), "charles"), 
	IOExample(Dict{Symbol, Any}(:x => "jjaammeess"), "james"), 
	IOExample(Dict{Symbol, Any}(:x => "aalliiccee"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "eeddiitth"), "edith"), 
	IOExample(Dict{Symbol, Any}(:x => "ppaauull"), "paul"), 
	IOExample(Dict{Symbol, Any}(:x => "nniiggeell"), "nigel"), 
	IOExample(Dict{Symbol, Any}(:x => "ssaarraah"), "sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "llaauurraa"), "laura"), 
	IOExample(Dict{Symbol, Any}(:x => "tthhoommaass"), "thomas")])
problem_124 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3 Jan 1975 8 May 1993"), "1975 1993"), 
	IOExample(Dict{Symbol, Any}(:x => "13 May 1993 19 Dec 1996"), "1993 1996"), 
	IOExample(Dict{Symbol, Any}(:x => "16 Dec 2004 10 Jan 2005"), "2004 2005"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Jul 1999 12 Jul 2001"), "1999 2001"), 
	IOExample(Dict{Symbol, Any}(:x => "11 Jan 1999 16 May 1999"), "1999 1999"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Feb 2004 16 Dec 2004"), "2004 2004"), 
	IOExample(Dict{Symbol, Any}(:x => "12 Jul 2001 7 Feb 2004"), "2001 2004"), 
	IOExample(Dict{Symbol, Any}(:x => "20 Dec 1996 8 May 1997"), "1996 1997"), 
	IOExample(Dict{Symbol, Any}(:x => "8 May 1997 5 Jan 1999"), "1997 1999"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Jan 1999 11 Jan 1999"), "1999 1999")])
problem_125 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "36 Scotland Billy Davies"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "42 England Gary brazil"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "45 Spain Aitor Karanka"), "Spain"), 
	IOExample(Dict{Symbol, Any}(:x => "38 England Stuart Pearce"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "43 England Mark Warburton"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "39 Scotland Dougie Freedman"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "71 England Nigel Clough"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "34 Scotland Alex McLeish"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "35 England Rob Kelly"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "41 France Philippe Montanier"), "France")])
problem_126 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "13 Scotland DF Danny Fox"), "13 Fox"), 
	IOExample(Dict{Symbol, Any}(:x => "11 England MF Ben Osborn"), "11 Osborn"), 
	IOExample(Dict{Symbol, Any}(:x => "4 England DF Michael Mancienne"), "4 Mancienne"), 
	IOExample(Dict{Symbol, Any}(:x => "8 England MF Chris Cohen"), "8 Cohen"), 
	IOExample(Dict{Symbol, Any}(:x => "14 England MF Matty Cash"), "14 Cash"), 
	IOExample(Dict{Symbol, Any}(:x => "7 Scotland MF Liam Bridcutt"), "7 Bridcutt"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Scotland MF Barrie McKay"), "10 McKay"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Algeria MF Adlene Guedioura"), "5 Guedioura"), 
	IOExample(Dict{Symbol, Any}(:x => "17 England FW Ben Brereton"), "17 Brereton"), 
	IOExample(Dict{Symbol, Any}(:x => "19 Wales FW Sam Jones"), "19 Jones")])
problem_127 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1994 Wales David Phillips"), "1994 David Phillips"), 
	IOExample(Dict{Symbol, Any}(:x => "1996 England Stuart Pearce"), "1996 Stuart Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "1986 England Nigel Clough"), "1986 Nigel Clough"), 
	IOExample(Dict{Symbol, Any}(:x => "1987 England Des Walker"), "1987 Des Walker"), 
	IOExample(Dict{Symbol, Any}(:x => "1995 England Steve Stone"), "1995 Steve Stone"), 
	IOExample(Dict{Symbol, Any}(:x => "1993 England Steve Sutton"), "1993 Steve Sutton"), 
	IOExample(Dict{Symbol, Any}(:x => "1992 England Des Walker"), "1992 Des Walker"), 
	IOExample(Dict{Symbol, Any}(:x => "1990 England Des Walker"), "1990 Des Walker"), 
	IOExample(Dict{Symbol, Any}(:x => "1989 England Stuart Pearce"), "1989 Stuart Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "1988 England Nigel Clough"), "1988 Nigel Clough"), 
	IOExample(Dict{Symbol, Any}(:x => "1991 England Stuart Pearce"), "1991 Stuart Pearce")])
problem_128 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "About 1,620,000 results (0.66 seconds)"), "1,620,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 6,240,000 results (0.65 seconds)"), "6,240,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,320,000 results (0.63 seconds)"), "5,320,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 299,000 results (0.57 seconds)"), "299,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,390,000 results (0.70 seconds)"), "1,390,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 520,000 results (0.59 seconds)"), "520,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 31,900,000 results (0.70 seconds)"), "31,900,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,090,000 results (0.90 seconds)"), "5,090,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 8,630,000 results (0.50 seconds)"), "8,630,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 37,400,000 results (0.52 seconds)"), "37,400,000")])
problem_129 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "About 5,090,000 results (0.90 seconds)"), "0.90 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 8,630,000 results (0.50 seconds)"), "0.50 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 37,400,000 results (0.52 seconds)"), "0.52 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 520,000 results (0.59 seconds)"), "0.59 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,390,000 results (0.70 seconds)"), "0.70 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 31,900,000 results (0.70 seconds)"), "0.70 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 299,000 results (0.57 seconds)"), "0.57 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,320,000 results (0.63 seconds)"), "0.63 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,620,000 results (0.66 seconds)"), "0.66 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 6,240,000 results (0.65 seconds)"), "0.65 seconds")])
problem_12 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "lisa.simpson@yahoo.com"), "Lisa Simpson"), 
	IOExample(Dict{Symbol, Any}(:x => "jim.james@fas.harvard.edu"), "Jim James"), 
	IOExample(Dict{Symbol, Any}(:x => "alan.turing@cam.ac.uk"), "Alan Turing"), 
	IOExample(Dict{Symbol, Any}(:x => "matthew.rosman@yahoo.com"), "Matthew Rosman"), 
	IOExample(Dict{Symbol, Any}(:x => "bob.smith@gmail.com"), "Bob Smith"), 
	IOExample(Dict{Symbol, Any}(:x => "brent.harold@hotmail.com"), "Brent Harold"), 
	IOExample(Dict{Symbol, Any}(:x => "alice.cooper@rock.com"), "Alice Cooper"), 
	IOExample(Dict{Symbol, Any}(:x => "jim.smith@gmail.com"), "Jim Smith"), 
	IOExample(Dict{Symbol, Any}(:x => "ruby.clinton@mit.edu"), "Ruby Clinton"), 
	IOExample(Dict{Symbol, Any}(:x => "thom.yorke@radiohead.com"), "Thom Yorke")])
problem_130 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "slapstick (1976)"), "Slapstick"), 
	IOExample(Dict{Symbol, Any}(:x => "slaughterhouse five (1969)"), "Slaughterhouse Five"), 
	IOExample(Dict{Symbol, Any}(:x => "mother night (1961)"), "Mother Night"), 
	IOExample(Dict{Symbol, Any}(:x => "breakfast of champions (1973)"), "Breakfast of Champions"), 
	IOExample(Dict{Symbol, Any}(:x => "the sirens of titan (1959)"), "The Sirens of Titan"), 
	IOExample(Dict{Symbol, Any}(:x => "deadeye dick (1982)"), "Deadeye Dick"), 
	IOExample(Dict{Symbol, Any}(:x => "cats cradle (1963)"), "Cats Cradle"), 
	IOExample(Dict{Symbol, Any}(:x => "galapagos (1985)"), "Galapagos"), 
	IOExample(Dict{Symbol, Any}(:x => "jailbird (1979)"), "Jailbird"), 
	IOExample(Dict{Symbol, Any}(:x => "player piano (1952)"), "Player Piano")])
problem_131 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2. Giraffes Cant Dance, \$2.32"), "Giraffes Cant Dance"), 
	IOExample(Dict{Symbol, Any}(:x => "6. The Pout-Pout Fish, \$3.74"), "The Pout-Pout Fish"), 
	IOExample(Dict{Symbol, Any}(:x => "9. The Sun and Her Flowers, \$6.49"), "The Sun and Her Flowers"), 
	IOExample(Dict{Symbol, Any}(:x => "7. Harry Potter: A Journey Through a History of Magic, \$6.70"), "Harry Potter: A Journey Through a History of Magic"), 
	IOExample(Dict{Symbol, Any}(:x => "3. Diary of a Wimpy Kid, \$7.50"), "Diary of a Wimpy Kid"), 
	IOExample(Dict{Symbol, Any}(:x => "5. Harry Potter and the Prisoner of Azkaban, \$17.99"), "Harry Potter and the Prisoner of Azkaban"), 
	IOExample(Dict{Symbol, Any}(:x => "1. Wonder, \$6.37"), "Wonder"), 
	IOExample(Dict{Symbol, Any}(:x => "4. The Instant Pot, \$6.61"), "The Instant Pot"), 
	IOExample(Dict{Symbol, Any}(:x => "8. Leonardo da Vinci, \$14.88"), "Leonardo da Vinci"), 
	IOExample(Dict{Symbol, Any}(:x => "10. Milk and Vine, \$3.79"), "Milk and Vine")])
problem_132 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "299,000"), "299000"), 
	IOExample(Dict{Symbol, Any}(:x => "1,390,000"), "1390000"), 
	IOExample(Dict{Symbol, Any}(:x => "635,000"), "635000"), 
	IOExample(Dict{Symbol, Any}(:x => "2,950,000"), "2950000"), 
	IOExample(Dict{Symbol, Any}(:x => "775,000"), "775000"), 
	IOExample(Dict{Symbol, Any}(:x => "520,000"), "520000"), 
	IOExample(Dict{Symbol, Any}(:x => "5,090,000"), "5090000"), 
	IOExample(Dict{Symbol, Any}(:x => "31,900,000"), "31900000"), 
	IOExample(Dict{Symbol, Any}(:x => "625,000"), "625000")])
problem_133 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "About 37,400,000 results (0.52 seconds)"), "37400000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,390,000 results (0.70 seconds)"), "1390000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 299,000 results (0.57 seconds)"), "299000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 8,630,000 results (0.50 seconds)"), "8630000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,620,000 results (0.66 seconds)"), "1620000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,320,000 results (0.63 seconds)"), "5320000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 31,900,000 results (0.70 seconds)"), "31900000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,090,000 results (0.90 seconds)"), "5090000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 520,000 results (0.59 seconds)"), "520000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 6,240,000 results (0.65 seconds)"), "6240000")])
problem_134 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "cccchhhhaaaarrrrlllleeeessss"), "charles"), 
	IOExample(Dict{Symbol, Any}(:x => "llllaaaauuuurrrraaaa"), "laura"), 
	IOExample(Dict{Symbol, Any}(:x => "ppppaaaauuuullll"), "paul"), 
	IOExample(Dict{Symbol, Any}(:x => "eeeeddddiiiitttthhhh"), "edith"), 
	IOExample(Dict{Symbol, Any}(:x => "nnnniiiiggggeeeellll"), "nigel"), 
	IOExample(Dict{Symbol, Any}(:x => "ssssaaaarrrraaaahhhh"), "sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "cccchhhhrrrriiiissss"), "chris"), 
	IOExample(Dict{Symbol, Any}(:x => "tttthhhhoooommmmaaaassss"), "thomas"), 
	IOExample(Dict{Symbol, Any}(:x => "aaaalllliiiicccceeee"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "jjjjaaaammmmeeeessss"), "james")])
problem_135 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ppppppppaaaaaaaauuuuuuuullllllll"), "paul"), 
	IOExample(Dict{Symbol, Any}(:x => "cccccccchhhhhhhhrrrrrrrriiiiiiiissssssss"), "chris"), 
	IOExample(Dict{Symbol, Any}(:x => "llllllllaaaaaaaauuuuuuuurrrrrrrraaaaaaaa"), "laura"), 
	IOExample(Dict{Symbol, Any}(:x => "nnnnnnnniiiiiiiiggggggggeeeeeeeellllllll"), "nigel"), 
	IOExample(Dict{Symbol, Any}(:x => "eeeeeeeeddddddddiiiiiiiitttttttthhhhhhhh"), "edith"), 
	IOExample(Dict{Symbol, Any}(:x => "tttttttthhhhhhhhoooooooommmmmmmmaaaaaaaassssssss"), "thomas"), 
	IOExample(Dict{Symbol, Any}(:x => "ssssssssaaaaaaaarrrrrrrraaaaaaaahhhhhhhh"), "sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "aaaaaaaalllllllliiiiiiiicccccccceeeeeeee"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "cccccccchhhhhhhhaaaaaaaarrrrrrrrlllllllleeeeeeeessssssss"), "charles"), 
	IOExample(Dict{Symbol, Any}(:x => "jjjjjjjjaaaaaaaammmmmmmmeeeeeeeessssssss"), "james")])
problem_136 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "metaprob.blg"), "blg"), 
	IOExample(Dict{Symbol, Any}(:x => "sketch.txt"), "txt"), 
	IOExample(Dict{Symbol, Any}(:x => "metaprob.aux"), "aux"), 
	IOExample(Dict{Symbol, Any}(:x => "ijcai15.sty"), "sty"), 
	IOExample(Dict{Symbol, Any}(:x => "metaprob.bbl"), "bbl"), 
	IOExample(Dict{Symbol, Any}(:x => "01-intro.tex"), "tex"), 
	IOExample(Dict{Symbol, Any}(:x => "metaprob.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "metaprob.log"), "log"), 
	IOExample(Dict{Symbol, Any}(:x => "05-e1.tex"), "tex"), 
	IOExample(Dict{Symbol, Any}(:x => "ourbib15.bib"), "bib")])
problem_137 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "--2-X628-2-1--"), "--2-"), 
	IOExample(Dict{Symbol, Any}(:x => "57-1-X-82-5-4---93-0-2"), "57-1-"), 
	IOExample(Dict{Symbol, Any}(:x => "-92-2-----1X9-1--229-080"), "-92-2-----1"), 
	IOExample(Dict{Symbol, Any}(:x => "-553---930--26--8--X1"), "-553---930--26--8--"), 
	IOExample(Dict{Symbol, Any}(:x => "0--3X943030"), "0--3"), 
	IOExample(Dict{Symbol, Any}(:x => "-X27----6--97-1"), "-"), 
	IOExample(Dict{Symbol, Any}(:x => "-59-0X-5-5-0-964043--48"), "-59-0"), 
	IOExample(Dict{Symbol, Any}(:x => "2509-3-2--536-8-X6-266-----"), "2509-3-2--536-8-"), 
	IOExample(Dict{Symbol, Any}(:x => "41-1X54"), "41-1"), 
	IOExample(Dict{Symbol, Any}(:x => "9---X4"), "9---")])
problem_138 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(lists))."), "lists"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(system))."), "system"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(error))."), "error"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(python))."), "python"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(apply))."), "apply"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(random))."), "random"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(metagol))."), "metagol"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(pairs))."), "pairs"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(sockets))."), "sockets"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(timeout))."), "timeout")])
problem_139 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "240 posts 522 followers 522 following"), "240 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "217 posts 3268 followers 18 following"), "217 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "628 posts 201 followers 617 following"), "628 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "368 posts 22600 followers 95 following"), "368 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "4536 posts 12000 followers 338 following"), "4536 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "361 posts 435 followers 709 following"), "361 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "661 posts 426 followers 567 following"), "661 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "144 posts 248 followers 872 following"), "144 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "570 posts 479 followers 1025 following"), "570 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "467 posts 906 followers 288 following"), "467 posts")])
problem_13 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "jim.james@fas.harvard.edu"), "harvard"), 
	IOExample(Dict{Symbol, Any}(:x => "brent.harold@hotmail.com"), "hotmail"), 
	IOExample(Dict{Symbol, Any}(:x => "alan.turing@cam.ac.uk"), "cam"), 
	IOExample(Dict{Symbol, Any}(:x => "jim.smith@gmail.com"), "gmail"), 
	IOExample(Dict{Symbol, Any}(:x => "thom.yorke@radiohead.com"), "radiohead"), 
	IOExample(Dict{Symbol, Any}(:x => "bob.smith@gmail.com"), "gmail"), 
	IOExample(Dict{Symbol, Any}(:x => "lisa.simpson@yahoo.com"), "yahoo"), 
	IOExample(Dict{Symbol, Any}(:x => "ruby.clinton@mit.edu"), "mit"), 
	IOExample(Dict{Symbol, Any}(:x => "matthew.rosman@yahoo.com"), "yahoo"), 
	IOExample(Dict{Symbol, Any}(:x => "alice.cooper@rock.com"), "rock")])
problem_140 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "661 posts 426 followers 567 following"), "426 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "628 posts 201 followers 617 following"), "201 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "570 posts 479 followers 1025 following"), "479 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "240 posts 522 followers 522 following"), "522 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "368 posts 22600 followers 95 following"), "22600 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "361 posts 435 followers 709 following"), "435 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "144 posts 248 followers 872 following"), "248 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "217 posts 3268 followers 18 following"), "3,268 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "4536 posts 12000 followers 338 following"), "12000 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "467 posts 906 followers 288 following"), "906 followers")])
problem_141 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "628 posts 201 followers 617 following"), "617 following"), 
	IOExample(Dict{Symbol, Any}(:x => "661 posts 426 followers 567 following"), "567 following"), 
	IOExample(Dict{Symbol, Any}(:x => "467 posts 906 followers 288 following"), "288 following"), 
	IOExample(Dict{Symbol, Any}(:x => "240 posts 522 followers 522 following"), "522 following"), 
	IOExample(Dict{Symbol, Any}(:x => "144 posts 248 followers 872 following"), "872 following"), 
	IOExample(Dict{Symbol, Any}(:x => "570 posts 479 followers 1025 following"), "1025 following"), 
	IOExample(Dict{Symbol, Any}(:x => "4536 posts 12000 followers 338 following"), "338 following"), 
	IOExample(Dict{Symbol, Any}(:x => "368 posts 22600 followers 95 following"), "95 following"), 
	IOExample(Dict{Symbol, Any}(:x => "217 posts 3268 followers 18 following"), "3268 following"), 
	IOExample(Dict{Symbol, Any}(:x => "361 posts 435 followers 709 following"), "709 following")])
problem_142 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "UB6-Ogf55H394m"), "UB6"), 
	IOExample(Dict{Symbol, Any}(:x => "X062u85Rb2-ba016f4X4bf652wx20"), "X062u85Rb2"), 
	IOExample(Dict{Symbol, Any}(:x => "a24TFafO59s0B-JX"), "a24TFafO59s0B"), 
	IOExample(Dict{Symbol, Any}(:x => "S3kb-82"), "S3kb"), 
	IOExample(Dict{Symbol, Any}(:x => "9U5MsnhH5rM6-5ic6Xi9c4"), "9U5MsnhH5rM6"), 
	IOExample(Dict{Symbol, Any}(:x => "R049M7Ui8o73q4-Wu3dmi"), "R049M7Ui8o73q4"), 
	IOExample(Dict{Symbol, Any}(:x => "51V1v40794Ng8Vd89X-2"), "51V1v40794Ng8Vd89X"), 
	IOExample(Dict{Symbol, Any}(:x => "53c5mS440S-lWd4"), "53c5mS440S"), 
	IOExample(Dict{Symbol, Any}(:x => "442E5T-e83kHj5"), "442E5T"), 
	IOExample(Dict{Symbol, Any}(:x => "2JM141x60n-XnEH048J5W1g"), "2JM141x60n")])
problem_143 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5 Miguel Indurain (ESP)"), "5 Indurain"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Jacques Anquetil (FRA)"), "5 Anquetil"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Chris Froome (GBR)"), "4 Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Greg LeMond (USA)"), "3 LeMond"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Ottavio Bottecchia (ITA)"), "2 Bottecchia"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Philippe Thys (BEL)"), "3 Thys"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Bernard Hinault (FRA)"), "5 Hinault"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Eddy Merckx (BEL)"), "5 Merckx"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Louison Bobet (FRA)"), "3 Bobet"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Alberto Contador (ESP)"), "2 Contador")])
problem_144 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3 Greg LeMond (USA)"), "Greg LeMond"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Chris Froome (GBR)"), "Chris Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Louison Bobet (FRA)"), "Louison Bobet"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Miguel Indurain (ESP)"), "Miguel Indurain"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Philippe Thys (BEL)"), "Philippe Thys"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Jacques Anquetil (FRA)"), "Jacques Anquetil"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Alberto Contador (ESP)"), "Alberto Contador"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Eddy Merckx (BEL)"), "Eddy Merckx"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Ottavio Bottecchia (ITA)"), "Ottavio Bottecchia"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Bernard Hinault (FRA)"), "Bernard Hinault")])
problem_145 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2012 Great Britain Bradley Wiggins"), "2012 Wiggins"), 
	IOExample(Dict{Symbol, Any}(:x => "2013 Great Britain Chris Froome"), "2013 Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "2007 Spain Alberto Contador"), "2007 Contador"), 
	IOExample(Dict{Symbol, Any}(:x => "2009 Spain Alberto Contador"), "2009 Contador"), 
	IOExample(Dict{Symbol, Any}(:x => "2017 Great Britain Chris Froome"), "2017 Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "2011 Australia Cadel Evans"), "2011 Evans"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Spain Carlos Sastre"), "2008 Sastre"), 
	IOExample(Dict{Symbol, Any}(:x => "2015 Great Britain Chris Froome"), "2015 Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "2016 Great Britain Chris Froome"), "2016 Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "2010 Luxembourg Andy Schleck"), "2010 Schleck"), 
	IOExample(Dict{Symbol, Any}(:x => "2014 Italy Vincenzo Nibali"), "2014 Nibali")])
problem_146 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3,540 km (2,200 mi) 86h 20' 55\""), "2,200"), 
	IOExample(Dict{Symbol, Any}(:x => "3,430 km (2,130 mi) 86h 12' 22\""), "2,130"), 
	IOExample(Dict{Symbol, Any}(:x => "3,496 km (2,172 mi) 87h 34' 47\""), "2,172"), 
	IOExample(Dict{Symbol, Any}(:x => "3,404 km (2,115 mi) 83h 56' 20\""), "2,115"), 
	IOExample(Dict{Symbol, Any}(:x => "3,570 km (2,220 mi) 91h 00' 26\""), "2,220"), 
	IOExample(Dict{Symbol, Any}(:x => "3,529 km (2,193 mi) 89h 04' 48\""), "2,193"), 
	IOExample(Dict{Symbol, Any}(:x => "3,459 km (2,149 mi) 85h 48' 35\""), "2,149"), 
	IOExample(Dict{Symbol, Any}(:x => "3,559 km (2,211 mi) 87h 52' 52\""), "2,211"), 
	IOExample(Dict{Symbol, Any}(:x => "3,660 km (2,274 mi) 89h 59' 06\""), "2,274"), 
	IOExample(Dict{Symbol, Any}(:x => "3,360 km (2,088 mi) 84h 46' 14\""), "2,088")])
problem_147 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "London, UK: 8.136 million people"), "London, 8.136"), 
	IOExample(Dict{Symbol, Any}(:x => "Mumbai, India: 27.8 million people"), "Mumbai, 27.8"), 
	IOExample(Dict{Symbol, Any}(:x => "Shanghai, China: 30.8 million people"), "Shanghai, 30.8"), 
	IOExample(Dict{Symbol, Any}(:x => "Dhaka, Bangladesh: 27.4 million people"), "Dhaka, 27.4"), 
	IOExample(Dict{Symbol, Any}(:x => "Karachi, Pakistan: 24.8 million people"), "Karachi, 24.8"), 
	IOExample(Dict{Symbol, Any}(:x => "Cairo, Egypt: 24.5 million people"), "Cairo, 24.5"), 
	IOExample(Dict{Symbol, Any}(:x => "Beijing, China: 27.7 million people"), "Beijing, 27.7"), 
	IOExample(Dict{Symbol, Any}(:x => "New York, USA: 8.26 million people"), "New York, 8.26"), 
	IOExample(Dict{Symbol, Any}(:x => "Delhi, India: 36.1 million people"), "Delhi, 36.1"), 
	IOExample(Dict{Symbol, Any}(:x => "Tokyo, Japan: 37.2 million people"), "Tokyo, 37.2")])
problem_148 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Beijing, China: 27.7 million people"), "China"), 
	IOExample(Dict{Symbol, Any}(:x => "Cairo, Egypt: 24.5 million people"), "Egypt"), 
	IOExample(Dict{Symbol, Any}(:x => "Delhi, India: 36.1 million people"), "India"), 
	IOExample(Dict{Symbol, Any}(:x => "New York, USA: 8.26 million people"), "USA"), 
	IOExample(Dict{Symbol, Any}(:x => "London, UK: 8.136 million people"), "UK"), 
	IOExample(Dict{Symbol, Any}(:x => "Dhaka, Bangladesh: 27.4 million people"), "Bangladesh"), 
	IOExample(Dict{Symbol, Any}(:x => "Karachi, Pakistan: 24.8 million people"), "Pakistan"), 
	IOExample(Dict{Symbol, Any}(:x => "Shanghai, China: 30.8 million people"), "China"), 
	IOExample(Dict{Symbol, Any}(:x => "Mumbai, India: 27.8 million people"), "India"), 
	IOExample(Dict{Symbol, Any}(:x => "Tokyo, Japan: 37.2 million people"), "Japan")])
problem_149 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "29.2 (84.6)"), "84.6"), 
	IOExample(Dict{Symbol, Any}(:x => "25.3 (77.5)"), "77.5"), 
	IOExample(Dict{Symbol, Any}(:x => "32.2 (90)"), "90"), 
	IOExample(Dict{Symbol, Any}(:x => "22.6 (72.7)"), "72.7"), 
	IOExample(Dict{Symbol, Any}(:x => "32.6 (90.7)"), "90.7"), 
	IOExample(Dict{Symbol, Any}(:x => "39.5 (103.1)"), "103.1"), 
	IOExample(Dict{Symbol, Any}(:x => "24.9 (76.8)"), "76.8"), 
	IOExample(Dict{Symbol, Any}(:x => "39.1 (102.4)"), "102.4"), 
	IOExample(Dict{Symbol, Any}(:x => "27.3 (81.1)"), "81.1"), 
	IOExample(Dict{Symbol, Any}(:x => "38.1 (100.6)"), "100.6"), 
	IOExample(Dict{Symbol, Any}(:x => "36.2 (97.2)"), "97.2")])
problem_14 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "CHORE BOY HD SC SPNG 1 PK"), "1 PK"), 
	IOExample(Dict{Symbol, Any}(:x => "Heinz Classic Cream of Tomato Soup 400g"), "400g"), 
	IOExample(Dict{Symbol, Any}(:x => "FRENCH WORCESTERSHIRE 5 Z"), "5 Z"), 
	IOExample(Dict{Symbol, Any}(:x => "Nestle Smarties 4x38g"), "4x38g"), 
	IOExample(Dict{Symbol, Any}(:x => "BTR KRNL WK CORN 15Z"), "15Z"), 
	IOExample(Dict{Symbol, Any}(:x => "BKD BEANS 28 OZ"), "28 OZ"), 
	IOExample(Dict{Symbol, Any}(:x => "CAMP DRY DBL NDL 3.6 OZ"), "3.6 OZ"), 
	IOExample(Dict{Symbol, Any}(:x => "BSH ORIG BEANS 8.3oz"), "8.3oz"), 
	IOExample(Dict{Symbol, Any}(:x => "O F TOMATO PASTE 6 OZ"), "6 OZ"), 
	IOExample(Dict{Symbol, Any}(:x => "Doritos Chilli Heatwave 180g"), "180g")])
problem_150 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "thailand 6,906"), "Thailand 6,906"), 
	IOExample(Dict{Symbol, Any}(:x => "south korea 99,880"), "South Korea 99,880"), 
	IOExample(Dict{Symbol, Any}(:x => "myanmar 4,781"), "Myanmar 4,781"), 
	IOExample(Dict{Symbol, Any}(:x => "india 8,313"), "India 8,313"), 
	IOExample(Dict{Symbol, Any}(:x => "france 4,781"), "France 4,781"), 
	IOExample(Dict{Symbol, Any}(:x => "nepal 8,669"), "Nepal 8,669"), 
	IOExample(Dict{Symbol, Any}(:x => "united kingdom 5,522"), "United Kingdom 5,522"), 
	IOExample(Dict{Symbol, Any}(:x => "united states 15,901"), "United States 15,901"), 
	IOExample(Dict{Symbol, Any}(:x => "philippines 27,929"), "Philippines 27,929"), 
	IOExample(Dict{Symbol, Any}(:x => "china 161,169"), "China 161,169")])
problem_151 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "thomas"), "toa"), 
	IOExample(Dict{Symbol, Any}(:x => "james"), "jms"), 
	IOExample(Dict{Symbol, Any}(:x => "sarah"), "srh"), 
	IOExample(Dict{Symbol, Any}(:x => "alice"), "aie"), 
	IOExample(Dict{Symbol, Any}(:x => "laura"), "lua"), 
	IOExample(Dict{Symbol, Any}(:x => "paul"), "pu"), 
	IOExample(Dict{Symbol, Any}(:x => "charles"), "cals"), 
	IOExample(Dict{Symbol, Any}(:x => "edith"), "eih"), 
	IOExample(Dict{Symbol, Any}(:x => "nigel"), "ngl"), 
	IOExample(Dict{Symbol, Any}(:x => "chris"), "crs")])
problem_152 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/professorwcohen"), "professorwcohen"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/UdiShapiro"), "UdiShapiro"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/TobyWalsh"), "TobyWalsh"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/SumitGulwani"), "SumitGulwani"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/tommmitchell"), "tommmitchell"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/pelotonespresso"), "pelotonespresso"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/RealAAAI"), "RealAAAI"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/PLDI"), "PLDI"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/HertfordCollege"), "HertfordCollege"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/poplconf"), "poplconf")])
problem_153 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/SumitGulwani"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/RealAAAI"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/tommmitchell"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/UdiShapiro"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/PLDI"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/pelotonespresso"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/TobyWalsh"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/HertfordCollege"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/professorwcohen"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/poplconf"), "twitter.com")])
problem_154 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Diners Club,30239396183269"), "Diners Club"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4532035570024922"), "Visa"), 
	IOExample(Dict{Symbol, Any}(:x => "Diners Club,30189831127696"), "Diners Club"), 
	IOExample(Dict{Symbol, Any}(:x => "American Express,346743115587584"), "American Express"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4916944185554908"), "Visa"), 
	IOExample(Dict{Symbol, Any}(:x => "American Express,373976083599365"), "American Express"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4556876501562519"), "Visa"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4532333294347962"), "Visa"), 
	IOExample(Dict{Symbol, Any}(:x => "Diners Club,30353191710174"), "Diners Club"), 
	IOExample(Dict{Symbol, Any}(:x => "American Express,343660986553409"), "American Express")])
problem_155 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "American Express,346743115587584"), "346743115587584"), 
	IOExample(Dict{Symbol, Any}(:x => "American Express,373976083599365"), "373976083599365"), 
	IOExample(Dict{Symbol, Any}(:x => "Diners Club,30353191710174"), "30353191710174"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4916944185554908"), "4916944185554908"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4556876501562519"), "4556876501562519"), 
	IOExample(Dict{Symbol, Any}(:x => "Diners Club,30189831127696"), "30189831127696"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4532333294347962"), "4532333294347962"), 
	IOExample(Dict{Symbol, Any}(:x => "American Express,343660986553409"), "343660986553409"), 
	IOExample(Dict{Symbol, Any}(:x => "Diners Club,30239396183269"), "30239396183269"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4532035570024922"), "4532035570024922")])
problem_156 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5405 1052 2515 1916, 01/20, 340, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5122 1790 8893 7705, 09/21, 284, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1062 9387 1716, 03/20, 429, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4106 1475 1970, 09/22, 397, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5314 5016 8586 8462, 01/21, 850, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3650 8176 1320, 02/23, 549, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1005 1530 5793, 08/23, 915, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4852 1289 3133, 01/22, 431, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1087 3189 9176, 11/21, 694, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1083 2063 8654, 05/22, 648, MasterCard"), "MasterCard")])
problem_157 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5405 1052 2515 1916, 01/20, 340, MasterCard"), "01/20"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1087 3189 9176, 11/21, 694, MasterCard"), "11/21"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4106 1475 1970, 09/22, 397, MasterCard"), "09/22"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1062 9387 1716, 03/20, 429, MasterCard"), "03/20"), 
	IOExample(Dict{Symbol, Any}(:x => "5314 5016 8586 8462, 01/21, 850, MasterCard"), "01/21"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3650 8176 1320, 02/23, 549, MasterCard"), "02/23"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1083 2063 8654, 05/22, 648, MasterCard"), "05/22"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4852 1289 3133, 01/22, 431, MasterCard"), "01/22"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1005 1530 5793, 08/23, 915, MasterCard"), "08/23"), 
	IOExample(Dict{Symbol, Any}(:x => "5122 1790 8893 7705, 09/21, 284, MasterCard"), "09/21")])
problem_158 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5314 5016 8586 8462, 01/21, 850, MasterCard"), "5314 5016 8586 8462"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1083 2063 8654, 05/22, 648, MasterCard"), "5405 1083 2063 8654"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1087 3189 9176, 11/21, 694, MasterCard"), "5405 1087 3189 9176"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1052 2515 1916, 01/20, 340, MasterCard"), "5405 1052 2515 1916"), 
	IOExample(Dict{Symbol, Any}(:x => "5122 1790 8893 7705, 09/21, 284, MasterCard"), "5122 1790 8893 7705"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1005 1530 5793, 08/23, 915, MasterCard"), "5405 1005 1530 5793"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1062 9387 1716, 03/20, 429, MasterCard"), "5405 1062 9387 1716"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3650 8176 1320, 02/23, 549, MasterCard"), "5404 3650 8176 1320"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4106 1475 1970, 09/22, 397, MasterCard"), "5218 4106 1475 1970"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4852 1289 3133, 01/22, 431, MasterCard"), "5137 4852 1289 3133")])
problem_159 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5137 4852 1289 3133, 01/22, 431, MasterCard"), "431"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1052 2515 1916, 01/20, 340, MasterCard"), "340"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1087 3189 9176, 11/21, 694, MasterCard"), "694"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1005 1530 5793, 08/23, 915, MasterCard"), "915"), 
	IOExample(Dict{Symbol, Any}(:x => "5122 1790 8893 7705, 09/21, 284, MasterCard"), "284"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4106 1475 1970, 09/22, 397, MasterCard"), "397"), 
	IOExample(Dict{Symbol, Any}(:x => "5314 5016 8586 8462, 01/21, 850, MasterCard"), "850"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3650 8176 1320, 02/23, 549, MasterCard"), "549"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1062 9387 1716, 03/20, 429, MasterCard"), "429"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1083 2063 8654, 05/22, 648, MasterCard"), "648")])
problem_15 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "/Company/Code/index.html"), "/Company/Code/"), 
	IOExample(Dict{Symbol, Any}(:x => "/var/db/auth.db"), "/var/db/"), 
	IOExample(Dict{Symbol, Any}(:x => "/Work/Records/2010/January.dat"), "/Work/Records/2010/"), 
	IOExample(Dict{Symbol, Any}(:x => "/Work/Presentations/talk.ppt"), "/Work/Presentations/"), 
	IOExample(Dict{Symbol, Any}(:x => "/Users/jim/Downloads/pdf.pdf"), "/Users/jim/Downloads/"), 
	IOExample(Dict{Symbol, Any}(:x => "/Proj/Numerical/NBody/nbody.c"), "/Proj/Numerical/NBody/"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/texlive/2017/doc.html"), "/usr/local/texlive/2017/"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/bin/ncdu.exe"), "/usr/local/bin/"), 
	IOExample(Dict{Symbol, Any}(:x => "/Company/Docs/Spec/specs.doc"), "/Company/Docs/Spec/"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/Homebrew/CONTRIBUTING.md"), "/usr/local/Homebrew/")])
problem_160 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5127 1743 3998 9394, 01/20, 588, Gilbertha Stamey, MasterCard"), "Gilbertha Stamey"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1040 5693 1652, 07/21, 177, Holli Claxton, MasterCard"), "Holli Claxton"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4136 7761 5496, 05/20, 505, Devell Blaisdell, MasterCard"), "Devell Blaisdell"), 
	IOExample(Dict{Symbol, Any}(:x => "5323 5254 7005 2676, 07/23, 627, Simmona Elzey, MasterCard"), "Simmona Elzey"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3677 2397 0897, 12/20, 710, Fulk Sharkey, MasterCard"), "Fulk Sharkey"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4823 6957 8278, 06/22, 231, Affonso Tousignant, MasterCard"), "Affonso Tousignant"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7317 7561 0495, 12/23, 207, Deval O'Donnell, MasterCard"), "Deval O'Donnell"), 
	IOExample(Dict{Symbol, Any}(:x => "5121 6409 6639 2751, 11/20, 275, Wioleta Sheffer, MasterCard"), "Wioleta Sheffer"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7150 6827 2113, 06/21, 130, Sariel Reale, MasterCard"), "Sariel Reale"), 
	IOExample(Dict{Symbol, Any}(:x => "5520 7165 1105 8274, 04/22, 705, Emina Burkley, MasterCard"), "Emina Burkley")])
problem_161 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Brand: Apple Model: iPhone 5"), "iPhone 5"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 7370"), "7370"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6208c"), "6208c"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6310"), "6310"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 2680"), "2680"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 3210"), "3210"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6150"), "6150"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Sony Ericsson Model: W580"), "W580"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Feton Technology Model: ALPS A618"), "ALPS A618"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: LG Model: MG155c"), "MG155c")])
problem_162 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6310"), "Nokia"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6208c"), "Nokia"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Feton Model: ALPS A618"), "Feton"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Apple Model: iPhone 5"), "Apple"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 3210"), "Nokia"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: LG Model: MG155c"), "LG"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Sony Model: W580"), "Sony"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 2680"), "Nokia"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6150"), "Nokia"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 7370"), "Nokia")])
problem_163 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6310"), "Nokia 6310"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 2680"), "Nokia 2680"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6150"), "Nokia 6150"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Apple Model: iPhone 5"), "Apple iPhone 5"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 7370"), "Nokia 7370"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 3210"), "Nokia 3210"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Sony Model: W580"), "Sony W580"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: LG Model: MG155c"), "LG MG155c"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6208c"), "Nokia 6208c"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Feton Model: ALPS A618"), "Feton ALPS A618")])
problem_164 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "17 Bruce Pl, East Kilbride, Glasgow G75 0PU"), "G75 0PU"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Bayswater Terrace, Leeds LS8 5QL"), "LS8 5QL"), 
	IOExample(Dict{Symbol, Any}(:x => "15 Cooper's Cl, Mill Ln, Wareham BH20 4RB"), "BH20 4RB"), 
	IOExample(Dict{Symbol, Any}(:x => "28 Majors Loan, Falkirk FK1 5QA"), "FK1 5QA"), 
	IOExample(Dict{Symbol, Any}(:x => "18 Round Hills, Waltham Abbey EN9 1TP"), "EN9 1TP"), 
	IOExample(Dict{Symbol, Any}(:x => "9-15 Ribbleton Ln, Preston PR0 2BP"), "PR0 2BP"), 
	IOExample(Dict{Symbol, Any}(:x => "18 Russell Rd, Edinburgh EH11 3YT"), "EH11 3YT"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Weybank, Wisley, Woking GU23 6QF"), "GU23 6QF"), 
	IOExample(Dict{Symbol, Any}(:x => "11 The Oak Field, Pett, Hastings TN35 4HQ"), "TN35 4HQ"), 
	IOExample(Dict{Symbol, Any}(:x => "122c High St, Aylesbury HP20 1RB"), "HP20 1RB"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Treworthal Rd, Perranwell Station, Truro TR3 7QB"), "TR3 7QB")])
problem_165 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "11 The Oak Field, Pett, Hastings TN35 4HQ"), "Hastings"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Bayswater Terrace, Leeds LS8 5QL"), "Leeds"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Treworthal Rd, Perranwell Station, Truro TR3 7QB"), "Truro"), 
	IOExample(Dict{Symbol, Any}(:x => "9-15 Ribbleton Ln, Preston PR0 2BP"), "Preston"), 
	IOExample(Dict{Symbol, Any}(:x => "122c High St, Aylesbury HP20 1RB"), "Aylesbury"), 
	IOExample(Dict{Symbol, Any}(:x => "18 Round Hills, Waltham Abbey EN9 1TP"), "Waltham Abbey"), 
	IOExample(Dict{Symbol, Any}(:x => "28 Majors Loan, Falkirk FK1 5QA"), "Falkirk"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Weybank, Wisley, Woking GU23 6QF"), "Woking"), 
	IOExample(Dict{Symbol, Any}(:x => "17 Bruce Pl, East Kilbride, Glasgow G75 0PU"), "Glasgow"), 
	IOExample(Dict{Symbol, Any}(:x => "15 Cooper's Cl, Mill Ln, Wareham BH20 4RB"), "Wareham"), 
	IOExample(Dict{Symbol, Any}(:x => "18 Russell Rd, Edinburgh EH11 3YT"), "Edinburgh")])
problem_166 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "18 Round Hills, Waltham Abbey EN9 1TP"), "18 Round Hills, EN9 1TP"), 
	IOExample(Dict{Symbol, Any}(:x => "28 Majors Loan, Falkirk FK1 5QA"), "28 Majors Loan, FK1 5QA"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Bayswater Terrace, Leeds LS8 5QL"), "5 Bayswater Terrace, LS8 5QL"), 
	IOExample(Dict{Symbol, Any}(:x => "17 Bruce Pl, East Kilbride, Glasgow G75 0PU"), "17 Bruce Pl, G75 0PU"), 
	IOExample(Dict{Symbol, Any}(:x => "9-15 Ribbleton Ln, Preston PR0 2BP"), "9-15 Ribbleton Ln, PR0 2BP"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Weybank, Wisley, Woking GU23 6QF"), "10 Weybank, GU23 6QF"), 
	IOExample(Dict{Symbol, Any}(:x => "122c High St, Aylesbury HP20 1RB"), "122c High St, HP20 1RB"), 
	IOExample(Dict{Symbol, Any}(:x => "11 The Oak Field, Pett, Hastings TN35 4HQ"), "11 The Oak Field, TN35 4HQ"), 
	IOExample(Dict{Symbol, Any}(:x => "15 Cooper's Cl, Mill Ln, Wareham BH20 4RB"), "15 Cooper's Cl, BH20 4RB"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Treworthal Rd, Perranwell Station, Truro TR3 7QB"), "1 Treworthal Rd, TR3 7QB"), 
	IOExample(Dict{Symbol, Any}(:x => "18 Russell Rd, Edinburgh EH11 3YT"), "18 Russell Rd, EH11 3YT")])
problem_167 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "30, Place de la Gare 5036 COLOMIERS, France"), "5036"), 
	IOExample(Dict{Symbol, Any}(:x => "4, Chemin Des Bateliers 2663 ANGLET, France"), "2663"), 
	IOExample(Dict{Symbol, Any}(:x => "55, rue Descartes 5306 SURESNES, France"), "5306"), 
	IOExample(Dict{Symbol, Any}(:x => "43, Faubourg Saint Honore 9489 PARIS, France"), "9489"), 
	IOExample(Dict{Symbol, Any}(:x => "57, Rue Roussy 6711 ORANGE, France"), "6711"), 
	IOExample(Dict{Symbol, Any}(:x => "27, avenue de Bouvines 2867 SCHOELCHER, France"), "2867"), 
	IOExample(Dict{Symbol, Any}(:x => "65, boulevard Bryas 2619 COURBEVOIE, France"), "2619"), 
	IOExample(Dict{Symbol, Any}(:x => "95, rue de la Boetie 772 POITIERS, France"), "772"), 
	IOExample(Dict{Symbol, Any}(:x => "33, rue Nationale 5752 PARIS, France"), "5752"), 
	IOExample(Dict{Symbol, Any}(:x => "16, Chemin Du Lavarin Sud 2935 CAEN, France"), "2935")])
problem_168 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "16, Chemin Du Lavarin Sud 2935 CAEN, France"), "16, Chemin Du Lavarin Sud"), 
	IOExample(Dict{Symbol, Any}(:x => "57, Rue Roussy 6711 ORANGE, France"), "57, Rue Roussy"), 
	IOExample(Dict{Symbol, Any}(:x => "27, avenue de Bouvines 2867 SCHOELCHER, France"), "27, avenue de Bouvines"), 
	IOExample(Dict{Symbol, Any}(:x => "33, rue Nationale 5752 PARIS, France"), "33, rue Nationale"), 
	IOExample(Dict{Symbol, Any}(:x => "43, Faubourg Saint Honore 9489 PARIS, France"), "43, Faubourg Saint Honore"), 
	IOExample(Dict{Symbol, Any}(:x => "30, Place de la Gare 5036 COLOMIERS, France"), "30, Place de la Gare"), 
	IOExample(Dict{Symbol, Any}(:x => "4, Chemin Des Bateliers 2663 ANGLET, France"), "4, Chemin Des Bateliers"), 
	IOExample(Dict{Symbol, Any}(:x => "65, boulevard Bryas 2619 COURBEVOIE, France"), "65, boulevard Bryas"), 
	IOExample(Dict{Symbol, Any}(:x => "95, rue de la Boetie 772 POITIERS, France"), "95, rue de la Boetie"), 
	IOExample(Dict{Symbol, Any}(:x => "55, rue Descartes 5306 SURESNES, France"), "55, rue Descartes")])
problem_169 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "55, rue Descartes 5306 SURESNES, France"), "SURESNES"), 
	IOExample(Dict{Symbol, Any}(:x => "33, rue Nationale 5752 PARIS, France"), "PARIS"), 
	IOExample(Dict{Symbol, Any}(:x => "43, Faubourg Saint Honore 9489 PARIS, France"), "PARIS"), 
	IOExample(Dict{Symbol, Any}(:x => "30, Place de la Gare 5036 COLOMIERS, France"), "COLOMIERS"), 
	IOExample(Dict{Symbol, Any}(:x => "95, rue de la Boetie 772 POITIERS, France"), "POITIERS"), 
	IOExample(Dict{Symbol, Any}(:x => "4, Chemin Des Bateliers 2663 ANGLET, France"), "ANGLET"), 
	IOExample(Dict{Symbol, Any}(:x => "57, Rue Roussy 6711 ORANGE, France"), "ORANGE"), 
	IOExample(Dict{Symbol, Any}(:x => "27, avenue de Bouvines 2867 SCHOELCHER, France"), "SCHOELCHER"), 
	IOExample(Dict{Symbol, Any}(:x => "16, Chemin Du Lavarin Sud 2935 CAEN, France"), "CAEN"), 
	IOExample(Dict{Symbol, Any}(:x => "65, boulevard Bryas 2619 COURBEVOIE, France"), "COURBEVOIE")])
problem_16 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/texlive/2017/doc.html"), "doc.html"), 
	IOExample(Dict{Symbol, Any}(:x => "/Company/Code/index.html"), "index.html"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/bin/ncdu.exe"), "ncdu.exe"), 
	IOExample(Dict{Symbol, Any}(:x => "/Work/Presentations/talk.ppt"), "talk.ppt"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/Homebrew/CONTRIBUTING.md"), "CONTRIBUTING.md"), 
	IOExample(Dict{Symbol, Any}(:x => "/Work/Records/2010/January.dat"), "January.dat"), 
	IOExample(Dict{Symbol, Any}(:x => "/Proj/Numerical/Simulators/NBody/nbody.c"), "nbody.c"), 
	IOExample(Dict{Symbol, Any}(:x => "/Company/Docs/Spec/specs.doc"), "specs.doc"), 
	IOExample(Dict{Symbol, Any}(:x => "/Users/jim/Downloads/pdf.pdf"), "pdf.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "/var/db/auth.db"), "auth.db")])
problem_170 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "57, Rue Roussy 6711 ORANGE, France"), "Rue Roussy"), 
	IOExample(Dict{Symbol, Any}(:x => "95, rue de la Boetie 772 POITIERS, France"), "rue de la Boetie"), 
	IOExample(Dict{Symbol, Any}(:x => "33, rue Nationale 5752 PARIS, France"), "rue Nationale"), 
	IOExample(Dict{Symbol, Any}(:x => "27, avenue de Bouvines 2867 SCHOELCHER, France"), "avenue de Bouvines"), 
	IOExample(Dict{Symbol, Any}(:x => "4, Chemin Des Bateliers 2663 ANGLET, France"), "Chemin Des Bateliers"), 
	IOExample(Dict{Symbol, Any}(:x => "16, Chemin Du Lavarin Sud 2935 CAEN, France"), "Chemin Du Lavarin Sud"), 
	IOExample(Dict{Symbol, Any}(:x => "30, Place de la Gare 5036 COLOMIERS, France"), "Place de la Gare"), 
	IOExample(Dict{Symbol, Any}(:x => "55, rue Descartes 5306 SURESNES, France"), "55, rue Descartes"), 
	IOExample(Dict{Symbol, Any}(:x => "43, Faubourg Saint Honore 9489 PARIS, France"), "Faubourg Saint Honore"), 
	IOExample(Dict{Symbol, Any}(:x => "65, boulevard Bryas 2619 COURBEVOIE, France"), "boulevard Bryas")])
problem_171 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "65, boulevard Bryas 2619 COURBEVOIE, France"), "Courbevoie"), 
	IOExample(Dict{Symbol, Any}(:x => "95, rue de la Boetie 772 POITIERS, France"), "Poitiers"), 
	IOExample(Dict{Symbol, Any}(:x => "30, Place de la Gare 5036 COLOMIERS, France"), "Colomiers"), 
	IOExample(Dict{Symbol, Any}(:x => "43, Faubourg Saint Honore 9489 PARIS, France"), "Paris"), 
	IOExample(Dict{Symbol, Any}(:x => "57, Rue Roussy 6711 ORANGE, France"), "Orange"), 
	IOExample(Dict{Symbol, Any}(:x => "33, rue Nationale 5752 PARIS, France"), "Paris"), 
	IOExample(Dict{Symbol, Any}(:x => "4, Chemin Des Bateliers 2663 ANGLET, France"), "Anglet"), 
	IOExample(Dict{Symbol, Any}(:x => "27, avenue de Bouvines 2867 SCHOELCHER, France"), "Schoelcher"), 
	IOExample(Dict{Symbol, Any}(:x => "55, rue Descartes 5306 SURESNES, France"), "Suresnes"), 
	IOExample(Dict{Symbol, Any}(:x => "16, Chemin Du Lavarin Sud 2935 CAEN, France"), "Caen")])
problem_172 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "30, Place de la Gare 5036 COLOMIERS, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "16, Chemin Du Lavarin Sud 2935 CAEN, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "33, rue Nationale 5752 PARIS, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "95, rue de la Boetie 772 POITIERS, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "27, avenue de Bouvines 2867 SCHOELCHER, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "55, rue Descartes 5306 SURESNES, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "43, Faubourg Saint Honore 9489 PARIS, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "57, Rue Roussy 6711 ORANGE, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "4, Chemin Des Bateliers 2663 ANGLET, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "65, boulevard Bryas 2619 COURBEVOIE, France"), "France")])
problem_173 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Paderborner Strasse 6836 5660 Sielenbach, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Flughafenstrasse 2472 5370 Leonberg, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Scharnweberstrasse 7308 9751 Mannheim Friedrichsfeld, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "An Der Urania 211 6544 Aebtissinwisch, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Ufnau Strasse 1464 2320 Fellheim, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Marseiller Strasse 5542 7619 Schwabsoien, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Ellmenreichstrasse 7660 5523 Adelsdorf, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Waldowstr 3442 4532 Dorzbach, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Alsterkrugchaussee 3048 2847 Megesheim, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Brandenburgische Str 7737 5061 Martinstein, Germany"), "Germany")])
problem_174 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Ellmenreichstrasse 7660 5523 Adelsdorf, Germany"), "Adelsdorf"), 
	IOExample(Dict{Symbol, Any}(:x => "Paderborner Strasse 6836 5660 Sielenbach, Germany"), "Sielenbach"), 
	IOExample(Dict{Symbol, Any}(:x => "Scharnweberstrasse 7308 9751 Mannheim Friedrichsfeld, Germany"), "Mannheim Friedrichsfeld"), 
	IOExample(Dict{Symbol, Any}(:x => "Ufnau Strasse 1464 2320 Fellheim, Germany"), "Fellheim"), 
	IOExample(Dict{Symbol, Any}(:x => "Waldowstr 3442 4532 Dorzbach, Germany"), "Dorzbach"), 
	IOExample(Dict{Symbol, Any}(:x => "An Der Urania 211 6544 Aebtissinwisch, Germany"), "Aebtissinwisch"), 
	IOExample(Dict{Symbol, Any}(:x => "Marseiller Strasse 5542 7619 Schwabsoien, Germany"), "Schwabsoien"), 
	IOExample(Dict{Symbol, Any}(:x => "Alsterkrugchaussee 3048 2847 Megesheim, Germany"), "Megesheim"), 
	IOExample(Dict{Symbol, Any}(:x => "Brandenburgische Str 7737 5061 Martinstein, Germany"), "Martinstein"), 
	IOExample(Dict{Symbol, Any}(:x => "Flughafenstrasse 2472 5370 Leonberg, Germany"), "Leonberg")])
problem_175 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Ellmenreichstrasse 7660 5523 Adelsdorf, Germany"), "7660 5523"), 
	IOExample(Dict{Symbol, Any}(:x => "Brandenburgische Str 7737 5061 Martinstein, Germany"), "7737 5061"), 
	IOExample(Dict{Symbol, Any}(:x => "Ufnau Strasse 1464 2320 Fellheim, Germany"), "1464 2320"), 
	IOExample(Dict{Symbol, Any}(:x => "An Der Urania 211 6544 Aebtissinwisch, Germany"), "211 6544"), 
	IOExample(Dict{Symbol, Any}(:x => "Marseiller Strasse 5542 7619 Schwabsoien, Germany"), "5542 7619"), 
	IOExample(Dict{Symbol, Any}(:x => "Alsterkrugchaussee 3048 2847 Megesheim, Germany"), "3048 2847"), 
	IOExample(Dict{Symbol, Any}(:x => "Scharnweberstrasse 7308 9751 Mannheim Friedrichsfeld, Germany"), "7308 9751"), 
	IOExample(Dict{Symbol, Any}(:x => "Paderborner Strasse 6836 5660 Sielenbach, Germany"), "6836 5660"), 
	IOExample(Dict{Symbol, Any}(:x => "Waldowstr 3442 4532 Dorzbach, Germany"), "3442 4532"), 
	IOExample(Dict{Symbol, Any}(:x => "Flughafenstrasse 2472 5370 Leonberg, Germany"), "2472 5370")])
problem_176 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Scharnweberstrasse 7308 9751 Mannheim Friedrichsfeld, Germany"), "Scharnweberstrasse"), 
	IOExample(Dict{Symbol, Any}(:x => "Ellmenreichstrasse 7660 5523 Adelsdorf, Germany"), "Ellmenreichstrasse"), 
	IOExample(Dict{Symbol, Any}(:x => "Paderborner Strasse 6836 5660 Sielenbach, Germany"), "Paderborner Strasse"), 
	IOExample(Dict{Symbol, Any}(:x => "Ufnau Strasse 1464 2320 Fellheim, Germany"), "Ufnau Strasse"), 
	IOExample(Dict{Symbol, Any}(:x => "Alsterkrugchaussee 3048 2847 Megesheim, Germany"), "Alsterkrugchaussee"), 
	IOExample(Dict{Symbol, Any}(:x => "An Der Urania 211 6544 Aebtissinwisch, Germany"), "An Der Urania"), 
	IOExample(Dict{Symbol, Any}(:x => "Flughafenstrasse 2472 5370 Leonberg, Germany"), "Flughafenstrasse"), 
	IOExample(Dict{Symbol, Any}(:x => "Brandenburgische Str 7737 5061 Martinstein, Germany"), "Brandenburgische Str"), 
	IOExample(Dict{Symbol, Any}(:x => "Waldowstr 3442 4532 Dorzbach, Germany"), "Waldowstr"), 
	IOExample(Dict{Symbol, Any}(:x => "Marseiller Strasse 5542 7619 Schwabsoien, Germany"), "Marseiller Strasse")])
problem_177 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Piazza Giuseppe Garibaldi, 2402 43010-Castelguelfo PR, Italy"), "Piazza Giuseppe Garibaldi"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Foria, 9145 71030-Macchia FG, Italy"), "Via Foria"), 
	IOExample(Dict{Symbol, Any}(:x => "Corso Garibaldi, 6254 03010-Patrica FR, Italy"), "Corso Garibaldi"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Duomo, 7754 57024-Donoratico LI, Italy"), "Via Duomo"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Trieste e Trento, 1005 12078-Ormea CN, Italy"), "Piazza Trieste e Trento"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Santa Teresa, 9341 53049-Torrita Di Siena SI, Italy"), "Via Santa Teresa"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Bologna, 4069 26849-Santo Stefano Lodigiano LO, Italy"), "Via Bologna"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Matteo Schilizzi, 1513 16045-Lorsica GE, Italy"), "Via Matteo Schilizzi"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Cavour, 6561 81030-Lusciano CE, Italy"), "Via Cavour"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Valpantena, 9266 84032-Buonabitacolo SA, Italy"), "Via Valpantena")])
problem_178 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Via Foria, 9145 71030-Macchia FG, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Santa Teresa, 9341 53049-Torrita Di Siena SI, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Matteo Schilizzi, 1513 16045-Lorsica GE, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Trieste e Trento, 1005 12078-Ormea CN, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Valpantena, 9266 84032-Buonabitacolo SA, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Giuseppe Garibaldi, 2402 43010-Castelguelfo PR, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Cavour, 6561 81030-Lusciano CE, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Duomo, 7754 57024-Donoratico LI, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Corso Garibaldi, 6254 03010-Patrica FR, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Bologna, 4069 26849-Santo Stefano Lodigiano LO, Italy"), "Italy")])
problem_179 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Via Valpantena, 9266 84032-Buonabitacolo SA, Italy"), "SA"), 
	IOExample(Dict{Symbol, Any}(:x => "Corso Garibaldi, 6254 03010-Patrica FR, Italy"), "FR"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Cavour, 6561 81030-Lusciano CE, Italy"), "CE"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Bologna, 4069 26849-Santo Stefano Lodigiano LO, Italy"), "LO"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Giuseppe Garibaldi, 2402 43010-Castelguelfo PR, Italy"), "PR"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Duomo, 7754 57024-Donoratico LI, Italy"), "LI"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Santa Teresa, 9341 53049-Torrita Di Siena SI, Italy"), "SI"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Matteo Schilizzi, 1513 16045-Lorsica GE, Italy"), "GE"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Foria, 9145 71030-Macchia FG, Italy"), "FG"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Trieste e Trento, 1005 12078-Ormea CN, Italy"), "CN")])
problem_17 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Inductive Logic Programming"), "ILP"), 
	IOExample(Dict{Symbol, Any}(:x => "Algorithmic Learning Theory"), "ALT"), 
	IOExample(Dict{Symbol, Any}(:x => "European Conference Artificial Intelligence"), "ECAI"), 
	IOExample(Dict{Symbol, Any}(:x => "Neural Information Processing Systems"), "NIPS"), 
	IOExample(Dict{Symbol, Any}(:x => "Computer Aided Verification"), "CAV"), 
	IOExample(Dict{Symbol, Any}(:x => "International Semantic Web Conference"), "ISWC"), 
	IOExample(Dict{Symbol, Any}(:x => "Very Large Data Bases"), "VLDB"), 
	IOExample(Dict{Symbol, Any}(:x => "Principles Of Programming Languages"), "POPL"), 
	IOExample(Dict{Symbol, Any}(:x => "Design Automation Conference"), "DAC"), 
	IOExample(Dict{Symbol, Any}(:x => "British Machine Vision Conference"), "BMVC")])
problem_180 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Via Cavour, 6561 81030-Lusciano CE, Italy"), "6561"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Foria, 9145 71030-Macchia FG, Italy"), "9145"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Matteo Schilizzi, 1513 16045-Lorsica GE, Italy"), "1513"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Trieste e Trento, 1005 12078-Ormea CN, Italy"), "1005"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Giuseppe Garibaldi, 2402 43010-Castelguelfo PR, Italy"), "2402"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Bologna, 4069 26849-Santo Stefano Lodigiano LO, Italy"), "4069"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Duomo, 7754 57024-Donoratico LI, Italy"), "7754"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Santa Teresa, 9341 53049-Torrita Di Siena SI, Italy"), "9341"), 
	IOExample(Dict{Symbol, Any}(:x => "Corso Garibaldi, 6254 03010-Patrica FR, Italy"), "6254"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Valpantena, 9266 84032-Buonabitacolo SA, Italy"), "9266")])
problem_181 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Via Foria, 9145 71030-Macchia FG, Italy"), "71030"), 
	IOExample(Dict{Symbol, Any}(:x => "Corso Garibaldi, 6254 03010-Patrica FR, Italy"), "03010"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Duomo, 7754 57024-Donoratico LI, Italy"), "57024"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Matteo Schilizzi, 1513 16045-Lorsica GE, Italy"), "16045"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Trieste e Trento, 1005 12078-Ormea CN, Italy"), "12078"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Santa Teresa, 9341 53049-Torrita Di Siena SI, Italy"), "53049"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Valpantena, 9266 84032-Buonabitacolo SA, Italy"), "84032"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Bologna, 4069 26849-Santo Stefano Lodigiano LO, Italy"), "26849"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Cavour, 6561 81030-Lusciano CE, Italy"), "81030"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Giuseppe Garibaldi, 2402 43010-Castelguelfo PR, Italy"), "43010")])
problem_182 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "21 April,1965 (53 years old)"), "April"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1947 (71 years old)"), "July"), 
	IOExample(Dict{Symbol, Any}(:x => "28 December,1958 (60 years old)"), "December"), 
	IOExample(Dict{Symbol, Any}(:x => "23 November,1954 (64 years old)"), "November"), 
	IOExample(Dict{Symbol, Any}(:x => "26 October,1998 (20 years old)"), "October"), 
	IOExample(Dict{Symbol, Any}(:x => "21 October,1943 (75 years old)"), "October"), 
	IOExample(Dict{Symbol, Any}(:x => "25 September,1980 (38 years old)"), "September"), 
	IOExample(Dict{Symbol, Any}(:x => "22 July,1983 (35 years old)"), "July"), 
	IOExample(Dict{Symbol, Any}(:x => "2 May,1941 (77 years old)"), "May"), 
	IOExample(Dict{Symbol, Any}(:x => "30 October,1955 (63 years old)"), "October")])
problem_183 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2 May,1941 (77 years old)"), "1941"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1947 (71 years old)"), "1947"), 
	IOExample(Dict{Symbol, Any}(:x => "21 October,1943 (75 years old)"), "1943"), 
	IOExample(Dict{Symbol, Any}(:x => "26 October,1998 (20 years old)"), "1998"), 
	IOExample(Dict{Symbol, Any}(:x => "25 September,1980 (38 years old)"), "1980"), 
	IOExample(Dict{Symbol, Any}(:x => "23 November,1954 (64 years old)"), "1954"), 
	IOExample(Dict{Symbol, Any}(:x => "22 July,1983 (35 years old)"), "1983"), 
	IOExample(Dict{Symbol, Any}(:x => "28 December,1958 (60 years old)"), "1958"), 
	IOExample(Dict{Symbol, Any}(:x => "30 October,1955 (63 years old)"), "1955"), 
	IOExample(Dict{Symbol, Any}(:x => "21 April,1965 (53 years old)"), "1965")])
problem_184 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "21 April,1965 (53 years old)"), "53"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1947 (71 years old)"), "71"), 
	IOExample(Dict{Symbol, Any}(:x => "22 July,1983 (35 years old)"), "35"), 
	IOExample(Dict{Symbol, Any}(:x => "2 May,1941 (77 years old)"), "194"), 
	IOExample(Dict{Symbol, Any}(:x => "28 December,1958 (60 years old)"), "60"), 
	IOExample(Dict{Symbol, Any}(:x => "25 September,1980 (38 years old)"), "38"), 
	IOExample(Dict{Symbol, Any}(:x => "21 October,1943 (75 years old)"), "75"), 
	IOExample(Dict{Symbol, Any}(:x => "26 October,1998 (20 years old)"), "20"), 
	IOExample(Dict{Symbol, Any}(:x => "30 October,1955 (63 years old)"), "63"), 
	IOExample(Dict{Symbol, Any}(:x => "23 November,1954 (64 years old)"), "64")])
problem_185 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "28 December,1958 (60 years old)"), "28 December,1958"), 
	IOExample(Dict{Symbol, Any}(:x => "23 November,1954 (64 years old)"), "23 November,1954"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1947 (71 years old)"), "11 July,1947"), 
	IOExample(Dict{Symbol, Any}(:x => "25 September,1980 (38 years old)"), "25 September,1980"), 
	IOExample(Dict{Symbol, Any}(:x => "22 July,1983 (35 years old)"), "22 July,1983"), 
	IOExample(Dict{Symbol, Any}(:x => "26 October,1998 (20 years old)"), "26 October,1998"), 
	IOExample(Dict{Symbol, Any}(:x => "30 October,1955 (63 years old)"), "30 October,1955"), 
	IOExample(Dict{Symbol, Any}(:x => "21 October,1943 (75 years old)"), "21 October,1943"), 
	IOExample(Dict{Symbol, Any}(:x => "21 April,1965 (53 years old)"), "21 April,1965"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1950 (74 years old)"), "11 July,1950")])
problem_186 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Here and There (2010)"), "2010"), 
	IOExample(Dict{Symbol, Any}(:x => "Forbandede barndom (2003)"), "2003"), 
	IOExample(Dict{Symbol, Any}(:x => "Common Law (2012)"), "2012"), 
	IOExample(Dict{Symbol, Any}(:x => "Das Gold der Liebe (1983)"), "1983"), 
	IOExample(Dict{Symbol, Any}(:x => "Rapturious (2007)"), "2007"), 
	IOExample(Dict{Symbol, Any}(:x => "Carnival Lady (1933)"), "1933"), 
	IOExample(Dict{Symbol, Any}(:x => "Surf Chronicles (2011)"), "2011"), 
	IOExample(Dict{Symbol, Any}(:x => "Beginning at the End (1915)"), "1915"), 
	IOExample(Dict{Symbol, Any}(:x => "Lahu Ke Do Rang (1979)"), "1979"), 
	IOExample(Dict{Symbol, Any}(:x => "Homes (1973)"), "1973")])
problem_187 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "BRO (brother)"), "brother"), 
	IOExample(Dict{Symbol, Any}(:x => "MUNCEL (daughter)"), "daughter"), 
	IOExample(Dict{Symbol, Any}(:x => "MERRIDY (son)"), "son"), 
	IOExample(Dict{Symbol, Any}(:x => "CORONA (son)"), "son"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSTANTIA (son)"), "son"), 
	IOExample(Dict{Symbol, Any}(:x => "AGATHANGELOS (daughter)"), "daughter"), 
	IOExample(Dict{Symbol, Any}(:x => "OMA (daughter)"), "daughter"), 
	IOExample(Dict{Symbol, Any}(:x => "TULLIO (daughter)"), "daughter"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSUELA (son)"), "son"), 
	IOExample(Dict{Symbol, Any}(:x => "BORNA (daughter)"), "daughter")])
problem_188 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2008 Mazda MAZDA3"), "2008"), 
	IOExample(Dict{Symbol, Any}(:x => "2004 Citroen Evasion"), "2004"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Peugeot Partner"), "2005"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Ford Puma"), "2005"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Infiniti G35"), "2008"), 
	IOExample(Dict{Symbol, Any}(:x => "2007 Ford Capri"), "2007"), 
	IOExample(Dict{Symbol, Any}(:x => "2010 Renault Megane"), "2010"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Subaru Justy"), "2005"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Volkswagen Cabriolet"), "2008")])
problem_189 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2005 Peugeot Partner"), "Peugeot"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Ford Puma"), "Ford"), 
	IOExample(Dict{Symbol, Any}(:x => "2010 Renault Megane"), "Renault"), 
	IOExample(Dict{Symbol, Any}(:x => "2004 Citroen Evasion"), "Citroen"), 
	IOExample(Dict{Symbol, Any}(:x => "2007 Ford Capri"), "Ford"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Mazda MAZDA3"), "Mazda"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Subaru Justy"), "Subaru"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Infiniti G35"), "Infiniti"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Volkswagen Cabriolet"), "Volkswagen")])
problem_18 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Inductive Logic Programming"), "Inductive Programming"), 
	IOExample(Dict{Symbol, Any}(:x => "British Machine Vision Conference"), "British Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "Very Large Data Bases"), "Very Bases"), 
	IOExample(Dict{Symbol, Any}(:x => "Principles Of Programming Languages"), "Principles Languages"), 
	IOExample(Dict{Symbol, Any}(:x => "European Conference Artificial Intelligence"), "European Intelligence"), 
	IOExample(Dict{Symbol, Any}(:x => "Computer Aided Verification"), "Computer Verification"), 
	IOExample(Dict{Symbol, Any}(:x => "Design Automation Conference"), "Design Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "Neural Information Processing Systems"), "Neural Systems"), 
	IOExample(Dict{Symbol, Any}(:x => "International Semantic Web Conference"), "International Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "Algorithmic Learning Theory"), "Algorithmic Theory")])
problem_190 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2005 Ford Puma"), "Puma"), 
	IOExample(Dict{Symbol, Any}(:x => "2010 Renault Megane"), "Megane"), 
	IOExample(Dict{Symbol, Any}(:x => "2004 Citroen Evasion"), "Evasion"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Subaru Justy"), "Justy"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Peugeot Partner"), "Partner"), 
	IOExample(Dict{Symbol, Any}(:x => "2007 Ford Capri"), "Capri"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Volkswagen Cabriolet"), "Cabriolet"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Infiniti G35"), "G35"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Mazda MAZDA3"), "MAZDA3")])
problem_191 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ScamVenture.co.nz"), ".co.nz"), 
	IOExample(Dict{Symbol, Any}(:x => "InformationAffiliate.si"), ".si"), 
	IOExample(Dict{Symbol, Any}(:x => "UpgradePros.fr"), ".fr"), 
	IOExample(Dict{Symbol, Any}(:x => "BannerVan.co.uk"), ".co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "PopPath.se"), ".se"), 
	IOExample(Dict{Symbol, Any}(:x => "InternetFraternity.be"), ".be"), 
	IOExample(Dict{Symbol, Any}(:x => "HandbagDealer.co.nz"), ".co.nz"), 
	IOExample(Dict{Symbol, Any}(:x => "HybridDay.com"), ".com"), 
	IOExample(Dict{Symbol, Any}(:x => "BohemianToo.pl"), ".pl"), 
	IOExample(Dict{Symbol, Any}(:x => "MedicationProvider.at"), ".at")])
problem_192 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1Z LT8716 01 90235 08 7"), "1ZLT87160190235087"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 92566P 42 09152 09 4"), "1Z92566P4209152094"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z R71911 A1 79947 07 8"), "1ZR71911A179947078"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 511O48 A1 96827 01 7"), "1Z511O48A196827017"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 9D65A9 41 77947 08 3"), "1Z9D65A94177947083"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 69DW1T 42 96959 06 6"), "1Z69DW1T4296959066"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 8X5779 15 95844 09 4"), "1Z8X57791595844094"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 152945 78 51391 09 3"), "1Z1529457851391093"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 76648Y 33 89112 02 2"), "1Z76648Y3389112022"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 5T616R A1 35796 08 3"), "1Z5T616RA135796083")])
problem_193 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1Z 152945 78 51391 09 3"), "11529457851391093"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 511O48 A1 96827 01 7"), "1511O48196827017"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 92566P 42 09152 09 4"), "1925664209152094"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 9D65A9 41 77947 08 3"), "196594177947083"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 8X5779 15 95844 09 4"), "1857791595844094"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 69DW1T 42 96959 06 6"), "16914296959066"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z R71911 A1 79947 07 8"), "171911179947078"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z LT8716 01 90235 08 7"), "187160190235087"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 76648Y 33 89112 02 2"), "1766483389112022"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 5T616R A1 35796 08 3"), "15616135796083")])
problem_194 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Hertford College @HertfordCollege 17h17 hours ago"), "HertfordCollege"), 
	IOExample(Dict{Symbol, Any}(:x => "Toby Walsh @TobyWalsh Mar 7"), "TobyWalsh"), 
	IOExample(Dict{Symbol, Any}(:x => "Karthik Balakrishnan @karthikb351 Mar 2"), "karthikb351"), 
	IOExample(Dict{Symbol, Any}(:x => "Jakob Foerster @j_foerst 16h16 hours ago"), "j_foerst"), 
	IOExample(Dict{Symbol, Any}(:x => "Denny Britz @dennybritz Mar 7"), "dennybritz"), 
	IOExample(Dict{Symbol, Any}(:x => "Guy Broeck @guyvdb 14h14 hours ago"), "guyvdb"), 
	IOExample(Dict{Symbol, Any}(:x => "Oxford UCU @OxfordUCU Mar 6"), "OxfordUCU"), 
	IOExample(Dict{Symbol, Any}(:x => "Ari Morcos @arimorcos 17h17 hours ago"), "arimorcos"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Henry @g7vdj 20h20 hours ago"), "g7vdj"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Harris @SamHarrisOrg 16h16 hours ago"), "SamHarrisOrg")])
problem_195 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "45.018974(latitude), -93.093773(longitude)"), "45.018974 -93.093773"), 
	IOExample(Dict{Symbol, Any}(:x => "40.746647(latitude), -73.454643(longitude)"), "40.746647 -73.454643"), 
	IOExample(Dict{Symbol, Any}(:x => "40.369873(latitude), -74.757622(longitude)"), "40.369873 -74.757622"), 
	IOExample(Dict{Symbol, Any}(:x => "41.966038(latitude), -87.646660(longitude)"), "41.966038 -87.646660"), 
	IOExample(Dict{Symbol, Any}(:x => "36.166019(latitude), -115.065933(longitude)"), "36.166019 -115.065933"), 
	IOExample(Dict{Symbol, Any}(:x => "39.486244(latitude), -87.452957(longitude)"), "39.486244 -87.452957"), 
	IOExample(Dict{Symbol, Any}(:x => "37.780544(latitude), -122.413055(longitude)"), "37.780544 -122.413055"), 
	IOExample(Dict{Symbol, Any}(:x => "38.410809(latitude), -82.378563(longitude)"), "38.410809 -82.378563"), 
	IOExample(Dict{Symbol, Any}(:x => "29.858896(latitude), -95.475952(longitude)"), "29.858896 -95.475952"), 
	IOExample(Dict{Symbol, Any}(:x => "32.995209(latitude), -96.687759(longitude)"), "32.995209 -96.687759")])
problem_196 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "32.995209(latitude), -96.687759(longitude)"), "32.995209"), 
	IOExample(Dict{Symbol, Any}(:x => "40.369873(latitude), -74.757622(longitude)"), "40.369873"), 
	IOExample(Dict{Symbol, Any}(:x => "37.780544(latitude), -122.413055(longitude)"), "37.780544"), 
	IOExample(Dict{Symbol, Any}(:x => "38.410809(latitude), -82.378563(longitude)"), "38.410809"), 
	IOExample(Dict{Symbol, Any}(:x => "29.858896(latitude), -95.475952(longitude)"), "29.858896"), 
	IOExample(Dict{Symbol, Any}(:x => "45.018974(latitude), -93.093773(longitude)"), "45.018974"), 
	IOExample(Dict{Symbol, Any}(:x => "41.966038(latitude), -87.646660(longitude)"), "41.966038"), 
	IOExample(Dict{Symbol, Any}(:x => "40.746647(latitude), -73.454643(longitude)"), "40.746647"), 
	IOExample(Dict{Symbol, Any}(:x => "36.166019(latitude), -115.065933(longitude)"), "36.166019"), 
	IOExample(Dict{Symbol, Any}(:x => "39.486244(latitude), -87.452957(longitude)"), "39.486244")])
problem_197 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "37.780544(latitude), -122.413055(longitude)"), "-122.413055"), 
	IOExample(Dict{Symbol, Any}(:x => "29.858896(latitude), -95.475952(longitude)"), "-95.475952"), 
	IOExample(Dict{Symbol, Any}(:x => "45.018974(latitude), -93.093773(longitude)"), "-93.093773"), 
	IOExample(Dict{Symbol, Any}(:x => "40.746647(latitude), -73.454643(longitude)"), "-73.454643"), 
	IOExample(Dict{Symbol, Any}(:x => "36.166019(latitude), -115.065933(longitude)"), "-115.065933"), 
	IOExample(Dict{Symbol, Any}(:x => "41.966038(latitude), -87.646660(longitude)"), "-87.646660"), 
	IOExample(Dict{Symbol, Any}(:x => "40.369873(latitude), -74.757622(longitude)"), "-74.757622"), 
	IOExample(Dict{Symbol, Any}(:x => "38.410809(latitude), -82.378563(longitude)"), "-82.378563"), 
	IOExample(Dict{Symbol, Any}(:x => "39.486244(latitude), -87.452957(longitude)"), "-87.452957"), 
	IOExample(Dict{Symbol, Any}(:x => "32.995209(latitude), -96.687759(longitude)"), "-96.687759")])
problem_198 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: San Francisco, California(CA), 94143"), "City: San Francisco"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Las Vegas, Nevada(NV), 89109"), "City: Las Vegas"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: North St Paul, Minnesota(MN), 55109"), "City: North St Paul"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Conger, Minnesota(MN), 56020"), "City: Conger"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Houston, Texas(TX), 77587"), "City: Houston"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Chicago, Illinois(IL), 60606"), "City: Chicago"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Huntington, West Virginia(WV), 25701"), "City: Huntington"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Princeton, New Jersey(NJ), 08540"), "City: Princeton"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Bethpage, New York(NY), 11714"), "City: Bethpage"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Terre Haute, Indiana(IN), 47807"), "City: Terre Haute")])
problem_199 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Chicago, Illinois(IL), 60606"), "State: Illinois"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Conger, Minnesota(MN), 56020"), "State: Minnesota"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Las Vegas, Nevada(NV), 89109"), "State: Nevada"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Huntington, West Virginia(WV), 25701"), "State: West Virginia"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Houston, Texas(TX), 77587"), "State: Texas"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Bethpage, New York(NY), 11714"), "State: New York"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: North St Paul, Minnesota(MN), 55109"), "State: Minnesota"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Terre Haute, Indiana(IN), 47807"), "State: Indiana"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: San Francisco, California(CA), 94143"), "State: California"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Princeton, New Jersey(NJ), 08540"), "State: New Jersey")])
problem_19 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Computer Aided Verification"), "Aided Verification"), 
	IOExample(Dict{Symbol, Any}(:x => "Neural Information Processing Systems"), "Information Processing Systems"), 
	IOExample(Dict{Symbol, Any}(:x => "European Conference Artificial Intelligence"), "Conference Artificial Intelligence"), 
	IOExample(Dict{Symbol, Any}(:x => "British Machine Vision Conference"), "Machine Vision Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "Algorithmic Learning Theory"), "Learning Theory"), 
	IOExample(Dict{Symbol, Any}(:x => "Inductive Logic Programming"), "Logic Programming"), 
	IOExample(Dict{Symbol, Any}(:x => "Very Large Data Bases"), "Large Data Bases"), 
	IOExample(Dict{Symbol, Any}(:x => "Principles Of Programming Languages"), "Of Programming Languages"), 
	IOExample(Dict{Symbol, Any}(:x => "Design Automation Conference"), "Automation Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "International Semantic Web Conference"), "Semantic Web Conference")])
problem_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "@gill"), "gill"), 
	IOExample(Dict{Symbol, Any}(:x => "@harry"), "harry"), 
	IOExample(Dict{Symbol, Any}(:x => "@dave"), "dave"), 
	IOExample(Dict{Symbol, Any}(:x => "@fred"), "fred"), 
	IOExample(Dict{Symbol, Any}(:x => "@alice"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "@bob"), "bob"), 
	IOExample(Dict{Symbol, Any}(:x => "@ingrid"), "ingrid"), 
	IOExample(Dict{Symbol, Any}(:x => "@edith"), "edith"), 
	IOExample(Dict{Symbol, Any}(:x => "@carol"), "carol"), 
	IOExample(Dict{Symbol, Any}(:x => "@jeanne"), "jeanne")])
problem_200 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Huntington, West Virginia(WV), 25701"), "Zip: 25701"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Terre Haute, Indiana(IN), 47807"), "Zip: 47807"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: North St Paul, Minnesota(MN), 55109"), "Zip: 55109"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Houston, Texas(TX), 77587"), "Zip: 77587"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Las Vegas, Nevada(NV), 89109"), "Zip: 89109"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Princeton, New Jersey(NJ), 08540"), "Zip: 08540"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Conger, Minnesota(MN), 56020"), "Zip: 56020"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Chicago, Illinois(IL), 60606"), "Zip: 60606"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Bethpage, New York(NY), 11714"), "Zip: 11714"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: San Francisco, California(CA), 94143"), "Zip: 94143")])
problem_201 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Chicago, Illinois(IL), 60606"), "Chicago, Illinois, 60606"), 
	IOExample(Dict{Symbol, Any}(:x => "San Francisco, California(CA), 94143"), "San Francisco, California, 94143"), 
	IOExample(Dict{Symbol, Any}(:x => "Las Vegas, Nevada(NV), 89109"), "Las Vegas, Nevada, 89109"), 
	IOExample(Dict{Symbol, Any}(:x => "Terre Haute, Indiana(IN), 47807"), "Terre Haute, Indiana, 47807"), 
	IOExample(Dict{Symbol, Any}(:x => "Conger, Minnesota(MN), 56020"), "Conger, Minnesota, 56020"), 
	IOExample(Dict{Symbol, Any}(:x => "Huntington, West Virginia(WV), 25701"), "Huntington, West Virginia, 25701"), 
	IOExample(Dict{Symbol, Any}(:x => "Bethpage, New York(NY), 11714"), "Bethpage, New York, 11714"), 
	IOExample(Dict{Symbol, Any}(:x => "Houston, Texas(TX), 77587"), "Houston, Texas, 77587"), 
	IOExample(Dict{Symbol, Any}(:x => "Princeton, New Jersey(NJ), 08540"), "Princeton, New Jersey, 08540"), 
	IOExample(Dict{Symbol, Any}(:x => "North St Paul, Minnesota(MN), 55109"), "North St Paul, Minnesota, 55109")])
problem_202 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Proj\\'''''''''',,,,,,''''''''"), "Proj"), 
	IOExample(Dict{Symbol, Any}(:x => "/var/db/auth.db"), "/var/db/auth.db"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/bin/ncdu.exe"), "/usr/local/bin/ncdu.exe"), 
	IOExample(Dict{Symbol, Any}(:x => "Company\\''''',,,,,''''''''''"), "Company"), 
	IOExample(Dict{Symbol, Any}(:x => "/Users/jim/Downloads/pdf.pdf"), "/Users/jim/Downloads/pdf.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "Company\\''''',,,,,,,,,,]"), "Company"), 
	IOExample(Dict{Symbol, Any}(:x => "Work\\'''''''''''''',,,,,,,,]"), "Work"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/texlive/2017/doc.html"), "/usr/local/texlive/2017/doc.html"), 
	IOExample(Dict{Symbol, Any}(:x => "Work\\'''''''',,,,,''''''''''''"), "Work"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/Homebrew/CONTRIBUTING.md"), "/usr/local/Homebrew/CONTRIBUTING.md")])
problem_203 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "7 Physical Review B 48,888 612,377"), "612,377"), 
	IOExample(Dict{Symbol, Any}(:x => "9 New England Journal of Medicine 3,564 568,698"), "568,698"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Journal of Biological Chemistry 54,695 1,652,432"), "1,652,432"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Nature 10,549 1,242,392"), "1,242,392"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Science 9,369 1,125,022"), "1,125,022"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Physical Review Letters 31,112 884,911"), "884,911"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Proc. Natl. Acad. Sci. USA (PNAS) 30,396 1,376,541"), "1,376,541"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Applied Physics Letters 36,759 549,224"), "549,224"), 
	IOExample(Dict{Symbol, Any}(:x => "6 J. American Chemical Society 29,272 881,457"), "881,457"), 
	IOExample(Dict{Symbol, Any}(:x => "8 Astrophysical Journal 26,418 581,299"), "581,299")])
problem_204 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1988 England Nigel Clough"), "N Clough"), 
	IOExample(Dict{Symbol, Any}(:x => "1987 England Des Walker"), "D Walker"), 
	IOExample(Dict{Symbol, Any}(:x => "1986 England Nigel Clough"), "N Clough"), 
	IOExample(Dict{Symbol, Any}(:x => "1991 England Stuart Pearce"), "S Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "1994 Wales David Phillips"), "D Phillips"), 
	IOExample(Dict{Symbol, Any}(:x => "1993 England Steve Sutton"), "S Sutton"), 
	IOExample(Dict{Symbol, Any}(:x => "1990 England Des Walker"), "D Walker"), 
	IOExample(Dict{Symbol, Any}(:x => "1992 England Des Walker"), "D Walker"), 
	IOExample(Dict{Symbol, Any}(:x => "1989 England Stuart Pearce"), "S Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "1996 England Stuart Pearce"), "S Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "1995 England Steve Stone"), "S Stone")])
problem_205 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Stuart Pearce 20 Dec 1996 8 May 1997"), "S Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "Billy Davies 7 Feb 2013 24 Mar 2014"), "B Davies"), 
	IOExample(Dict{Symbol, Any}(:x => "David Platt 1 Jul 1999 12 Jul 2001"), "D Platt"), 
	IOExample(Dict{Symbol, Any}(:x => "Paul Hart 12 Jul 2001 7 Feb 2004"), "P Hart"), 
	IOExample(Dict{Symbol, Any}(:x => "Frank Clark 13 May 1993 19 Dec 1996"), "F Clark"), 
	IOExample(Dict{Symbol, Any}(:x => "Ron Atkinson 11 Jan 1999 16 May 1999"), "R Atkinson"), 
	IOExample(Dict{Symbol, Any}(:x => "Dave Bassett 8 May 1997 5 Jan 1999"), "D Bassett"), 
	IOExample(Dict{Symbol, Any}(:x => "Brian Clough 3 Jan 1975 8 May 1993"), "B Clough"), 
	IOExample(Dict{Symbol, Any}(:x => "Philippe Montanier 27 June 2016 14 Jan 2017"), "P Montanier"), 
	IOExample(Dict{Symbol, Any}(:x => "Micky Adams 5 Jan 1999 11 Jan 1999"), "M Adams")])
problem_206 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Brian Clough 3 Jan 1975 8 May 1993"), "Clough"), 
	IOExample(Dict{Symbol, Any}(:x => "Ron Atkinson 11 Jan 1999 16 May 1999"), "Atkinson"), 
	IOExample(Dict{Symbol, Any}(:x => "Paul Hart 12 Jul 2001 7 Feb 2004"), "Hart"), 
	IOExample(Dict{Symbol, Any}(:x => "Micky Adams 5 Jan 1999 11 Jan 1999"), "Adams"), 
	IOExample(Dict{Symbol, Any}(:x => "Stuart Pearce 20 Dec 1996 8 May 1997"), "Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "Frank Clark 13 May 1993 19 Dec 1996"), "Clark"), 
	IOExample(Dict{Symbol, Any}(:x => "Billy Davies 7 Feb 2013 24 Mar 2014"), "Davies"), 
	IOExample(Dict{Symbol, Any}(:x => "Philippe Montanier 27 June 2016 14 Jan 2017"), "Montanier"), 
	IOExample(Dict{Symbol, Any}(:x => "David Platt 1 Jul 1999 12 Jul 2001"), "Platt"), 
	IOExample(Dict{Symbol, Any}(:x => "Dave Bassett 8 May 1997 5 Jan 1999"), "Bassett")])
problem_207 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Philippe Montanier 27 June 2016 14 Jan 2017"), "Philippe Montanier 2016 2017"), 
	IOExample(Dict{Symbol, Any}(:x => "Dave Bassett 8 May 1997 5 Jan 1999"), "Dave Bassett 1997 1999"), 
	IOExample(Dict{Symbol, Any}(:x => "David Platt 1 Jul 1999 12 Jul 2001"), "David Platt 1999 2001"), 
	IOExample(Dict{Symbol, Any}(:x => "Brian Clough 3 Jan 1975 8 May 1993"), "Brian Clough 1975 1994"), 
	IOExample(Dict{Symbol, Any}(:x => "Billy Davies 7 Feb 2013 24 Mar 2014"), "Billy Davies 2013 2014"), 
	IOExample(Dict{Symbol, Any}(:x => "Ron Atkinson 11 Jan 1999 16 May 1999"), "Ron Atkinson 1999 1999"), 
	IOExample(Dict{Symbol, Any}(:x => "Micky Adams 5 Jan 1999 11 Jan 1999"), "Micky Adams 1999 1999"), 
	IOExample(Dict{Symbol, Any}(:x => "Frank Clark 13 May 1993 19 Dec 1996"), "Frank Clark 1993 1996"), 
	IOExample(Dict{Symbol, Any}(:x => "Stuart Pearce 20 Dec 1996 8 May 1997"), "Stuart Pearce 1996 1997"), 
	IOExample(Dict{Symbol, Any}(:x => "Paul Hart 12 Jul 2001 7 Feb 2004"), "Paul Hart 2001 2004")])
problem_208 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "jim.james@fas.harvard.edu"), "jim.james@FAS.HARVARD.EDU"), 
	IOExample(Dict{Symbol, Any}(:x => "thom.yorke@radiohead.com"), "thom.yorke@RADIOHEAD.COM"), 
	IOExample(Dict{Symbol, Any}(:x => "matthew.rosman@yahoo.com"), "matthew.rosman@YAHOO.COM"), 
	IOExample(Dict{Symbol, Any}(:x => "brent.harold@hotmail.com"), "brent.harold@HOTMAIL.COM"), 
	IOExample(Dict{Symbol, Any}(:x => "ruby.clinton@mit.edu"), "ruby.clinton@MIT.EDU"), 
	IOExample(Dict{Symbol, Any}(:x => "bob.smith@gmail.com"), "bob.smith@GMAIL.COM"), 
	IOExample(Dict{Symbol, Any}(:x => "jim.smith@gmail.com"), "jim.smith@GMAIL.COM"), 
	IOExample(Dict{Symbol, Any}(:x => "lisa.simpson@yahoo.com"), "lisa.simpson@YAHOO.COM"), 
	IOExample(Dict{Symbol, Any}(:x => "alan.turing@cam.ac.uk"), "alan.turing@CAM.AC.UK"), 
	IOExample(Dict{Symbol, Any}(:x => "alice.cooper@rock.com"), "alice.cooper@ROCK.COM")])
problem_209 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "11 England MF Ben Osborn"), "B Osborn"), 
	IOExample(Dict{Symbol, Any}(:x => "7 Scotland MF Liam Bridcutt"), "L Bridcutt"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Scotland MF Barrie McKay"), "B McKay"), 
	IOExample(Dict{Symbol, Any}(:x => "13 Scotland DF Danny Fox"), "F Fox"), 
	IOExample(Dict{Symbol, Any}(:x => "19 Wales FW Sam Jones"), "S Jones"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Algeria MF Adlene Guedioura"), "A Guedioura"), 
	IOExample(Dict{Symbol, Any}(:x => "14 England MF Matty Cash"), "M Cash"), 
	IOExample(Dict{Symbol, Any}(:x => "17 England FW Ben Brereton"), "B Brereton"), 
	IOExample(Dict{Symbol, Any}(:x => "4 England DF Michael Mancienne"), "M Mancienne"), 
	IOExample(Dict{Symbol, Any}(:x => "8 England MF Chris Cohen"), "C Cohen")])
problem_20 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "european conference artificial intelligence"), "Intelligence"), 
	IOExample(Dict{Symbol, Any}(:x => "computer aided verification"), "Verification"), 
	IOExample(Dict{Symbol, Any}(:x => "british machine vision conference"), "Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "very large data bases"), "Bases"), 
	IOExample(Dict{Symbol, Any}(:x => "algorithmic learning theory"), "Theory"), 
	IOExample(Dict{Symbol, Any}(:x => "design automation conference"), "Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "neural information processing systems"), "Systems"), 
	IOExample(Dict{Symbol, Any}(:x => "principles of programming languages"), "Languages"), 
	IOExample(Dict{Symbol, Any}(:x => "inductive logic programming"), "Programming"), 
	IOExample(Dict{Symbol, Any}(:x => "international semantic web conference"), "Conference")])
problem_210 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1996 England Stuart Pearce"), "1996 S Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "1995 England Steve Stone"), "1995 S Stone"), 
	IOExample(Dict{Symbol, Any}(:x => "1991 England Stuart Pearce"), "1991 S Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "1992 England Des Walker"), "1992 D Walker"), 
	IOExample(Dict{Symbol, Any}(:x => "1993 England Steve Sutton"), "1993 S Sutton"), 
	IOExample(Dict{Symbol, Any}(:x => "1990 England Des Walker"), "1990 D Walker"), 
	IOExample(Dict{Symbol, Any}(:x => "1986 England Nigel Clough"), "1986 N Clough"), 
	IOExample(Dict{Symbol, Any}(:x => "1994 Wales David Phillips"), "1994 D Phillips"), 
	IOExample(Dict{Symbol, Any}(:x => "1988 England Nigel Clough"), "1988 N Clough"), 
	IOExample(Dict{Symbol, Any}(:x => "1989 England Stuart Pearce"), "1989 S Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "1987 England Des Walker"), "1987 D Walker")])
problem_211 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Huntington, West Virginia(WV), 25701"), "Huntington, West Virginia, 25701"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Bethpage, New York(NY), 11714"), "Bethpage, New York, 11714"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Chicago, Illinois(IL), 60606"), "Chicago, Illinois, 60606"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Terre Haute, Indiana(IN), 47807"), "Terre Haute, Indiana, 47807"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Conger, Minnesota(MN), 56020"), "Conger, Minnesota, 56020"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Houston, Texas(TX), 77587"), "Houston, Texas, 77587"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: San Francisco, California(CA), 94143"), "San Francisco, California, 94143"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: North St Paul, Minnesota(MN), 55109"), "North St Paul, Minnesota, 55109"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Princeton, New Jersey(NJ), 08540"), "Princeton, New Jersey, 08540"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Las Vegas, Nevada(NV), 89109"), "Las Vegas, Nevada, 89109")])
problem_212 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Princeton, New Jersey(NJ), 08540"), "New Jersey"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Houston, Texas(TX), 77587"), "Texas"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Huntington, West Virginia(WV), 25701"), "West Virginia"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Bethpage, New York(NY), 11714"), "New York"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: North St Paul, Minnesota(MN), 55109"), "Minnesota"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Terre Haute, Indiana(IN), 47807"), "Indiana"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Las Vegas, Nevada(NV), 89109"), "Nevada"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: San Francisco, California(CA), 94143"), "California"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Chicago, Illinois(IL), 60606"), "Illinois"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Conger, Minnesota(MN), 56020"), "Minnesota")])
problem_213 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "CONSUELA (son)"), "Consuela (son)"), 
	IOExample(Dict{Symbol, Any}(:x => "MERRIDY (son)"), "Merridy (son)"), 
	IOExample(Dict{Symbol, Any}(:x => "MUNCEL (daughter)"), "Muncel (daughter)"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSTANTIA (son)"), "Constantia (son)"), 
	IOExample(Dict{Symbol, Any}(:x => "AGATHANGELOS (daughter)"), "Agathangelos (daughter)"), 
	IOExample(Dict{Symbol, Any}(:x => "CORONA (son)"), "Corona (son)"), 
	IOExample(Dict{Symbol, Any}(:x => "BORNA (daughter)"), "Borna (daughter)"), 
	IOExample(Dict{Symbol, Any}(:x => "JOE (brother)"), "Joe (brother)"), 
	IOExample(Dict{Symbol, Any}(:x => "TULLIO (daughter)"), "Tullio (daughter)"), 
	IOExample(Dict{Symbol, Any}(:x => "OMA (daughter)"), "Oma (daughter)")])
problem_214 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "TULLIO (daughter)"), "Tullio (DAUGHTER)"), 
	IOExample(Dict{Symbol, Any}(:x => "MERRIDY (son)"), "Merridy (SON)"), 
	IOExample(Dict{Symbol, Any}(:x => "OMA (daughter)"), "Oma (DAUGHTER)"), 
	IOExample(Dict{Symbol, Any}(:x => "BORNA (daughter)"), "Borna (DAUGHTER)"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSUELA (son)"), "Consuela (SON)"), 
	IOExample(Dict{Symbol, Any}(:x => "JOE (brother)"), "Joe (BROTHER)"), 
	IOExample(Dict{Symbol, Any}(:x => "MUNCEL (daughter)"), "Muncel (DAUGHTER)"), 
	IOExample(Dict{Symbol, Any}(:x => "AGATHANGELOS (daughter)"), "Agathangelos (DAUGHTER)"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSTANTIA (son)"), "Constantia (SON)"), 
	IOExample(Dict{Symbol, Any}(:x => "CORONA (son)"), "Corona (SON)")])
problem_215 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3 Greg LeMond (USA)"), "USA"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Alberto Contador (ESP)"), "ESP"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Chris Froome (GBR)"), "GBR"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Fausto Coppi (ITA)"), "ITA"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Philippe Thys (BEL)"), "BEL"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Jacques Anquetil (FRA)"), "FRA"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Eddy Merckx (BEL)"), "BEL"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Bernard Hinault (FRA)"), "FRA"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Louison Bobet (FRA)"), "FRA"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Miguel Indurain (ESP)"), "ESP")])
problem_216 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3 Louison Bobet (FRA)"), "L Bobet"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Miguel Indurain (ESP)"), "M Indurain"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Greg LeMond (USA)"), "G LeMond"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Eddy Merckx (BEL)"), "E Merckx"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Fausto Coppi (ITA)"), "F Coppi"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Philippe Thys (BEL)"), "P Thys"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Jacques Anquetil (FRA)"), "J Anquetil"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Bernard Hinault (FRA)"), "B Hinault"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Chris Froome (GBR)"), "C Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Alberto Contador (ESP)"), "A Contador")])
problem_217 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5 Eddy Merckx (BEL)"), "E Merckx (BEL)"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Philippe Thys (BEL)"), "P Thys (BEL)"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Louison Bobet (FRA)"), "L Bobet (FRA)"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Bernard Hinault (FRA)"), "B Hinault (FRA)"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Greg LeMond (USA)"), "G LeMond (USA)"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Fausto Coppi (ITA)"), "F Coppi (ITA)"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Miguel Indurain (ESP)"), "M Indurain (ESP)"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Alberto Contador (ESP)"), "A Contador (ESP)"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Jacques Anquetil (FRA)"), "J Anquetil (FRA)"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Chris Froome (GBR)"), "C Froome (GBR)")])
problem_218 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "my name is albert"), "Albert"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is alice"), "Alice"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is john"), "John"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is laura"), "Jeanne"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is josh"), "Josh"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is richard"), "Richard"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is bill"), "Bill"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is bob"), "Bob"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is jeanne"), "Jeanne"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is charlie"), "Charlie")])
problem_219 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "mary gelman"), "M Gelman"), 
	IOExample(Dict{Symbol, Any}(:x => "AliCe HEEr"), "A Heer"), 
	IOExample(Dict{Symbol, Any}(:x => "IaN RoDny"), "I Rodny"), 
	IOExample(Dict{Symbol, Any}(:x => "miKe dwIGHT"), "M Dwight"), 
	IOExample(Dict{Symbol, Any}(:x => "MELVIN Julian"), "M Julian"), 
	IOExample(Dict{Symbol, Any}(:x => "BoB BAD"), "B Bad"), 
	IOExample(Dict{Symbol, Any}(:x => "CHArlie PEAnuts"), "C Peanuts"), 
	IOExample(Dict{Symbol, Any}(:x => "StaNleY TRAVis"), "S Travis"), 
	IOExample(Dict{Symbol, Any}(:x => "DAVE daviD"), "D David"), 
	IOExample(Dict{Symbol, Any}(:x => "LAUrA Love"), "L Love")])
problem_21 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Design Automation Conference"), "Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "Principles Of Programming Languages"), "Languages"), 
	IOExample(Dict{Symbol, Any}(:x => "Inductive Logic Programming"), "Programming"), 
	IOExample(Dict{Symbol, Any}(:x => "British Machine Vision Conference"), "Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "International Semantic Web Conference"), "Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "Computer Aided Verification"), "Verification"), 
	IOExample(Dict{Symbol, Any}(:x => "Neural Information Processing Systems"), "Systems"), 
	IOExample(Dict{Symbol, Any}(:x => "European Conference Artificial Intelligence"), "Intelligence"), 
	IOExample(Dict{Symbol, Any}(:x => "Very Large Data Bases"), "Bases"), 
	IOExample(Dict{Symbol, Any}(:x => "Algorithmic Learning Theory"), "Theory")])
problem_220 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Dr Montgomery Montgomery"), "Dr M Montgomery"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Spongebob Squarepants"), "Mr S Squarepants"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Harry Potter"), "Mr H Potter"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Minerva Mcgonagall"), "Professor M Mcgonagall"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Bernard Rieux"), "Dr B Rieux"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Hermione Granger"), "Ms H Granger"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Daenerys Targaryen"), "Ms D Targaryen"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Ray Stantz"), "Dr R Stantz"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Patrick Starfish"), "Mr P Starfish"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Severus Snape"), "Professor S Snape")])
problem_221 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Tom Gordon\", \"PHI\", \"Relief Pitcher\""), "Tom Gordon PHI Relief Pitcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jeff Mathis\", \"ANA\", \"Catcher\""), "Jeff Mathis ANA Catcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Mark Buehrle\", \"CWS\", \"Starting Pitcher\""), "Mark Buehrle CWS Starting Pitcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex Rodriguez\", \"NYY\", \"Third Baseman\""), "Alex Rodriguez NYY Third Baseman"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Kenji Johjima\", \"SEA\", \"Catcher\""), "Kenji Johjima SEA Catcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Barry Bonds\", \"SF\", \"Outfielder\""), "Barry Bonds SF Outfielder"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Scott Podsednik\", \"CWS\", \"Outfielder\""), "Scott Podsednik CWS Outfielder"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Vladimir Guerrero\", \"ANA\", \"Outfielder\""), "Vladimir Guerrero ANA Outfielder"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Roberto Novoa\", \"CHC\", \"Relief Pitcher\""), "Roberto Novoa CHC Relief Pitcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Albert Pujols\", \"STL\", \"First Baseman\""), "Albert Pujols STL First Baseman")])
problem_222 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<country>germany</country>"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>sweden</country>"), "Sweden"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>iceland</country>"), "Iceland"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>norway</country>"), "Norway"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>denmark</country>"), "Denmark"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>finland</country>"), "Finland"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>italy</country>"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>scotland</country>"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>france</country>"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>spain</country>"), "Spain")])
problem_223 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "IMG134141.jpg"), "img134141.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG1898.JPG"), "img1898.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "DGC1298.JPEG"), "dgc1298.jpeg"), 
	IOExample(Dict{Symbol, Any}(:x => "probs.txt"), "probs.txt"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG0972.mov"), "img0972.mov"), 
	IOExample(Dict{Symbol, Any}(:x => "results.py"), "results.py"), 
	IOExample(Dict{Symbol, Any}(:x => "test.sh"), "test.sh"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG13414.PNG"), "img13414.png"), 
	IOExample(Dict{Symbol, Any}(:x => "stack.txt"), "stack.txt"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG1298.JPEG"), "img1298.jpeg")])
problem_224 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "21 October,1943 (75 years old)"), "OCT"), 
	IOExample(Dict{Symbol, Any}(:x => "2 May,1941 (77 years old)"), "MAY"), 
	IOExample(Dict{Symbol, Any}(:x => "25 September,1980 (38 years old)"), "SEP"), 
	IOExample(Dict{Symbol, Any}(:x => "22 July,1983 (35 years old)"), "JUL"), 
	IOExample(Dict{Symbol, Any}(:x => "21 April,1965 (53 years old)"), "APR"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1947 (71 years old)"), "JUL"), 
	IOExample(Dict{Symbol, Any}(:x => "23 November,1954 (64 years old)"), "NOV"), 
	IOExample(Dict{Symbol, Any}(:x => "26 October,1998 (20 years old)"), "OCT"), 
	IOExample(Dict{Symbol, Any}(:x => "30 October,1955 (63 years old)"), "OCT"), 
	IOExample(Dict{Symbol, Any}(:x => "28 December,1958 (60 years old)"), "DEC")])
problem_225 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 8am-5pm"), "8-5"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 9am-10pm"), "9-10"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 8am-7pm"), "8-7"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 9am-6pm"), "9-6"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 9am-5pm"), "9-5"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 10am-1pm"), "10-1"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 10am-11pm"), "10-11"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 10am-10pm"), "10-10")])
problem_226 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''''"), "Implementation"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''"), "Background"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''"), "Discussion"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''"), "Theory"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''"), "Framework"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''''"), "Conclusions"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''''"), "Experiments"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''"), "Introduction"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''"), "Metagol"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''"), "Related work")])
problem_227 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ba mathematics"), "Mathematics"), 
	IOExample(Dict{Symbol, Any}(:x => "ba anthropology"), "Anthropology"), 
	IOExample(Dict{Symbol, Any}(:x => "ba philosophy, politics and economics"), "Philosophy, Politics and Economics"), 
	IOExample(Dict{Symbol, Any}(:x => "ba modern history"), "Modern History"), 
	IOExample(Dict{Symbol, Any}(:x => "ba french"), "French"), 
	IOExample(Dict{Symbol, Any}(:x => "ba media studies"), "Media Studies"), 
	IOExample(Dict{Symbol, Any}(:x => "ba geography"), "Geography"), 
	IOExample(Dict{Symbol, Any}(:x => "ba english"), "English"), 
	IOExample(Dict{Symbol, Any}(:x => "ba history"), "History"), 
	IOExample(Dict{Symbol, Any}(:x => "ba computer science"), "Computer Science")])
problem_228 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ba history"), "BA History"), 
	IOExample(Dict{Symbol, Any}(:x => "ba anthropology"), "Anthropology"), 
	IOExample(Dict{Symbol, Any}(:x => "ba philosophy, politics and economics"), "BA Philosophy, Politics and Economics"), 
	IOExample(Dict{Symbol, Any}(:x => "ba french"), "French"), 
	IOExample(Dict{Symbol, Any}(:x => "ba media studies"), "Media Studies"), 
	IOExample(Dict{Symbol, Any}(:x => "ba modern history"), "BA Modern History"), 
	IOExample(Dict{Symbol, Any}(:x => "ba mathematics"), "BA Mathematics"), 
	IOExample(Dict{Symbol, Any}(:x => "ba english"), "English"), 
	IOExample(Dict{Symbol, Any}(:x => "ba geography"), "BA Geography"), 
	IOExample(Dict{Symbol, Any}(:x => "ba computer science"), "BA Computer Science")])
problem_229 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "8 Astrophysical Journal 26,418 581,299"), "8 Astrophysical Journal"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Journal of Biological Chemistry 54,695 1,652,432"), "1 Journal of Biological Chemistry"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Science 9,369 1,125,022"), "4 Science"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Physical Review Letters 31,112 884,911"), "5 Physical Review Letters"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Applied Physics Letters 36,759 549,224"), "10 Applied Physics Letters"), 
	IOExample(Dict{Symbol, Any}(:x => "6 J. American Chemical Society 29,272 881,457"), "6 J. American Chemical Society"), 
	IOExample(Dict{Symbol, Any}(:x => "9 New England Journal of Medicine 3,564 568,698"), "9 New England Journal of Medicine"), 
	IOExample(Dict{Symbol, Any}(:x => "7 Physical Review B 48,888 612,377"), "7 Physical Review B"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Nature 10,549 1,242,392"), "3 Nature"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Proc. Natl. Acad. Sci. USA (PNAS) 30,396 1,376,541"), "2 Proc. Natl. Acad. Sci. USA (PNAS)")])
problem_22 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "european conference artificial intelligence"), "ECAI"), 
	IOExample(Dict{Symbol, Any}(:x => "principles of programming languages"), "POPL"), 
	IOExample(Dict{Symbol, Any}(:x => "very large data bases"), "VLDB"), 
	IOExample(Dict{Symbol, Any}(:x => "international semantic web conference"), "ISWC"), 
	IOExample(Dict{Symbol, Any}(:x => "british machine vision conference"), "BMVC"), 
	IOExample(Dict{Symbol, Any}(:x => "computer aided verification"), "CAV"), 
	IOExample(Dict{Symbol, Any}(:x => "neural information processing systems"), "NIPS"), 
	IOExample(Dict{Symbol, Any}(:x => "design automation conference"), "DAC"), 
	IOExample(Dict{Symbol, Any}(:x => "inductive logic programming"), "ILP"), 
	IOExample(Dict{Symbol, Any}(:x => "algorithmic learning theory"), "ALT")])
problem_230 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Claude Sammut: Concept Learning by Experiment. IJCAI 1981: 104-105"), "C Sammut"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Michie: Heuristic Search. Comput. J. 14(1): 96-102 (1971)"), "D Michie"), 
	IOExample(Dict{Symbol, Any}(:x => "Ivan Bratko: Machine learning in artificial intelligence. AI in Engineering 8(3): 159-164 (1993)"), "I Bratko"), 
	IOExample(Dict{Symbol, Any}(:x => "Stephen Muggleton: Inductive Logic Programming. ALT 1990: 42-62"), "S Muggleton"), 
	IOExample(Dict{Symbol, Any}(:x => "Andrew Cropper: Learning Efficient Logic Programs. IJCAI 2015: 4359-4360"), "A Cropper"), 
	IOExample(Dict{Symbol, Any}(:x => "Luc De Raedt: Panel: Logic and Learnability. EWSL 1991: 344"), "L De Raedt"), 
	IOExample(Dict{Symbol, Any}(:x => "Ute Schmid: KI und Informatik. KI 26(1): 1-4 (2012)"), "U Schmid"), 
	IOExample(Dict{Symbol, Any}(:x => "Hendrik Blockeel: Top-Down Induction of First Order Logical Decision Trees. AI Commun. 12(1-2): 119-120 (1999)"), "H Blockeel"), 
	IOExample(Dict{Symbol, Any}(:x => "Michael Bain: Experiments in Non-Monotonic Learning. ML 1991: 380-384"), "M Bain"), 
	IOExample(Dict{Symbol, Any}(:x => "Katsumi Inoue: Extended Logic Programs with Default Assumptions. ICLP 1991: 490-504"), "K Inoue")])
problem_231 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "43 england mark warburton"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "39 scotland dougie freedman"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "71 england nigel clough"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "45 spain aitor karanka"), "Spain"), 
	IOExample(Dict{Symbol, Any}(:x => "42 england gary brazil"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "38 england stuart pearce"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "35 england rob kelly"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "34 scotland alex mcleish"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "41 france philippe montanier"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "36 scotland billy davies"), "Scotland")])
problem_232 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "beijing, china: 27.7 million people"), "Beijing, China"), 
	IOExample(Dict{Symbol, Any}(:x => "london, uk: 8.136 million people"), "London, UK"), 
	IOExample(Dict{Symbol, Any}(:x => "shanghai, china: 30.8 million people"), "Shanghai, China"), 
	IOExample(Dict{Symbol, Any}(:x => "delhi, india: 36.1 million people"), "Delhi, India"), 
	IOExample(Dict{Symbol, Any}(:x => "dhaka, bangladesh: 27.4 million people"), "Dhaka, Bangladesh"), 
	IOExample(Dict{Symbol, Any}(:x => "karachi, pakistan: 24.8 million people"), "Karachi, Pakistan"), 
	IOExample(Dict{Symbol, Any}(:x => "new york, usa: 8.26 million people"), "New York, USA"), 
	IOExample(Dict{Symbol, Any}(:x => "tokyo, japan: 37.2 million people"), "Tokyo, Japan"), 
	IOExample(Dict{Symbol, Any}(:x => "cairo, egypt: 24.5 million people"), "Cairo, Egypt"), 
	IOExample(Dict{Symbol, Any}(:x => "mumbai, india: 27.8 million people"), "Mumbai, India")])
problem_233 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5127 1743 3998 9394, 01/20, 588, Gilbertha Stamey, MasterCard"), "G Stamey"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4136 7761 5496, 05/20, 505, Devell Blaisdell, MasterCard"), "D Blaisdell"), 
	IOExample(Dict{Symbol, Any}(:x => "5121 6409 6639 2751, 11/20, 275, Wioleta Sheffer, MasterCard"), "W Sheffer"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1040 5693 1652, 07/21, 177, Holli Claxton, MasterCard"), "H Claxton"), 
	IOExample(Dict{Symbol, Any}(:x => "5520 7165 1105 8274, 04/22, 705, Emina Burkley, MasterCard"), "E Burkley"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7150 6827 2113, 06/21, 130, Sariel Reale, MasterCard"), "S Reale"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4823 6957 8278, 06/22, 231, Affonso Tousignant, MasterCard"), "A Tousignant"), 
	IOExample(Dict{Symbol, Any}(:x => "5323 5254 7005 2676, 07/23, 627, Simmona Elzey, MasterCard"), "G Elzey"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3677 2397 0897, 12/20, 710, Fulk Sharkey, MasterCard"), "F Sharkey"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7317 7561 0495, 12/23, 207, Deval O'Donnell, MasterCard"), "D O'Donnell")])
problem_234 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5520 7165 1105 8274, 04/22, 705, Emina Burkley, MasterCard"), "5520 7165 1105 8274"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3677 2397 0897, 12/20, 710, Fulk Sharkey, MasterCard"), "5404 3677 2397 0897"), 
	IOExample(Dict{Symbol, Any}(:x => "5121 6409 6639 2751, 11/20, 275, Wioleta Sheffer, MasterCard"), "5121 6409 6639 2751"), 
	IOExample(Dict{Symbol, Any}(:x => "5127 1743 3998 9394, 01/20, 588, Gilbertha Stamey, MasterCard"), "5127 1743 3998 9394"), 
	IOExample(Dict{Symbol, Any}(:x => "5323 5254 7005 2676, 07/23, 627, Simmona Elzey, MasterCard"), "5323 5254 7005 2676"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7317 7561 0495, 12/23, 207, Deval O'Donnell, MasterCard"), "5315 7317 7561 0495"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7150 6827 2113, 06/21, 130, Sariel Reale, MasterCard"), "5315 7150 6827 2113"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1040 5693 1652, 07/21, 177, Holli Claxton, MasterCard"), "5405 1040 5693 1652"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4823 6957 8278, 06/22, 231, Affonso Tousignant, MasterCard"), "5137 4823 6957 8278"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4136 7761 5496, 05/20, 505, Devell Blaisdell, MasterCard"), "5218 4136 7761 5496")])
problem_235 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5323 5254 7005 2676, 07/23, 627, Simmona Elzey, MasterCard"), "5323525470052676"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7150 6827 2113, 06/21, 130, Sariel Reale, MasterCard"), "5315715068272113"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7317 7561 0495, 12/23, 207, Deval O'Donnell, MasterCard"), "5315731775610495"), 
	IOExample(Dict{Symbol, Any}(:x => "5127 1743 3998 9394, 01/20, 588, Gilbertha Stamey, MasterCard"), "5127174339989394"), 
	IOExample(Dict{Symbol, Any}(:x => "5121 6409 6639 2751, 11/20, 275, Wioleta Sheffer, MasterCard"), "5121640966392751"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4136 7761 5496, 05/20, 505, Devell Blaisdell, MasterCard"), "5218413677615496"), 
	IOExample(Dict{Symbol, Any}(:x => "5520 7165 1105 8274, 04/22, 705, Emina Burkley, MasterCard"), "5520716511058274"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1040 5693 1652, 07/21, 177, Holli Claxton, MasterCard"), "5405104056931652"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4823 6957 8278, 06/22, 231, Affonso Tousignant, MasterCard"), "5137482369578278"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3677 2397 0897, 12/20, 710, Fulk Sharkey, MasterCard"), "5404367723970897")])
problem_236 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Slow-mo footage of our annual pancake race #pancakeday"), "#pancakeday"), 
	IOExample(Dict{Symbol, Any}(:x => "Sometimes you just can't find anywhere to park #oxfordproblems"), "#oxfordproblems"), 
	IOExample(Dict{Symbol, Any}(:x => "Twilight on a snowy OB quad #BestFromTheEast"), "#BestFromTheEast"), 
	IOExample(Dict{Symbol, Any}(:x => "Things have been getting a little spooky in the Hertford College library today... #Halloween"), "#Halloween"), 
	IOExample(Dict{Symbol, Any}(:x => "This trio of choux nuns found their way into our stunning chapel for Day 4 of #NationalBakingWeek"), "#NationalBakingWeek"), 
	IOExample(Dict{Symbol, Any}(:x => "Thanks to Joel Rabinowitz for the shot #snow #BeastFromTheEast"), "#BeastFromTheEast"), 
	IOExample(Dict{Symbol, Any}(:x => "It was a frosty morning atop the Sheldonian today #advent19"), "#advent19"), 
	IOExample(Dict{Symbol, Any}(:x => "Dydd Gwyl Dewi Hapus to all our Welsh alumni and friends #StDavidsDay"), "#StDavidsDay"), 
	IOExample(Dict{Symbol, Any}(:x => "Hertford looks pretty as a picture in the snow from up here #snow #BeastFromTheEast"), "#BeastFromTheEast"), 
	IOExample(Dict{Symbol, Any}(:x => "Twas the night before Christmas - #day24"), "#day24")])
problem_237 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Dave Bassett 8 May 1997 5 Jan 1999"), "Dave Bassett"), 
	IOExample(Dict{Symbol, Any}(:x => "Stuart Pearce 20 Dec 1996 8 May 1997"), "Stuart Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "Philippe Montanier 27 June 2016 14 Jan 2017"), "Philippe Montanier"), 
	IOExample(Dict{Symbol, Any}(:x => "David Platt 1 Jul 1999 12 Jul 2001"), "David Platt"), 
	IOExample(Dict{Symbol, Any}(:x => "Brian Clough 3 Jan 1975 8 May 1993"), "Brian Clough"), 
	IOExample(Dict{Symbol, Any}(:x => "Billy Davies 7 Feb 2013 24 Mar 2014"), "Billy Davies"), 
	IOExample(Dict{Symbol, Any}(:x => "Frank Clark 13 May 1993 19 Dec 1996"), "Frank Clark"), 
	IOExample(Dict{Symbol, Any}(:x => "Micky Adams 5 Jan 1999 11 Jan 1999"), "Micky Adams"), 
	IOExample(Dict{Symbol, Any}(:x => "Paul Hart 12 Jul 2001 7 Feb 2004"), "Paul Hart"), 
	IOExample(Dict{Symbol, Any}(:x => "Ron Atkinson 11 Jan 1999 16 May 1999"), "Ron Atkinson")])
problem_238 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "MERRIDY (son)"), "Merridy"), 
	IOExample(Dict{Symbol, Any}(:x => "MUNCEL (daughter)"), "Muncel"), 
	IOExample(Dict{Symbol, Any}(:x => "CORONA (son)"), "Corona"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSUELA (son)"), "Consuela"), 
	IOExample(Dict{Symbol, Any}(:x => "TULLIO (daughter)"), "Tullio"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSTANTIA (son)"), "Constantia"), 
	IOExample(Dict{Symbol, Any}(:x => "OMA (daughter)"), "Oma"), 
	IOExample(Dict{Symbol, Any}(:x => "JIM (brother)"), "Jim"), 
	IOExample(Dict{Symbol, Any}(:x => "BORNA (daughter)"), "Borna"), 
	IOExample(Dict{Symbol, Any}(:x => "AGATHANGELOS (daughter)"), "Agathangelos")])
problem_239 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "data-4.pl"), "data4.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-3.pl"), "data3.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-5.pl"), "data5.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-16.pl"), "data16.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-19.pl"), "data19.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-1.pl"), "data1.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-2.pl"), "data2.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-18.pl"), "data18.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-20.pl"), "data20.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-17.pl"), "data17.pl")])
problem_23 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1/1/2001"), "01"), 
	IOExample(Dict{Symbol, Any}(:x => "1/21/2001"), "01"), 
	IOExample(Dict{Symbol, Any}(:x => "1/1/01"), "01"), 
	IOExample(Dict{Symbol, Any}(:x => "5/5/1987"), "87"), 
	IOExample(Dict{Symbol, Any}(:x => "21/1/2001"), "01"), 
	IOExample(Dict{Symbol, Any}(:x => "27-05-1970"), "70"), 
	IOExample(Dict{Symbol, Any}(:x => "01-01-2000"), "00"), 
	IOExample(Dict{Symbol, Any}(:x => "2003-23-03"), "03"), 
	IOExample(Dict{Symbol, Any}(:x => "22.02.2002"), "02"), 
	IOExample(Dict{Symbol, Any}(:x => "26/6/2006"), "06")])
problem_240 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5.1K 8 Mar 09:15 03-framework.tex"), "03-framework.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "6.9K 28 Apr 2015 fig1-old.tex"), "fig1-old.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "345K 27 Apr 2015 ourbib15.bib"), "ourbib15.bib"), 
	IOExample(Dict{Symbol, Any}(:x => "6.5K 8 Mar 16:55 05-e1.tex"), "05-e1.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "125K 9 Mar 11:54 metaprob.pdf"), "metaprob.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "13K 31 Aug 2015 ijcai15.sty"), "ijcai15.sty"), 
	IOExample(Dict{Symbol, Any}(:x => "7.4K 7 Mar 11:12 04-imp.tex"), "04-imp.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "6.6K 9 Mar 09:11 02-related.tex"), "02-related.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "4.9K 25 Apr 2015 fig-e4.tex"), "fig-e4.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "32K 9 Mar 11:54 metaprob.log"), "metaprob.log")])
problem_241 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5.1K 8 Mar 09:15 03-framework.tex"), "5.1K"), 
	IOExample(Dict{Symbol, Any}(:x => "125K 9 Mar 11:54 metaprob.pdf"), "125K"), 
	IOExample(Dict{Symbol, Any}(:x => "6.9K 28 Apr 2015 fig1-old.tex"), "6.9K"), 
	IOExample(Dict{Symbol, Any}(:x => "13K 31 Aug 2015 ijcai15.sty"), "13K"), 
	IOExample(Dict{Symbol, Any}(:x => "32K 9 Mar 11:54 metaprob.log"), "32K"), 
	IOExample(Dict{Symbol, Any}(:x => "7.4K 7 Mar 11:12 04-imp.tex"), "7.4K"), 
	IOExample(Dict{Symbol, Any}(:x => "345K 27 Apr 2015 ourbib15.bib"), "345K"), 
	IOExample(Dict{Symbol, Any}(:x => "6.5K 8 Mar 16:55 05-e1.tex"), "6.5K"), 
	IOExample(Dict{Symbol, Any}(:x => "4.9K 25 Apr 2015 fig-e4.tex"), "4.9K"), 
	IOExample(Dict{Symbol, Any}(:x => "6.6K 9 Mar 09:11 02-related.tex"), "6.6K")])
problem_242 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "345K 27 Apr 2015 ourbib15.bib"), "345K 27 Apr 2015 ourbib15.bib"), 
	IOExample(Dict{Symbol, Any}(:x => "125K 9 Mar 11:54 metaprob.pdf"), "125K 9 Mar 11:54 metaprob.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "5.1K 8 Mar 09:15 03-framework.tex"), "5.1K 8 Mar 09:15 03-framework.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "4.9K 25 Apr 2015 fig-e4.tex"), "4.9K 25 Apr 2015 fig-e4.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "6.6K 9 Mar 09:11 02-related.tex"), "6.6K 9 Mar 09:11 02-related.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "7.4K 7 Mar 11:12 04-imp.tex"), "7.4K 7 Mar 11:12 04-imp.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "32K 9 Mar 11:54 metaprob.log"), "32K 9 Mar 11:54 metaprob.log"), 
	IOExample(Dict{Symbol, Any}(:x => "13K 31 Aug 2015 ijcai15.sty"), "13K 31 Aug 2015 ijcai15.sty"), 
	IOExample(Dict{Symbol, Any}(:x => "6.9K 28 Apr 2015 fig1-old.tex"), "6.9K 28 Apr 2015 fig1-old.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "6.5K 8 Mar 16:55 05-e1.tex"), "6.5K 8 Mar 16:55 05-e1.tex")])
problem_243 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "6.5K 8 Mar 16:55 05-e1.tex"), "8 Mar"), 
	IOExample(Dict{Symbol, Any}(:x => "32K 9 Mar 11:54 metaprob.log"), "9 Mar"), 
	IOExample(Dict{Symbol, Any}(:x => "125K 9 Mar 11:54 metaprob.pdf"), "9 Ma"), 
	IOExample(Dict{Symbol, Any}(:x => "13K 31 Aug 2015 ijcai15.sty"), "31 Aug"), 
	IOExample(Dict{Symbol, Any}(:x => "7.4K 7 Mar 11:12 04-imp.tex"), "7 Mar"), 
	IOExample(Dict{Symbol, Any}(:x => "6.9K 28 Apr 2015 fig1-old.tex"), "28 Apr"), 
	IOExample(Dict{Symbol, Any}(:x => "6.6K 9 Mar 09:11 02-related.tex"), "9 Mar"), 
	IOExample(Dict{Symbol, Any}(:x => "5.1K 8 Mar 09:15 03-framework.tex"), "8 Mar"), 
	IOExample(Dict{Symbol, Any}(:x => "345K 27 Apr 2015 ourbib15.bib"), "27 Apr"), 
	IOExample(Dict{Symbol, Any}(:x => "4.9K 25 Apr 2015 fig-e4.tex"), "25 Apr")])
problem_244 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "345K 27 Apr 2015 ourbib15.bib"), "345K ourbib15.bib"), 
	IOExample(Dict{Symbol, Any}(:x => "6.9K 28 Apr 2015 fig1-old.tex"), "6.9K fig1-old.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "125K 9 Mar 11:54 metaprob.pdf"), "125K metaprob.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "13K 31 Aug 2015 ijcai15.sty"), "13K ijcai15.sty"), 
	IOExample(Dict{Symbol, Any}(:x => "7.4K 7 Mar 11:12 04-imp.tex"), "7.4K 04-imp.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "32K 9 Mar 11:54 metaprob.log"), "32K metaprob.log"), 
	IOExample(Dict{Symbol, Any}(:x => "6.5K 8 Mar 16:55 05-e1.tex"), "6.5K 05-e1.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "4.9K 25 Apr 2015 fig-e4.tex"), "4.9K fig-e4.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "5.1K 8 Mar 09:15 03-framework.tex"), "5.1K 03-framework.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "6.6K 9 Mar 09:11 02-related.tex"), "6.6K 02-related.tex")])
problem_245 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "288B 10 Nov 10:59 writing"), "10 Nov 10:59"), 
	IOExample(Dict{Symbol, Any}(:x => "352B 10 Nov 10:58 theses"), "10 Nov 10:58"), 
	IOExample(Dict{Symbol, Any}(:x => "96B 10 Nov 10:58 ir"), "10 Nov 10:58"), 
	IOExample(Dict{Symbol, Any}(:x => "160B 10 Nov 10:58 maths"), "10 Nov 10:58"), 
	IOExample(Dict{Symbol, Any}(:x => "96B 10 Nov 10:58 machine-learning"), "10 Nov 10:58"), 
	IOExample(Dict{Symbol, Any}(:x => "96B 10 Nov 11:00 programming"), "10 Nov 11:00"), 
	IOExample(Dict{Symbol, Any}(:x => "256B 13 Nov 19:16 logic"), "13 Nov 19:16"), 
	IOExample(Dict{Symbol, Any}(:x => "192B 19 Dec 10:57 logic-programming"), "19 Dec 10:57"), 
	IOExample(Dict{Symbol, Any}(:x => "160B 28 Jan 13:18 ilp"), "28 Jan 13:18"), 
	IOExample(Dict{Symbol, Any}(:x => "160B 10 Nov 11:10 computer-science"), "10 Nov 11:10")])
problem_246 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "y,o,r,k"), "york"), 
	IOExample(Dict{Symbol, Any}(:x => "c,a,m,b,r,i,d,g,e"), "cambridge"), 
	IOExample(Dict{Symbol, Any}(:x => "p,a,r,i,s"), "paris"), 
	IOExample(Dict{Symbol, Any}(:x => "t,o,k,y,o"), "tokyo"), 
	IOExample(Dict{Symbol, Any}(:x => "m,a,n,c,h,e,s,t,e,r"), "manchester"), 
	IOExample(Dict{Symbol, Any}(:x => "o,x,f,o,r,d"), "oxford"), 
	IOExample(Dict{Symbol, Any}(:x => "l,o,n,d,o,n"), "london"), 
	IOExample(Dict{Symbol, Any}(:x => "n,o,t,t,i,n,g,h,a,m"), "nottingham"), 
	IOExample(Dict{Symbol, Any}(:x => "b,o,s,t,o,n"), "boston"), 
	IOExample(Dict{Symbol, Any}(:x => "d,e,r,b,y"), "derby")])
problem_247 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "b..o..s..t..o..n"), "boston"), 
	IOExample(Dict{Symbol, Any}(:x => "p..a..r..i..s"), "paris"), 
	IOExample(Dict{Symbol, Any}(:x => "o..x..f..o..r..d"), "oxford"), 
	IOExample(Dict{Symbol, Any}(:x => "t..o..k..y..o"), "tokyo"), 
	IOExample(Dict{Symbol, Any}(:x => "n..o..t..t..i..n..g..h..a..m"), "nottingham"), 
	IOExample(Dict{Symbol, Any}(:x => "y..o..r..k"), "york"), 
	IOExample(Dict{Symbol, Any}(:x => "d..e..r..b..y"), "derby"), 
	IOExample(Dict{Symbol, Any}(:x => "c..a..m..b..r..i..d..g..e"), "cambridge"), 
	IOExample(Dict{Symbol, Any}(:x => "l..o..n..d..o..n"), "london")])
problem_248 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "l.o.n.d.o.n"), "london"), 
	IOExample(Dict{Symbol, Any}(:x => "p..a..r..i..s"), "paris"), 
	IOExample(Dict{Symbol, Any}(:x => "o....x....f....o....r....d"), "oxford"), 
	IOExample(Dict{Symbol, Any}(:x => "t..o..k..y..o"), "tokyo"), 
	IOExample(Dict{Symbol, Any}(:x => "b.....o.....s.....t.....o.....n"), "boston"), 
	IOExample(Dict{Symbol, Any}(:x => "c....a....m....b....r....i....d....g....e"), "cambridge"), 
	IOExample(Dict{Symbol, Any}(:x => "b......o......s......t......o......n"), "boston"), 
	IOExample(Dict{Symbol, Any}(:x => "d.....e.....r.....b.....y"), "derby"), 
	IOExample(Dict{Symbol, Any}(:x => "y......o......r......k"), "york"), 
	IOExample(Dict{Symbol, Any}(:x => "n...o...t...t...i...n...g...h...a...m"), "nottingham")])
problem_249 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\$11.71"), "11.71"), 
	IOExample(Dict{Symbol, Any}(:x => "\$15.92(\$0.84 / 100 ml)"), "15.92"), 
	IOExample(Dict{Symbol, Any}(:x => "\$43.75(\$62.50 / l)"), "43.75"), 
	IOExample(Dict{Symbol, Any}(:x => "\$40.15(\$6.69 / 75 cl)"), "40.15"), 
	IOExample(Dict{Symbol, Any}(:x => "\$54.30"), "54.30"), 
	IOExample(Dict{Symbol, Any}(:x => "\$46.18(\$65.97 / l)"), "46.18"), 
	IOExample(Dict{Symbol, Any}(:x => "\$37.65(\$53.79 / l)"), "37.65"), 
	IOExample(Dict{Symbol, Any}(:x => "\$22.06(\$16.97 / kg)"), "22.06"), 
	IOExample(Dict{Symbol, Any}(:x => "\$215.84"), "215.84"), 
	IOExample(Dict{Symbol, Any}(:x => "\$29.99"), "29.99")])
problem_24 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1252010"), "2010"), 
	IOExample(Dict{Symbol, Any}(:x => "11152011"), "2011"), 
	IOExample(Dict{Symbol, Any}(:x => "26062006"), "2006"), 
	IOExample(Dict{Symbol, Any}(:x => "22021002"), "1002"), 
	IOExample(Dict{Symbol, Any}(:x => "1112011"), "2011"), 
	IOExample(Dict{Symbol, Any}(:x => "22022002"), "2002"), 
	IOExample(Dict{Symbol, Any}(:x => "12012011"), "2011"), 
	IOExample(Dict{Symbol, Any}(:x => "27051970"), "1970"), 
	IOExample(Dict{Symbol, Any}(:x => "01012001"), "2001"), 
	IOExample(Dict{Symbol, Any}(:x => "6222005"), "2005")])
problem_250 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "THOM.YORKE@RADIOHEAD.COM"), "Thom Yorke"), 
	IOExample(Dict{Symbol, Any}(:x => "MATTHEW.ROSMAN@YAHOO.COM"), "Matthew Rosman"), 
	IOExample(Dict{Symbol, Any}(:x => "BOB.SMITH@GMAIL.COM"), "Bob Smith"), 
	IOExample(Dict{Symbol, Any}(:x => "ALAN.TURING@CAM.AC.UK"), "Alan Turing"), 
	IOExample(Dict{Symbol, Any}(:x => "LISA.SIMPSON@YAHOO.COM"), "Lisa Simpson"), 
	IOExample(Dict{Symbol, Any}(:x => "RUBY.CLINTON@MIT.EDU"), "Ruby Clinton"), 
	IOExample(Dict{Symbol, Any}(:x => "BRENT.HAROLD@HOTMAIL.COM"), "Brent Harold"), 
	IOExample(Dict{Symbol, Any}(:x => "JIM.JAMES@FAS.HARVARD.EDU"), "Jim James"), 
	IOExample(Dict{Symbol, Any}(:x => "JIM.SMITH@GMAIL.COM"), "Jim Smith"), 
	IOExample(Dict{Symbol, Any}(:x => "ALICE.COOPER@ROCK.COM"), "Alice Cooper")])
problem_251 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "BRENT.HAROLD@HOTMAIL.COM"), "hotmail.com"), 
	IOExample(Dict{Symbol, Any}(:x => "ALAN.TURING@CAM.AC.UK"), "cam.ac.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "THOM.YORKE@RADIOHEAD.COM"), "radiohead.com"), 
	IOExample(Dict{Symbol, Any}(:x => "BOB.SMITH@GMAIL.COM"), "gmail.com"), 
	IOExample(Dict{Symbol, Any}(:x => "JIM.JAMES@FAS.HARVARD.EDU"), "fas.harvard.edu"), 
	IOExample(Dict{Symbol, Any}(:x => "MATTHEW.ROSMAN@YAHOO.COM"), "yahoo.com"), 
	IOExample(Dict{Symbol, Any}(:x => "JIM.SMITH@GMAIL.COM"), "gmail.com"), 
	IOExample(Dict{Symbol, Any}(:x => "ALICE.COOPER@ROCK.COM"), "rock.com"), 
	IOExample(Dict{Symbol, Any}(:x => "RUBY.CLINTON@MIT.EDU"), "mit.edu"), 
	IOExample(Dict{Symbol, Any}(:x => "LISA.SIMPSON@YAHOO.COM"), "yahoo.com")])
problem_252 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "brown4 #8b2323"), "#8b2323"), 
	IOExample(Dict{Symbol, Any}(:x => "SlateGray4 #6c7b8b"), "#6c7b8b"), 
	IOExample(Dict{Symbol, Any}(:x => "chocolate3 #cd661d"), "#cd661d"), 
	IOExample(Dict{Symbol, Any}(:x => "DodgerBlue4 #104e8b"), "#104e8b"), 
	IOExample(Dict{Symbol, Any}(:x => "PaleGreen2 #90ee90"), "#90ee90"), 
	IOExample(Dict{Symbol, Any}(:x => "DarkOliveGreen #556b2f"), "#556b2f"), 
	IOExample(Dict{Symbol, Any}(:x => "OrangeRed1 #ff4500"), "#ff4500"), 
	IOExample(Dict{Symbol, Any}(:x => "AntiqueWhite2 #eedfcc"), "#eedfcc"), 
	IOExample(Dict{Symbol, Any}(:x => "LightBlue1 #bfefff"), "#bfefff"), 
	IOExample(Dict{Symbol, Any}(:x => "DarkSlateGray3 #79cdcd"), "#79cdcd")])
problem_253 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Macclesfield Town v Barrow, 15:00 GMT (BBC Radio Cumbria)"), "Macclesfield Town v Barrow"), 
	IOExample(Dict{Symbol, Any}(:x => "Manchester United v Liverpool, 12:30 GMT (BBC Radio 5 live)"), "Manchester United v Liverpool"), 
	IOExample(Dict{Symbol, Any}(:x => "AFC Fylde v Aldershot Town, 15:00 GMT (BBC Surrey)"), "AFC Fylde v Aldershot Town"), 
	IOExample(Dict{Symbol, Any}(:x => "Chelsea v Crystal Palace, 17:30 GMT (BBC Radio London)"), "Chelsea v Crystal Palace"), 
	IOExample(Dict{Symbol, Any}(:x => "West Ham United v Burnley, 15:00 GMT (BBC Radio London)"), "West Ham United v Burnley"), 
	IOExample(Dict{Symbol, Any}(:x => "Gateshead v Maidenhead United, 15:00 GMT (BBC Radio Berkshire)"), "Gateshead v Maidenhead United"), 
	IOExample(Dict{Symbol, Any}(:x => "Woking v FC Halifax Town, 15:00 GMT (BBC Surrey)"), "Woking v FC Halifax Town"), 
	IOExample(Dict{Symbol, Any}(:x => "Newcastle v Southampton, 15:00 GMT, (BBC Radio 5 live)"), "Newcastle v Southampton"), 
	IOExample(Dict{Symbol, Any}(:x => "Hartlepool United v Boreham Wood, 15:00 GMT (BBC Tees)"), "Hartlepool United v Boreham Wood"), 
	IOExample(Dict{Symbol, Any}(:x => "Maidstone United v Torquay United, 15:00 GMT (BBC Radio Devon)"), "Maidstone United v Torquay United")])
problem_254 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "West Ham United v Burnley, 15:00 GMT (BBC Radio London)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Macclesfield Town v Barrow, 15:00 GMT (BBC Radio Cumbria)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Chelsea v Crystal Palace, 17:30 GMT (BBC Radio London)"), "17:30"), 
	IOExample(Dict{Symbol, Any}(:x => "AFC Fylde v Aldershot Town, 15:00 GMT (BBC Surrey)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Newcastle v Southampton, 15:00 GMT, (BBC Radio 5 live)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Hartlepool United v Boreham Wood, 15:00 GMT (BBC Tees)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Maidstone United v Torquay United, 15:00 GMT (BBC Radio Devon)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Gateshead v Maidenhead United, 15:00 GMT (BBC Radio Berkshire)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Woking v FC Halifax Town, 15:00 GMT (BBC Surrey)"), "15:00 GMT"), 
	IOExample(Dict{Symbol, Any}(:x => "Manchester United v Liverpool, 12:30 GMT (BBC Radio 5 live)"), "12:30")])
problem_255 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Newcastle v Southampton, 15:00 GMT, (BBC Radio 5 live)"), "BBC Radio 5 live"), 
	IOExample(Dict{Symbol, Any}(:x => "Manchester United v Liverpool, 12:30 GMT (BBC Radio 5 live)"), "BBC Radio 5 live"), 
	IOExample(Dict{Symbol, Any}(:x => "Woking v FC Halifax Town, 15:00 GMT (BBC Surrey)"), "BBC Surrey"), 
	IOExample(Dict{Symbol, Any}(:x => "Chelsea v Crystal Palace, 17:30 GMT (BBC Radio London)"), "BBC Radio London"), 
	IOExample(Dict{Symbol, Any}(:x => "Macclesfield Town v Barrow, 15:00 GMT (BBC Radio Cumbria)"), "BBC Radio Cumbria"), 
	IOExample(Dict{Symbol, Any}(:x => "Hartlepool United v Boreham Wood, 15:00 GMT (BBC Tees)"), "BBC Tees"), 
	IOExample(Dict{Symbol, Any}(:x => "Gateshead v Maidenhead United, 15:00 GMT (BBC Radio Berkshire)"), "BBC Radio Berkshire"), 
	IOExample(Dict{Symbol, Any}(:x => "West Ham United v Burnley, 15:00 GMT (BBC Radio London)"), "BBC Radio London"), 
	IOExample(Dict{Symbol, Any}(:x => "Maidstone United v Torquay United, 15:00 GMT (BBC Radio Devon)"), "BBC Radio Devon"), 
	IOExample(Dict{Symbol, Any}(:x => "AFC Fylde v Aldershot Town, 15:00 GMT (BBC Surrey)"), "BBC Surrey")])
problem_256 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Greece Olympic Stadium, Athens 3 1983, 1994, 2007"), "Olympic Stadium"), 
	IOExample(Dict{Symbol, Any}(:x => "Scotland Hampden Park, Glasgow 3 1960, 1976, 2002"), "Hampden Park"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy Stadio Olimpico, Rome 4 1977, 1984, 1996, 2009"), "Stadio Olimpico"), 
	IOExample(Dict{Symbol, Any}(:x => "Austria Ernst-Happel-Stadion, Vienna 4 1964, 1987, 1990, 1995"), "Ernst-Happel-Stadion"), 
	IOExample(Dict{Symbol, Any}(:x => "Spain Santiago Bernabeu Stadium, Madrid 4 1957, 1969, 1980, 2010"), "Santiago Bernabeu"), 
	IOExample(Dict{Symbol, Any}(:x => "England Wembley Stadium, London 7 1963, 1968, 1971, 1978, 1992, 2011, 2013"), "Wembley Stadium"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy San Siro, Milan 4 1965, 1970, 2001, 2016"), "San Siro"), 
	IOExample(Dict{Symbol, Any}(:x => "Belgium King Baudouin Stadium, Brussels 4 1958, 1966, 1974, 1985"), "King Baudouin Stadium"), 
	IOExample(Dict{Symbol, Any}(:x => "France Parc des Princes, Paris 3 1956, 1975, 1981"), "Parc des Princes"), 
	IOExample(Dict{Symbol, Any}(:x => "Germany Olympiastadion, Munich 3 1979, 1993, 1997"), "Olympiastadion")])
problem_257 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Italy San Siro, Milan 4 1965, 1970, 2001, 2016"), "Milan"), 
	IOExample(Dict{Symbol, Any}(:x => "Spain Santiago Bernabeu Stadium, Madrid 4 1957, 1969, 1980, 2010"), "Madrid"), 
	IOExample(Dict{Symbol, Any}(:x => "France Parc des Princes, Paris 3 1956, 1975, 1981"), "Paris"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy Stadio Olimpico, Rome 4 1977, 1984, 1996, 2009"), "Rome"), 
	IOExample(Dict{Symbol, Any}(:x => "Austria Ernst-Happel-Stadion, Vienna 4 1964, 1987, 1990, 1995"), "Vienna"), 
	IOExample(Dict{Symbol, Any}(:x => "Belgium King Baudouin Stadium, Brussels 4 1958, 1966, 1974, 1985"), "Brussels"), 
	IOExample(Dict{Symbol, Any}(:x => "Germany Olympiastadion, Munich 3 1979, 1993, 1997"), "Munich"), 
	IOExample(Dict{Symbol, Any}(:x => "Scotland Hampden Park, Glasgow 3 1960, 1976, 2002"), "Glasgow"), 
	IOExample(Dict{Symbol, Any}(:x => "England Wembley Stadium, London 7 1963, 1968, 1971, 1978, 1992, 2011, 2013"), "London"), 
	IOExample(Dict{Symbol, Any}(:x => "Greece Olympic Stadium, Athens 3 1983, 1994, 2007"), "Athens")])
problem_258 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Austria Ernst-Happel-Stadion, Vienna 4 1964, 1987, 1990, 1995"), "Ernst-Happel-Stadion, 4"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy Stadio Olimpico, Rome 4 1977, 1984, 1996, 2009"), "Stadio Olimpico, 4"), 
	IOExample(Dict{Symbol, Any}(:x => "France Parc des Princes, Paris 3 1956, 1975, 1981"), "Parc des Princes, 3"), 
	IOExample(Dict{Symbol, Any}(:x => "Spain Santiago Bernabeu Stadium, Madrid 4 1957, 1969, 1980, 2010"), "Santiago Bernabeu, 4"), 
	IOExample(Dict{Symbol, Any}(:x => "Belgium King Baudouin Stadium, Brussels 4 1958, 1966, 1974, 1985"), "King Baudouin Stadium, 4"), 
	IOExample(Dict{Symbol, Any}(:x => "Greece Olympic Stadium, Athens 3 1983, 1994, 2007"), "Olympic Stadium, 3"), 
	IOExample(Dict{Symbol, Any}(:x => "Scotland Hampden Park, Glasgow 3 1960, 1976, 2002"), "Hampden Park, 3"), 
	IOExample(Dict{Symbol, Any}(:x => "Germany Olympiastadion, Munich 3 1979, 1993, 1997"), "Olympiastadion, 3"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy San Siro, Milan 4 1965, 1970, 2001, 2016"), "San Siro, 4"), 
	IOExample(Dict{Symbol, Any}(:x => "England Wembley Stadium, London 7 1963, 1968, 1971, 1978, 1992, 2011, 2013"), "Wembley Stadium, 7")])
problem_259 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Italy San Siro, Milan 4 1965, 1970, 2001, 2016"), "1965, 1970, 2001, 2016"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy Stadio Olimpico, Rome 4 1977, 1984, 1996, 2009"), "1977, 1984, 1996, 2009"), 
	IOExample(Dict{Symbol, Any}(:x => "France Parc des Princes, Paris 3 1956, 1975, 1981"), "1956, 1975, 1981"), 
	IOExample(Dict{Symbol, Any}(:x => "Belgium King Baudouin Stadium, Brussels 4 1958, 1966, 1974, 1985"), "1958, 1966, 1974, 1985"), 
	IOExample(Dict{Symbol, Any}(:x => "Spain Santiago Bernabeu Stadium, Madrid 4 1957, 1969, 1980, 2010"), "1957, 1969, 1980, 2010"), 
	IOExample(Dict{Symbol, Any}(:x => "Austria Ernst-Happel-Stadion, Vienna 4 1964, 1987, 1990, 1995"), "1964, 1987, 1990, 1995"), 
	IOExample(Dict{Symbol, Any}(:x => "England Wembley Stadium, London 7 1963, 1968, 1971, 1978, 1992, 2011, 2013"), "1963, 1968, 1971, 1978, 1992, 2011, 2013"), 
	IOExample(Dict{Symbol, Any}(:x => "Scotland Hampden Park, Glasgow 3 1960, 1976, 2002"), "1960, 1976, 2002"), 
	IOExample(Dict{Symbol, Any}(:x => "Greece Olympic Stadium, Athens 3 1983, 1994, 2007"), "1983, 1994, 2007"), 
	IOExample(Dict{Symbol, Any}(:x => "Germany Olympiastadion, Munich 3 1979, 1993, 1997"), "1979, 1993, 1997")])
problem_25 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "alice5bob3"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "dave4edith5"), "4"), 
	IOExample(Dict{Symbol, Any}(:x => "edith5frank5"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "bob3charlie6"), "3"), 
	IOExample(Dict{Symbol, Any}(:x => "harry5inge4"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "frank5harry"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "inge4jeanne6"), "4"), 
	IOExample(Dict{Symbol, Any}(:x => "kat3laura5"), "3"), 
	IOExample(Dict{Symbol, Any}(:x => "charlie6dave4"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "jeanne6kat3"), "6")])
problem_260 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Austria Ernst-Happel-Stadion, Vienna 4 1964, 1987, 1990, 1995"), "Austria Ernst-Happel-Stadion, Vienna"), 
	IOExample(Dict{Symbol, Any}(:x => "Spain Santiago Bernabeu Stadium, Madrid 4 1957, 1969, 1980, 2010"), "Santiago Bernabeu Stadium, Madrid"), 
	IOExample(Dict{Symbol, Any}(:x => "England Wembley Stadium, London 7 1963, 1968, 1971, 1978, 1992, 2011, 2013"), "Wembley Stadium, London"), 
	IOExample(Dict{Symbol, Any}(:x => "Scotland Hampden Park, Glasgow 3 1960, 1976, 2002"), "Hampden Park, Glasgow"), 
	IOExample(Dict{Symbol, Any}(:x => "Greece Olympic Stadium, Athens 3 1983, 1994, 2007"), "Olympic Stadium, Athens"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy Stadio Olimpico, Rome 4 1977, 1984, 1996, 2009"), "Stadio Olimpico, Rome"), 
	IOExample(Dict{Symbol, Any}(:x => "Belgium King Baudouin Stadium, Brussels 4 1958, 1966, 1974, 1985"), "King Baudouin Stadium, Brussels"), 
	IOExample(Dict{Symbol, Any}(:x => "Germany Olympiastadion, Munich 3 1979, 1993, 1997"), "Olympiastadion, Munich"), 
	IOExample(Dict{Symbol, Any}(:x => "France Parc des Princes, Paris 3 1956, 1975, 1981"), "Parc des Princes, Paris"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy San Siro, Milan 4 1965, 1970, 2001, 2016"), "San Siro, Milan")])
problem_261 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1180 1240 Malmesbury Abbey Tower Malmesbury, UK 131.3 m"), "131.3"), 
	IOExample(Dict{Symbol, Any}(:x => "1880 1889 Tower of Cologne Cathedral Cologne, Germany 157.38 m"), "157.38"), 
	IOExample(Dict{Symbol, Any}(:x => "1311 1549 Tower of Lincoln Cathedral Lincoln, UK 159.7 m"), "159.7"), 
	IOExample(Dict{Symbol, Any}(:x => "1889 1958 Eiffel Tower Paris, France 312.3 m"), "312.3"), 
	IOExample(Dict{Symbol, Any}(:x => "1549 1647 Tower of St Mary's church Stralsund, Germany 151 m"), "151"), 
	IOExample(Dict{Symbol, Any}(:x => "1975 2010 CN Tower Toronto, Ontario, Canada 553.33 m"), "553.33"), 
	IOExample(Dict{Symbol, Any}(:x => "1240 1311 Tower of Old St Paul's Cathedral London, UK 150 m"), "150"), 
	IOExample(Dict{Symbol, Any}(:x => "1876 1880 Tower of Rouen Cathedral Rouen, France 151 m"), "151"), 
	IOExample(Dict{Symbol, Any}(:x => "1874 1876 Tower of St. Nikolai Hamburg, Germany 147 m"), "147"), 
	IOExample(Dict{Symbol, Any}(:x => "2010 2011 Canton Tower Guangzhou, China 600 m"), "600"), 
	IOExample(Dict{Symbol, Any}(:x => "1967 1975 Ostankino Tower Moscow, Russia 540.1 m"), "540.1"), 
	IOExample(Dict{Symbol, Any}(:x => "1958 1967 Tokyo Tower Tokyo, Japan 332.6 m"), "332.6"), 
	IOExample(Dict{Symbol, Any}(:x => "1647 1874 Tower of Strasbourg Cathedral Strasbourg, France 142 m"), "142")])
problem_262 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "4 Harold Macmillan 1957-1963 Conservative"), "Harold Macmillan Conservative"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Clement Attlee 1945-1951 Labour"), "Clement Attlee Labour"), 
	IOExample(Dict{Symbol, Any}(:x => "7 James Callaghan 1976-1979 Labour"), "James Callaghan Labour"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Tony Blair 1997-2007 Labour"), "Tony Blair Labour"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Margaret Thatcher 1979-1990 Conservative"), "Margaret Thatcher Conservative"), 
	IOExample(Dict{Symbol, Any}(:x => "6 Sir Winston Churchill (1940-1945), 1951-1955 Conservative"), "Sir Winston Churchill Conservative"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Gordon Brown 2007-2010 Labour"), "Gordon Brown Labour"), 
	IOExample(Dict{Symbol, Any}(:x => "8 John Major 1990-1997 Conservative"), "John Major Conservative"), 
	IOExample(Dict{Symbol, Any}(:x => "9 Edward Heath 1970-1974 Conservative"), "Edward Heath Conservative"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Harold Wilson 1964-1970, 1974-1976 Labour"), "Harold Wilson Labour")])
problem_263 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5 Harold Wilson 1964-1970, 1974-1976 Labour"), "Harold Wilson"), 
	IOExample(Dict{Symbol, Any}(:x => "8 John Major 1990-1997 Conservative"), "John Major"), 
	IOExample(Dict{Symbol, Any}(:x => "9 Edward Heath 1970-1974 Conservative"), "Edward Heath"), 
	IOExample(Dict{Symbol, Any}(:x => "6 Sir Winston Churchill (1940-1945), 1951-1955 Conservative"), "Sir Winston Churchill"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Gordon Brown 2007-2010 Labour"), "Gordon Brown"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Margaret Thatcher 1979-1990 Conservative"), "Margaret Thatcher"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Harold Macmillan 1957-1963 Conservative"), "Harold Macmillan"), 
	IOExample(Dict{Symbol, Any}(:x => "7 James Callaghan 1976-1979 Labour"), "James Callaghan"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Tony Blair 1997-2007 Labour"), "Tony Blair"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Clement Attlee 1945-1951 Labour"), "Clement Attlee")])
problem_264 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "ILP 2011, UK"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "ILP 2014, France"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "ILP 2013, Brazil"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "ILP 2007, USA"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "ILP 2008, Czech Republic"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "ILP 2016, UK"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "ILP 2009, Belgium"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "ILP 2010, Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "ILP 2015, Japan"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "ILP 2012, Croatia")])
problem_265 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "September 4-6, 2016"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "September 10-12, 2008"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "August 28-30, 2013"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "August 20-22, 2015"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "June 19-21, 2007"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "September 17-19, 2012"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "July 31 - August 3, 2011"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "June 27-30, 2010"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "July 02-04, 2009"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "September 14-16, 2014")])
problem_266 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2009\">21. IJCAI 2009: Pasadena, California, USA</h2>"), "IJCAI 2009, USA"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2001\">17. IJCAI 2001: Seattle, USA</h2>"), "IJCAI 2001, USA"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2007\">20. IJCAI 2007: Hyderabad, India</h2>"), "IJCAI 2007, India"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2017\">26. IJCAI 2017: Melbourne, VIC, Australia</h2>"), "IJCAI 2017, Australia"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2003\">18. IJCAI 2003: Acapulco, Mexico</h2>"), "IJCAI 2003, Mexico"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2005\">19. IJCAI 2005: Edinburgh, Scotland, UK</h2>"), "IJCAI 2005, UK"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2016\">25. IJCAI 2016: New York, NY, USA</h2>"), "IJCAI 2016, USA"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2013\">23. IJCAI 2013: Beijing, China</h2>"), "IJCAI 2013, China"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2015\">24. IJCAI 2015: Buenos Aires, Argentina</h2>"), "IJCAI 2015, Argentina"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2011\">22. IJCAI 2011: Barcelona, Catalonia, Spain</h2>"), "IJCAI 2011, Spain")])
problem_267 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "About 37,400,000 results (0.52 seconds)"), "37,400,000 0.52"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,090,000 results (0.90 seconds)"), "5,090,000 0.90"), 
	IOExample(Dict{Symbol, Any}(:x => "About 299,000 results (0.57 seconds)"), "299,000 0.57"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,320,000 results (0.63 seconds)"), "5,320,000 0.63"), 
	IOExample(Dict{Symbol, Any}(:x => "About 8,630,000 results (0.50 seconds)"), "8,630,000 0.50"), 
	IOExample(Dict{Symbol, Any}(:x => "About 520,000 results (0.59 seconds)"), "520,000 0.59"), 
	IOExample(Dict{Symbol, Any}(:x => "About 31,900,000 results (0.70 seconds)"), "31,900,000 0.70"), 
	IOExample(Dict{Symbol, Any}(:x => "About 6,240,000 results (0.65 seconds)"), "6,240,000 0.65"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,620,000 results (0.66 seconds)"), "1,620,000 0.66"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,390,000 results (0.70 seconds)"), "1,390,000 0.70")])
problem_268 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2012 Great Britain Bradley Wiggins"), "2012 B Wiggins"), 
	IOExample(Dict{Symbol, Any}(:x => "2007 Spain Alberto Contador"), "2007 A Contador"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Spain Carlos Sastre"), "2008 C Sastre"), 
	IOExample(Dict{Symbol, Any}(:x => "2010 Luxembourg Andy Schleck"), "2010 A Schleck"), 
	IOExample(Dict{Symbol, Any}(:x => "2013 Great Britain Chris Froome"), "2013 C Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "2011 Australia Cadel Evans"), "2011 C Evans"), 
	IOExample(Dict{Symbol, Any}(:x => "2015 Great Britain Chris Froome"), "2015 C Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "2016 Great Britain Chris Froome"), "2016 C Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "2017 Great Britain Chris Froome"), "2017 C Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "2009 Spain Alberto Contador"), "2009 A Contador"), 
	IOExample(Dict{Symbol, Any}(:x => "2014 Italy Vincenzo Nibali"), "2014 V Nibali")])
problem_269 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3,540 km (2,200 mi) 86h 20' 55\""), "2,200"), 
	IOExample(Dict{Symbol, Any}(:x => "3,430 km (2,130 mi) 86h 12' 22\""), "2,130"), 
	IOExample(Dict{Symbol, Any}(:x => "3,496 km (2,172 mi) 87h 34' 47\""), "2,172"), 
	IOExample(Dict{Symbol, Any}(:x => "3,404 km (2,115 mi) 83h 56' 20\""), "2,115"), 
	IOExample(Dict{Symbol, Any}(:x => "3,529 km (2,193 mi) 89h 04' 48\""), "2,193"), 
	IOExample(Dict{Symbol, Any}(:x => "3,570 km (2,220 mi) 91h 00' 26\""), "2,220"), 
	IOExample(Dict{Symbol, Any}(:x => "3,459 km (2,149 mi) 85h 48' 35\""), "2,149"), 
	IOExample(Dict{Symbol, Any}(:x => "3,559 km (2,211 mi) 87h 52' 52\""), "2,211"), 
	IOExample(Dict{Symbol, Any}(:x => "3,660 km (2,274 mi) 89h 59' 06\""), "2,274"), 
	IOExample(Dict{Symbol, Any}(:x => "3,360 km (2,088 mi) 84h 46' 14\""), "2,088")])
problem_26 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "AliCe"), "Alice"), 
	IOExample(Dict{Symbol, Any}(:x => "mary"), "Mary"), 
	IOExample(Dict{Symbol, Any}(:x => "lAUrA"), "Laura"), 
	IOExample(Dict{Symbol, Any}(:x => "BoB"), "Bob"), 
	IOExample(Dict{Symbol, Any}(:x => "StaNleY"), "Stanley"), 
	IOExample(Dict{Symbol, Any}(:x => "MELVIN"), "Melvin"), 
	IOExample(Dict{Symbol, Any}(:x => "DAVE"), "Dave"), 
	IOExample(Dict{Symbol, Any}(:x => "IaN"), "Ian"), 
	IOExample(Dict{Symbol, Any}(:x => "miKe"), "Mike"), 
	IOExample(Dict{Symbol, Any}(:x => "CHArlie"), "Charlie")])
problem_270 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "/var/db/auth.db"), "db"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/texlive/2017/doc.html"), "html"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/bin/ncdu.exe"), "exe"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/Homebrew/CONTRIBUTING.md"), "md"), 
	IOExample(Dict{Symbol, Any}(:x => "/Company/Code/index.html"), "html"), 
	IOExample(Dict{Symbol, Any}(:x => "/Users/jim/Downloads/pdf.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "/Work/Presentations/talk.ppt"), "ppt"), 
	IOExample(Dict{Symbol, Any}(:x => "/Work/Records/2010/January.dat"), "dat"), 
	IOExample(Dict{Symbol, Any}(:x => "/Company/Docs/Spec/specs.doc"), "doc"), 
	IOExample(Dict{Symbol, Any}(:x => "/Proj/Numerical/Simulators/NBody/nbody.c"), "c")])
problem_271 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2015 great britain chris froome"), "2015 Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "2009 spain alberto contador"), "2009 Contador"), 
	IOExample(Dict{Symbol, Any}(:x => "2007 spain alberto contador"), "2007 Contador"), 
	IOExample(Dict{Symbol, Any}(:x => "2014 italy vincenzo nibali"), "2014 Nibali"), 
	IOExample(Dict{Symbol, Any}(:x => "2016 great britain chris froome"), "2016 Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "2012 great britain bradley wiggins"), "2012 Wiggins"), 
	IOExample(Dict{Symbol, Any}(:x => "2011 australia cadel evans"), "2011 Evans"), 
	IOExample(Dict{Symbol, Any}(:x => "2017 great britain chris froome"), "2017 Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "2010 luxembourg andy schleck"), "2010 Schleck"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 spain carlos sastre"), "2008 Sastre"), 
	IOExample(Dict{Symbol, Any}(:x => "2013 great britain chris froome"), "2013 Froome")])
problem_272 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2013 great britain chris froome"), "Great Britain"), 
	IOExample(Dict{Symbol, Any}(:x => "2010 luxembourg andy schleck"), "Luxembourg"), 
	IOExample(Dict{Symbol, Any}(:x => "2012 great britain bradley wiggins"), "Great Britain"), 
	IOExample(Dict{Symbol, Any}(:x => "2014 italy vincenzo nibali"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 spain carlos sastre"), "Spain"), 
	IOExample(Dict{Symbol, Any}(:x => "2017 great britain chris froome"), "Great Britain"), 
	IOExample(Dict{Symbol, Any}(:x => "2009 spain alberto contador"), "Spain"), 
	IOExample(Dict{Symbol, Any}(:x => "2016 great britain chris froome"), "Great Britain"), 
	IOExample(Dict{Symbol, Any}(:x => "2015 great britain chris froome"), "Great Britain"), 
	IOExample(Dict{Symbol, Any}(:x => "2007 spain alberto contador"), "Spain"), 
	IOExample(Dict{Symbol, Any}(:x => "2011 australia cadel evans"), "2011 Australia")])
problem_273 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "matthew.rosman@yahoo.com"), "@matthewrosman"), 
	IOExample(Dict{Symbol, Any}(:x => "brent.harold@hotmail.com"), "@brentharold"), 
	IOExample(Dict{Symbol, Any}(:x => "bob.smith@gmail.com"), "@bobsmith"), 
	IOExample(Dict{Symbol, Any}(:x => "alice.cooper@rock.com"), "@alicecooper"), 
	IOExample(Dict{Symbol, Any}(:x => "lisa.simpson@yahoo.com"), "@lisasimpson"), 
	IOExample(Dict{Symbol, Any}(:x => "ruby.clinton@mit.edu"), "@rubyclinton"), 
	IOExample(Dict{Symbol, Any}(:x => "jim.james@fas.harvard.edu"), "@jimjames"), 
	IOExample(Dict{Symbol, Any}(:x => "thom.yorke@radiohead.com"), "@thomyorke"), 
	IOExample(Dict{Symbol, Any}(:x => "jim.smith@gmail.com"), "@jimsmith"), 
	IOExample(Dict{Symbol, Any}(:x => "alan.turing@cam.ac.uk"), "@alanturing")])
problem_274 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Slapstick (1976)"), "Slapstick, 1976"), 
	IOExample(Dict{Symbol, Any}(:x => "Player Piano (1952)"), "Player Piano, 1952"), 
	IOExample(Dict{Symbol, Any}(:x => "Cat's Cradle (1963)"), "Cat's Cradle, 1963"), 
	IOExample(Dict{Symbol, Any}(:x => "Galapagos (1985)"), "Galapagos, 1985"), 
	IOExample(Dict{Symbol, Any}(:x => "Breakfast of Champions (1973)"), "Breakfast of Champions, 1973"), 
	IOExample(Dict{Symbol, Any}(:x => "Mother Night (1961)"), "Mother Night, 1961"), 
	IOExample(Dict{Symbol, Any}(:x => "Deadeye Dick (1982)"), "Deadeye Dick, 1982"), 
	IOExample(Dict{Symbol, Any}(:x => "Jailbird (1979)"), "Jailbird, 1979"), 
	IOExample(Dict{Symbol, Any}(:x => "The Sirens of Titan (1959)"), "The Sirens of Titan, 1959"), 
	IOExample(Dict{Symbol, Any}(:x => "Slaughterhouse-Five (1969)"), "Slaughterhouse-Five, 1969")])
problem_275 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "David is 22 and weights 72kg"), "22, 72kg"), 
	IOExample(Dict{Symbol, Any}(:x => "Alice is 39 and weights 56kg"), "39, 56kg"), 
	IOExample(Dict{Symbol, Any}(:x => "Charlie is 12 and weights 48kg"), "12, 48kg"), 
	IOExample(Dict{Symbol, Any}(:x => "Bob is 65 and weights 65kg"), "65, 65kg"), 
	IOExample(Dict{Symbol, Any}(:x => "Gerry is 56 and weights 95kg"), "56, 95kg"), 
	IOExample(Dict{Symbol, Any}(:x => "Julie is 28 and weights 49kg"), "28, 49kg"), 
	IOExample(Dict{Symbol, Any}(:x => "Inge is 42 and weights 70kg"), "52, 70kg"), 
	IOExample(Dict{Symbol, Any}(:x => "Edith is 82 and weights 49kg"), "82, 49kg"), 
	IOExample(Dict{Symbol, Any}(:x => "Harry is 24 and weights 70kg"), "24, 70kg"), 
	IOExample(Dict{Symbol, Any}(:x => "Fred is 50 and weights 50kg"), "50, 50kg")])
problem_276 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "7 Scotland MF Liam Bridcutt"), "7, Bridcutt"), 
	IOExample(Dict{Symbol, Any}(:x => "17 England FW Ben Brereton"), "17, Brereton"), 
	IOExample(Dict{Symbol, Any}(:x => "13 Scotland DF Danny Fox"), "13, Fox"), 
	IOExample(Dict{Symbol, Any}(:x => "14 England MF Matty Cash"), "14, Cash"), 
	IOExample(Dict{Symbol, Any}(:x => "4 England DF Michael Mancienne"), "4, Mancienne"), 
	IOExample(Dict{Symbol, Any}(:x => "19 Wales FW Sam Jones"), "19, Jones"), 
	IOExample(Dict{Symbol, Any}(:x => "8 England MF Chris Cohen"), "8, Cohen"), 
	IOExample(Dict{Symbol, Any}(:x => "11 England MF Ben Osborn"), "11, Osborn"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Scotland MF Barrie McKay"), "10, McKay"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Algeria MF Adlene Guedioura"), "5, Guedioura")])
problem_277 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3,404 km (2,115 mi) 83h 56' 20\""), "3,404, 2,115"), 
	IOExample(Dict{Symbol, Any}(:x => "3,529 km (2,193 mi) 89h 04' 48\""), "3,529, 2,193"), 
	IOExample(Dict{Symbol, Any}(:x => "3,360 km (2,088 mi) 84h 46' 14\""), "3,360, 2,088"), 
	IOExample(Dict{Symbol, Any}(:x => "3,570 km (2,220 mi) 91h 00' 26\""), "3,570, 2,220"), 
	IOExample(Dict{Symbol, Any}(:x => "3,660 km (2,274 mi) 89h 59' 06\""), "3,660, 2,274"), 
	IOExample(Dict{Symbol, Any}(:x => "3,540 km (2,200 mi) 86h 20' 55\""), "3,540, 2,200"), 
	IOExample(Dict{Symbol, Any}(:x => "3,559 km (2,211 mi) 87h 52' 52\""), "3,559, 2,211"), 
	IOExample(Dict{Symbol, Any}(:x => "3,430 km (2,130 mi) 86h 12' 22\""), "3,430, 2,130"), 
	IOExample(Dict{Symbol, Any}(:x => "3,496 km (2,172 mi) 87h 34' 47\""), "3,496, 2,172"), 
	IOExample(Dict{Symbol, Any}(:x => "3,459 km (2,149 mi) 85h 48' 35\""), "3,459, 2,149")])
problem_279 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "36.166019(latitude), -115.065933(longitude)"), "36.166019, -115.065933"), 
	IOExample(Dict{Symbol, Any}(:x => "45.018974(latitude), -93.093773(longitude)"), "45.018974, -93.093773"), 
	IOExample(Dict{Symbol, Any}(:x => "40.369873(latitude), -74.757622(longitude)"), "40.369873, -74.757622"), 
	IOExample(Dict{Symbol, Any}(:x => "37.780544(latitude), -122.413055(longitude)"), "37.780544, -122.413055"), 
	IOExample(Dict{Symbol, Any}(:x => "40.746647(latitude), -73.454643(longitude)"), "40.746647, -73.454643"), 
	IOExample(Dict{Symbol, Any}(:x => "41.966038(latitude), -87.646660(longitude)"), "41.966038, -87.646660"), 
	IOExample(Dict{Symbol, Any}(:x => "29.858896(latitude), -95.475952(longitude)"), "29.858896, -95.475952"), 
	IOExample(Dict{Symbol, Any}(:x => "39.486244(latitude), -87.452957(longitude)"), "39.486244, -87.452957"), 
	IOExample(Dict{Symbol, Any}(:x => "38.410809(latitude), -82.378563(longitude)"), "38.410809, -82.378563"), 
	IOExample(Dict{Symbol, Any}(:x => "32.995209(latitude), -96.687759(longitude)"), "32.995209, -96.687759")])
problem_27 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "AliCe"), "aLIcE"), 
	IOExample(Dict{Symbol, Any}(:x => "IaN"), "iAn"), 
	IOExample(Dict{Symbol, Any}(:x => "DAVE"), "dave"), 
	IOExample(Dict{Symbol, Any}(:x => "lAUrA"), "LauRa"), 
	IOExample(Dict{Symbol, Any}(:x => "CHArlie"), "chaRLIE"), 
	IOExample(Dict{Symbol, Any}(:x => "miKe"), "MIkE"), 
	IOExample(Dict{Symbol, Any}(:x => "mary"), "MARY"), 
	IOExample(Dict{Symbol, Any}(:x => "StaNleY"), "sTAnLEy"), 
	IOExample(Dict{Symbol, Any}(:x => "BoB"), "bOb"), 
	IOExample(Dict{Symbol, Any}(:x => "MELVIN"), "melvin")])
problem_280 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "9l5l2NtcA8b3UIme6h-Y4i"), "-Y4i"), 
	IOExample(Dict{Symbol, Any}(:x => "4df0lgc4934RK17A-pX52jNW17msH"), "-pX52jNW17msH"), 
	IOExample(Dict{Symbol, Any}(:x => "170cTY2nq0v2wPI2R0-9t3LjP457ihb"), "-9t3LjP457ihb"), 
	IOExample(Dict{Symbol, Any}(:x => "Yar70258v92gT25x-k509P8qH4JV"), "-k509P8qH4JV"), 
	IOExample(Dict{Symbol, Any}(:x => "u-XP8c1Iun7"), "-XP8c1Iun7"), 
	IOExample(Dict{Symbol, Any}(:x => "397f25330KQ-laN50KJ16Yc0d"), "-laN50KJ16Yc0d"), 
	IOExample(Dict{Symbol, Any}(:x => "0s36X91SSK470ND4U7-18Y6x85P5xIY"), "-18Y6x85P5xIY"), 
	IOExample(Dict{Symbol, Any}(:x => "541441-34V3g4hYx26"), "-34V3g4hYx26"), 
	IOExample(Dict{Symbol, Any}(:x => "5r2lw9O71G3r90jh-p1971FP656fjI"), "-p1971FP656fjI"), 
	IOExample(Dict{Symbol, Any}(:x => "21973P6Ur426379X6I-924p6353W95Yl3aW05"), "-924p6353W95Yl3aW05")])
problem_281 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3C-G55CuJ9-808"), "-G55CuJ9-808"), 
	IOExample(Dict{Symbol, Any}(:x => "J8j5-OBB01x-20p60T"), "-OBB01x-20p60T"), 
	IOExample(Dict{Symbol, Any}(:x => "Q87039-Z4989h8H-mO3I"), "-Z4989h8H-mO3I"), 
	IOExample(Dict{Symbol, Any}(:x => "q6h451-26Ercy529-Ynx6yXpj"), "-26Ercy529-Ynx6yXpj"), 
	IOExample(Dict{Symbol, Any}(:x => "Y71L9405-08SEcZ07-r"), "-08SEcZ07-r"), 
	IOExample(Dict{Symbol, Any}(:x => "O84UhplKv-2BJ-D"), "-2BJ-D"), 
	IOExample(Dict{Symbol, Any}(:x => "832n433-J-Ub51UALM0"), "-J-Ub51UALM0"), 
	IOExample(Dict{Symbol, Any}(:x => "5OVC6933z-99-7HD5R6H78"), "-99-7HD5R6H78"), 
	IOExample(Dict{Symbol, Any}(:x => "dKb-71749N-M"), "-71749N-M"), 
	IOExample(Dict{Symbol, Any}(:x => "2030p-q10-06990q99"), "-q10-06990q99")])
problem_282 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "YTnWfSCC-YCshaWpm-sbFu"), "ytnwfscc-ycshawpm-sbfu"), 
	IOExample(Dict{Symbol, Any}(:x => "BnLjsxJH-EcLe-fAMZ"), "bnljsxjh-ecle-famz"), 
	IOExample(Dict{Symbol, Any}(:x => "iVmmds-VZxouO-sbF"), "ivmmds-vzxouo-sbf"), 
	IOExample(Dict{Symbol, Any}(:x => "bDFJKAiKg-kQejU-kGrvUJ"), "bdfjkaikg-kqeju-kgrvuj"), 
	IOExample(Dict{Symbol, Any}(:x => "BKnpMD-XV-U"), "bknpmd-xv-u"), 
	IOExample(Dict{Symbol, Any}(:x => "pj-vsLMRaYd-ZIuwVEznC"), "pj-vslmrayd-ziuwveznc"), 
	IOExample(Dict{Symbol, Any}(:x => "cqhss-KmDEOMWvi-qjAbAAeYA"), "cqhss-kmdeomwvi-qjabaaeya"), 
	IOExample(Dict{Symbol, Any}(:x => "H-dLtRQaoJ-zxOHOd"), "h-dltrqaoj-zxohod"), 
	IOExample(Dict{Symbol, Any}(:x => "lSgUz-KPEApN-YINGMhgKY"), "lsguz-kpeapn-yingmhgky"), 
	IOExample(Dict{Symbol, Any}(:x => "A-ndgjDCK-d"), "a-ndgjdck-d")])
problem_283 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "bTd"), "btd"), 
	IOExample(Dict{Symbol, Any}(:x => "jTN"), "jtn"), 
	IOExample(Dict{Symbol, Any}(:x => "RXA"), "rxa"), 
	IOExample(Dict{Symbol, Any}(:x => "yD"), "yd"), 
	IOExample(Dict{Symbol, Any}(:x => "fkBZtzbS"), "fkbztzbs"), 
	IOExample(Dict{Symbol, Any}(:x => "vuudr"), "vuudr"), 
	IOExample(Dict{Symbol, Any}(:x => "qGzZUVfLhjr"), "qgzzuvflhjr"), 
	IOExample(Dict{Symbol, Any}(:x => "jfcrCNNOMGimotpRA"), "jfcrcnnomgimotpra"), 
	IOExample(Dict{Symbol, Any}(:x => "KguBIkfCURtsMy"), "kgubikfcurtsmy"), 
	IOExample(Dict{Symbol, Any}(:x => "mKSQd"), "mksqd")])
problem_284 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "WNRhYJL"), "WNRHYJL"), 
	IOExample(Dict{Symbol, Any}(:x => "AMGSlP"), "AMGSLP"), 
	IOExample(Dict{Symbol, Any}(:x => "yubyISLqYUOE"), "YUBYISLQYUOE"), 
	IOExample(Dict{Symbol, Any}(:x => "JDbH"), "JDBH"), 
	IOExample(Dict{Symbol, Any}(:x => "HADrKhCZtWDvsR"), "HADRKHCZTWDVSR"), 
	IOExample(Dict{Symbol, Any}(:x => "WbaMhPAtJX"), "WBAMHPATJX"), 
	IOExample(Dict{Symbol, Any}(:x => "Llvjxpuu"), "LLVJXPUU"), 
	IOExample(Dict{Symbol, Any}(:x => "FJCmIPvMOHfzv"), "FJCMIPVMOHFZV"), 
	IOExample(Dict{Symbol, Any}(:x => "bcKmgc"), "BCKMGC"), 
	IOExample(Dict{Symbol, Any}(:x => "Xf"), "XF")])
problem_285 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1s9aW96t5Vah02y762n"), "1S9AW96T5VAH02Y762N"), 
	IOExample(Dict{Symbol, Any}(:x => "o7rzN1"), "O7RZN1"), 
	IOExample(Dict{Symbol, Any}(:x => "b5T4300612LI70i29"), "B5T4300612LI70I29"), 
	IOExample(Dict{Symbol, Any}(:x => "r1t8Ba7o5A56"), "R1T8BA7O5A56"), 
	IOExample(Dict{Symbol, Any}(:x => "gT5Go6xDd0U9"), "GT5GO6XDD0U9"), 
	IOExample(Dict{Symbol, Any}(:x => "7n3opJpc45wL7"), "7N3OPJPC45WL7"), 
	IOExample(Dict{Symbol, Any}(:x => "S161c9R613366"), "S161C9R613366"), 
	IOExample(Dict{Symbol, Any}(:x => "L1k9669"), "L1K9669"), 
	IOExample(Dict{Symbol, Any}(:x => "y625E"), "Y625E"), 
	IOExample(Dict{Symbol, Any}(:x => "vmJ4JV0eEGp3ckeU"), "VMJ4JV0EEGP3CKEU")])
problem_286 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Scfx IvfKW ZHIaA Meeh i"), "ScfxIvfKWZHIaA"), 
	IOExample(Dict{Symbol, Any}(:x => "JvL AjSpvMdWi MpW"), "JvLAjSpvMdWiMpW"), 
	IOExample(Dict{Symbol, Any}(:x => "IxzNGvlT HTjydsQ tdnaBa"), "IxzNGvlTHTjydsQtdnaBa"), 
	IOExample(Dict{Symbol, Any}(:x => "F bdQjiOW DRdoIz bPL"), "FbdQjiOWDRdoIz"), 
	IOExample(Dict{Symbol, Any}(:x => "Zw EkPD WTJFf PXHsgOZtK hozThRJ"), "ZwEkPDWTJFf"), 
	IOExample(Dict{Symbol, Any}(:x => "d SwGzS QdUvj xbXMng"), "dSwGzSQdUvj"), 
	IOExample(Dict{Symbol, Any}(:x => "NuMiA IhRdASRG OVKRKj"), "NuMiAIhRdASRGOVKRKj"), 
	IOExample(Dict{Symbol, Any}(:x => "JaPiA XzaHum wZJ"), "JaPiAXzaHumwZJ"), 
	IOExample(Dict{Symbol, Any}(:x => "ocBzCP vHMV nkl X s"), "ocBzCPvHMVnkl"), 
	IOExample(Dict{Symbol, Any}(:x => "kiLAe mqfBo pdag s"), "kiLAemqfBopdag")])
problem_287 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "HWRZYXKdo bmlDIFpQ"), "hwrzyxkdobmldifpq"), 
	IOExample(Dict{Symbol, Any}(:x => "DyF HAlwXAJG jmcneKFkD zUUf"), "dyfhalwxajgjmcnekfkd"), 
	IOExample(Dict{Symbol, Any}(:x => "e Ma pmcOpBZJh Ri MxnyfUqy"), "emapmcopbzjh"), 
	IOExample(Dict{Symbol, Any}(:x => "LMO pzTgUF"), "lmopztguf"), 
	IOExample(Dict{Symbol, Any}(:x => "ENGIJT"), "engijt"), 
	IOExample(Dict{Symbol, Any}(:x => "kTX YPUqolb atdCCo"), "ktxypuqolbatdcco"), 
	IOExample(Dict{Symbol, Any}(:x => "dFqMswgT PeZ"), "dfqmswgtpez"), 
	IOExample(Dict{Symbol, Any}(:x => "AU YvBXswI VzxPpux Nk cQW"), "auyvbxswivzxppux"), 
	IOExample(Dict{Symbol, Any}(:x => "AaDHUAZdY hrMhUvYcG GEhoWrAU w"), "aadhuazdyhrmhuvycggehowrau"), 
	IOExample(Dict{Symbol, Any}(:x => "pmkHeK sILz orPTSgd"), "pmkheksilzorptsgd")])
problem_288 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "QrNcTrN iYdwQKrNe"), "QRNCTRNiydwqkrne"), 
	IOExample(Dict{Symbol, Any}(:x => "zfHgZpm SGC"), "ZFHGZPMsgc"), 
	IOExample(Dict{Symbol, Any}(:x => "Tpewr WDzetiYV"), "TPEWRwdzetiyv"), 
	IOExample(Dict{Symbol, Any}(:x => "KEFUFL Jfubczvi"), "KEFUFLjfubczvi"), 
	IOExample(Dict{Symbol, Any}(:x => "bvKoqsU DRndvD"), "BVKOQSUdrndvd"), 
	IOExample(Dict{Symbol, Any}(:x => "zxvsZxJ Ly"), "ZXVSZXJly"), 
	IOExample(Dict{Symbol, Any}(:x => "MYa bgG"), "MYAbgg"), 
	IOExample(Dict{Symbol, Any}(:x => "onyotm eKrNxii"), "ONYOTMekrnxii"), 
	IOExample(Dict{Symbol, Any}(:x => "USesXzut taoWps"), "USESXZUTtaowps"), 
	IOExample(Dict{Symbol, Any}(:x => "osEdR LyvJOEUDB"), "OSEDRlyvjoeudb")])
problem_289 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "JtHVzX pHVrb"), "jthvzxPHVRB"), 
	IOExample(Dict{Symbol, Any}(:x => "VQhXfFm CywbukdQ"), "vqhxffmCYWBUKDQ"), 
	IOExample(Dict{Symbol, Any}(:x => "Xl AxPxbl"), "xlAXPXBL"), 
	IOExample(Dict{Symbol, Any}(:x => "gWJsx YhDmXFAG"), "gwjsxYHDMXFAG"), 
	IOExample(Dict{Symbol, Any}(:x => "Hembeth yZFRntjO"), "hembethYZFRNTJO"), 
	IOExample(Dict{Symbol, Any}(:x => "CZKed NtNjy"), "czkedNTNJY"), 
	IOExample(Dict{Symbol, Any}(:x => "JsXnZuF whgj"), "jsxnzufWHGJ"), 
	IOExample(Dict{Symbol, Any}(:x => "GYKYaJbM xRspBD"), "gykyajbmXRSPBD"), 
	IOExample(Dict{Symbol, Any}(:x => "giSG HYGixHQsB"), "gisgHYGIXHQSB"), 
	IOExample(Dict{Symbol, Any}(:x => "qJJcoVVc bXfYLNKbM"), "qjjcovvcBXFYLNKBM")])
problem_28 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "AliCe HEEr"), "Alice Heer"), 
	IOExample(Dict{Symbol, Any}(:x => "StaNleY TRAVis"), "Stanley Travis"), 
	IOExample(Dict{Symbol, Any}(:x => "MELVIN Julian"), "Melvin Julian"), 
	IOExample(Dict{Symbol, Any}(:x => "lAUrA Love"), "Laura Love"), 
	IOExample(Dict{Symbol, Any}(:x => "miKe dwIGHT"), "Mike Dwight"), 
	IOExample(Dict{Symbol, Any}(:x => "CHArlie PEAnuts"), "Charlie Peanuts"), 
	IOExample(Dict{Symbol, Any}(:x => "BoB BAD"), "Bob Bad"), 
	IOExample(Dict{Symbol, Any}(:x => "IaN RoDny"), "Ian Rodny"), 
	IOExample(Dict{Symbol, Any}(:x => "DAVE daviD"), "Dave David"), 
	IOExample(Dict{Symbol, Any}(:x => "mary gelman"), "Mary Gelman")])
problem_290 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "fUPlDJMOzQpxu"), "flzpxu"), 
	IOExample(Dict{Symbol, Any}(:x => "qiIpilBKOiis"), "qipiliis"), 
	IOExample(Dict{Symbol, Any}(:x => "EcOUU"), "c"), 
	IOExample(Dict{Symbol, Any}(:x => "RzTbGvf"), "zbvf"), 
	IOExample(Dict{Symbol, Any}(:x => "gNlSafY"), "glaf"), 
	IOExample(Dict{Symbol, Any}(:x => "AYUVnnKoVwyzf"), "nnowyzf"), 
	IOExample(Dict{Symbol, Any}(:x => "qcpmZjmgLyPQq"), "qcpmjmgyq"), 
	IOExample(Dict{Symbol, Any}(:x => "CARAH"), ""), 
	IOExample(Dict{Symbol, Any}(:x => "iGgKQRk"), "igk"), 
	IOExample(Dict{Symbol, Any}(:x => "QoGwt"), "owt")])
problem_291 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "oNAzgf"), "NA"), 
	IOExample(Dict{Symbol, Any}(:x => "xuklwfZLRhUt"), "ZLRU"), 
	IOExample(Dict{Symbol, Any}(:x => "cUs"), "U"), 
	IOExample(Dict{Symbol, Any}(:x => "LZEiwnGjutafUk"), "LZEGU"), 
	IOExample(Dict{Symbol, Any}(:x => "zVXkFVpe"), "VXFV"), 
	IOExample(Dict{Symbol, Any}(:x => "FcEQEhcFCq"), "FEQEFC"), 
	IOExample(Dict{Symbol, Any}(:x => "cOojjHFMgC"), "OHFMC"), 
	IOExample(Dict{Symbol, Any}(:x => "TrgyTP"), "TTP"), 
	IOExample(Dict{Symbol, Any}(:x => "fsgtu"), ""), 
	IOExample(Dict{Symbol, Any}(:x => "NzafvxJoz"), "NJ")])
problem_292 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "zTnctxgwuwlk"), "z"), 
	IOExample(Dict{Symbol, Any}(:x => "dcmesxodco"), "dcmesxodco"), 
	IOExample(Dict{Symbol, Any}(:x => "ptocxksAkunehwup"), "ptocxks"), 
	IOExample(Dict{Symbol, Any}(:x => "tanctbfwnhay"), "tanctbfwnhay"), 
	IOExample(Dict{Symbol, Any}(:x => "zfxeabVpapncndbhep"), "zfxeab"), 
	IOExample(Dict{Symbol, Any}(:x => "hlcsaHkqwnl"), "hlcsa"), 
	IOExample(Dict{Symbol, Any}(:x => "otzotttrajw"), "otzotttrajw"), 
	IOExample(Dict{Symbol, Any}(:x => "pcptjrsnrpfMphnVxi"), "pcptjrsnrpf"), 
	IOExample(Dict{Symbol, Any}(:x => "moognkwkdqjtvnabu"), "moognkwkdqjtvnabu"), 
	IOExample(Dict{Symbol, Any}(:x => "smyztumwvllsy"), "smyztumwvllsy")])
problem_293 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "anhhisoctlzn"), "anhhisoctlzn"), 
	IOExample(Dict{Symbol, Any}(:x => "dFqzrsinpyurusbuahd"), "d"), 
	IOExample(Dict{Symbol, Any}(:x => "cgiwuzwtawcwcfIslkylp"), "cgiwuzwtawcwcf"), 
	IOExample(Dict{Symbol, Any}(:x => "dmlzkyvtwkwqwhpfwoussfigm"), "dmlzkyvtwkwqwhpfwoussfigm"), 
	IOExample(Dict{Symbol, Any}(:x => "uvwmukqqlPjuhuaCLIfk"), "uvwmukqql"), 
	IOExample(Dict{Symbol, Any}(:x => "jxpdHoqgtzeiVpyhtgqwagyaviws"), "jxpd"), 
	IOExample(Dict{Symbol, Any}(:x => "htvpAsgrwbsoeigjvtryhtfp"), "htvp"), 
	IOExample(Dict{Symbol, Any}(:x => "hmjuuhqf"), "hmjuuhqf"), 
	IOExample(Dict{Symbol, Any}(:x => "wegwqxpvmeltswcmuzojaNalkY"), "wegwqxpvmeltswcmuzoja"), 
	IOExample(Dict{Symbol, Any}(:x => "worCiqshrbrgrplzaaBirqvwic"), "wor")])
problem_294 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "GMFXUZVGCE"), "GMFXUZVGCE"), 
	IOExample(Dict{Symbol, Any}(:x => "GKODMOLEOHXUAAQKU"), "GKODMOLEOHXUAAQKU"), 
	IOExample(Dict{Symbol, Any}(:x => "MOSWORXePDAYFQPRXbNLNW"), "MOSWORX"), 
	IOExample(Dict{Symbol, Any}(:x => "OOWTFWHMuSnNKOUQJUS"), "OOWTFWHM"), 
	IOExample(Dict{Symbol, Any}(:x => "FGYKTZLWAH"), "FGYKTZLWAH"), 
	IOExample(Dict{Symbol, Any}(:x => "VJQXXZVGZYECLKLKVlIUAkFVRU"), "VJQXXZVGZYECLKLKV"), 
	IOExample(Dict{Symbol, Any}(:x => "HRghPPIuJZGOrUR"), "HR"), 
	IOExample(Dict{Symbol, Any}(:x => "GQnBEFCKTUIkJAGD"), "GQ"), 
	IOExample(Dict{Symbol, Any}(:x => "KPWNYXBLZHMGT"), "KPWNYXBLZHMGT"), 
	IOExample(Dict{Symbol, Any}(:x => "IBSYXGGJKH"), "IBSYXGGJKH")])
problem_295 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "NHMPEIxIQBJXWMCWU"), "xIQBJXWMCWU"), 
	IOExample(Dict{Symbol, Any}(:x => "RCVXXOQZoWYSPN"), "oWYSPN"), 
	IOExample(Dict{Symbol, Any}(:x => "uTTLYoWYMQKSFDSJDlKONA"), "uTTLYoWYMQKSFDSJDlKONA"), 
	IOExample(Dict{Symbol, Any}(:x => "DVGURUPJAYVNDAFuNQKX"), "uNQKX"), 
	IOExample(Dict{Symbol, Any}(:x => "ALWOAWPSLNXAhPZZGH"), "hPZZGH"), 
	IOExample(Dict{Symbol, Any}(:x => "ROISVIcBZPKTXADzPZCE"), "cBZPKTXADzPZCE"), 
	IOExample(Dict{Symbol, Any}(:x => "RWNZPJLXqLOSGL"), "qLOSGL"), 
	IOExample(Dict{Symbol, Any}(:x => "HSIHFPWSnUM"), "nUM"), 
	IOExample(Dict{Symbol, Any}(:x => "EQLUFJPWLIRZLRlWHDRAOnMaVAGG"), "lWHDRAOnMaVAGG"), 
	IOExample(Dict{Symbol, Any}(:x => "KQrNGADLMOPPNBUGODmYVRMULPV"), "rNGADLMOPPNBUGODmYVRMULPV")])
problem_296 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "QLnQIDJZSSELLBVUHZmIKHCC"), "QIDJZSSELLBVUHZmIKHCC"), 
	IOExample(Dict{Symbol, Any}(:x => "YbOVNCHEJNuMFMOEQAFXCLHBHKNCI"), "OVNCHEJNuMFMOEQAFXCLHBHKNCI"), 
	IOExample(Dict{Symbol, Any}(:x => "JVXSBHUPGBXOZXLtYLXqGM"), "YLXqGM"), 
	IOExample(Dict{Symbol, Any}(:x => "TWHQEJHJTTBZDTBNrNTD"), "NTD"), 
	IOExample(Dict{Symbol, Any}(:x => "IMUXKAAxCHASLA"), "CHASLA"), 
	IOExample(Dict{Symbol, Any}(:x => "TWJUMDlQNFWXbLIIy"), "QNFWXbLIIy"), 
	IOExample(Dict{Symbol, Any}(:x => "RMGBDWQCFhFLEYEHTQYHGCJEY"), "FLEYEHTQYHGCJEY"), 
	IOExample(Dict{Symbol, Any}(:x => "FDHSMLTMOKOMIgBIYJHOMT"), "BIYJHOMT"), 
	IOExample(Dict{Symbol, Any}(:x => "NJFLTFCTrGBbOAFPKPNLUCYJZ"), "GBbOAFPKPNLUCYJZ"), 
	IOExample(Dict{Symbol, Any}(:x => "TNZQKWRDFCCcYKRQW"), "YKRQW")])
problem_297 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "cIwcmniyfbfeCvtfc"), "wcmniyfbfeCvtfc"), 
	IOExample(Dict{Symbol, Any}(:x => "nsjbardneXOhptpxgoJvpstynbs"), "OhptpxgoJvpstynbs"), 
	IOExample(Dict{Symbol, Any}(:x => "hjzwjpuqnxehyotVfllbjthRooyfm"), "fllbjthRooyfm"), 
	IOExample(Dict{Symbol, Any}(:x => "fugbluXkTker"), "kTker"), 
	IOExample(Dict{Symbol, Any}(:x => "hlkduxkvXsrhcuo"), "srhcuo"), 
	IOExample(Dict{Symbol, Any}(:x => "khaKemsjuclmjtlpdpy"), "emsjuclmjtlpdpy"), 
	IOExample(Dict{Symbol, Any}(:x => "SxLgvpofhmrhehbdbemmlxkumq"), "xLgvpofhmrhehbdbemmlxkumq"), 
	IOExample(Dict{Symbol, Any}(:x => "vlqZUxcvgyNnxrqktu"), "UxcvgyNnxrqktu"), 
	IOExample(Dict{Symbol, Any}(:x => "qsfposvkuwdqqWqrq"), "qrq"), 
	IOExample(Dict{Symbol, Any}(:x => "esjcjRChduVkiwsVru"), "ChduVkiwsVru")])
problem_298 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "qviiddVaqXuwPsjtrgwQOkzbhr"), "VaqXuwPsjtrgwQOkzbhr"), 
	IOExample(Dict{Symbol, Any}(:x => "xaqrqgelhbstFpduxdwdzulqa"), "Fpduxdwdzulqa"), 
	IOExample(Dict{Symbol, Any}(:x => "mUGnvikEyZpxumgbUvlhwcjgsy"), "UGnvikEyZpxumgbUvlhwcjgsy"), 
	IOExample(Dict{Symbol, Any}(:x => "cpudjegnmmqnedolmucvIqfrwjfh"), "Iqfrwjfh"), 
	IOExample(Dict{Symbol, Any}(:x => "goikhqoFem"), "Fem"), 
	IOExample(Dict{Symbol, Any}(:x => "xZDxhiwtcugedsafqtylykmvnfyxf"), "ZDxhiwtcugedsafqtylykmvnfyxf"), 
	IOExample(Dict{Symbol, Any}(:x => "xnndumsmeeXbnpadz"), "Xbnpadz"), 
	IOExample(Dict{Symbol, Any}(:x => "UhzjtjvizjspktqyIqUquboeEXyu"), "UhzjtjvizjspktqyIqUquboeEXyu"), 
	IOExample(Dict{Symbol, Any}(:x => "jpbpmuYzcnqugiAs"), "YzcnqugiAs"), 
	IOExample(Dict{Symbol, Any}(:x => "qkjyhyeAievdgd"), "Aievdgd")])
problem_299 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Wp1raTviIFPYOaNNGEfgJDG84n"), "1raTviIFPYOaNNGEfgJDG84n"), 
	IOExample(Dict{Symbol, Any}(:x => "kUDG1lTFnHetKkwYiCyXu"), "1lTFnHetKkwYiCyXu"), 
	IOExample(Dict{Symbol, Any}(:x => "jDle1KKAyfwjdbKOZHzS"), "1KKAyfwjdbKOZHzS"), 
	IOExample(Dict{Symbol, Any}(:x => "VkfZ9mySrBJDHijpWT2CtWsvYY"), "9mySrBJDHijpWT2CtWsvYY"), 
	IOExample(Dict{Symbol, Any}(:x => "jl3VoFNPv79VTKTECrcdweUGq"), "3VoFNPv79VTKTECrcdweUGq"), 
	IOExample(Dict{Symbol, Any}(:x => "ZH1xNlF51i"), "1xNlF51i"), 
	IOExample(Dict{Symbol, Any}(:x => "onIptoRSijeZtlreKSEDfNR4c7M"), "4c7M"), 
	IOExample(Dict{Symbol, Any}(:x => "qYFDwMU3HQfZSSSz6NfhMP"), "3HQfZSSSz6NfhMP"), 
	IOExample(Dict{Symbol, Any}(:x => "kHTFEVhPVavKJlXilYTSVcNo1sCm"), "1sCm"), 
	IOExample(Dict{Symbol, Any}(:x => "m6MHcqMTquNXGJCDC2cwiNXDtGJSL"), "6MHcqMTquNXGJCDC2cwiNXDtGJSL")])
problem_29 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "June 20 - 2002"), "June"), 
	IOExample(Dict{Symbol, Any}(:x => "January 8"), "January"), 
	IOExample(Dict{Symbol, Any}(:x => "August 12, 1993"), "August"), 
	IOExample(Dict{Symbol, Any}(:x => "May 27 1950"), "May"), 
	IOExample(Dict{Symbol, Any}(:x => "July 4, 2015"), "July"), 
	IOExample(Dict{Symbol, Any}(:x => "May 21"), "May"), 
	IOExample(Dict{Symbol, Any}(:x => "December 1990"), "December"), 
	IOExample(Dict{Symbol, Any}(:x => "November, 27, 2011"), "November"), 
	IOExample(Dict{Symbol, Any}(:x => "2007 (September)"), "September"), 
	IOExample(Dict{Symbol, Any}(:x => "July 15, 20011"), "July")])
problem_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "My name is Alice"), "Alice"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Jeanne"), "Jeanne"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Bob"), "Bob"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Bill"), "Bill"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Josh"), "Josh"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Richard"), "Richard"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Albert"), "Albert"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Laura"), "Laura"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Charlie"), "Charlie"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is John"), "John")])
problem_300 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "6XfjSRJnbXTkqTMTeyLxrs8gojHDx"), ""), 
	IOExample(Dict{Symbol, Any}(:x => "ySYH7XjIgqkm"), "ySYH"), 
	IOExample(Dict{Symbol, Any}(:x => "NC2x8CZPvyU15Ysa"), "NC"), 
	IOExample(Dict{Symbol, Any}(:x => "QUqkHN2oNWkwGlYrKahoB"), "QUqkHN"), 
	IOExample(Dict{Symbol, Any}(:x => "AWhURyhlFkEkpstlfiDT3rtVGGX"), "AWhURyhlFkEkpstlfiDT"), 
	IOExample(Dict{Symbol, Any}(:x => "rYSMvYruUxoOBaDJt4aGafRV"), "rYSMvYruUxoOBaDJt"), 
	IOExample(Dict{Symbol, Any}(:x => "mb3lfJbglnVZ"), "mb"), 
	IOExample(Dict{Symbol, Any}(:x => "bn3FIO1VLb1hVvTwea1PyvC8I"), "bn"), 
	IOExample(Dict{Symbol, Any}(:x => "YsWDXezsI7xhDF"), "YsWDXezsI"), 
	IOExample(Dict{Symbol, Any}(:x => "kAaCyBkKcrLmI8mYlqJMcH"), "kAaCyBkKcrLmI")])
problem_301 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "P7IeFgqjFmYvSe"), "p7iefgqjfmyvse"), 
	IOExample(Dict{Symbol, Any}(:x => "NGwsfLyix51HFWsp"), "ngwsflyix51hfwsp"), 
	IOExample(Dict{Symbol, Any}(:x => "gCQCDSQqECQLhVy0NsEWUs4FDQwWJ"), "gcqcdsqqecqlhvy0nsewus4fdqwwj"), 
	IOExample(Dict{Symbol, Any}(:x => "VjA6FxarSFBBOhIdJ5mvYOSF"), "vja6fxarsfbbohidj5mvyosf"), 
	IOExample(Dict{Symbol, Any}(:x => "lLGfvWo3AtfGDG5npPL"), "llgfvwo3atfgdg5nppl"), 
	IOExample(Dict{Symbol, Any}(:x => "MmID4DvGSDjskx"), "mmid4dvgsdjskx"), 
	IOExample(Dict{Symbol, Any}(:x => "erjNiEd5zFzwocVyzO"), "erjnied5zfzwocvyzo"), 
	IOExample(Dict{Symbol, Any}(:x => "tJ1AdGMDw36kPXYpDEIq2kHU"), "tj1adgmdw36kpxypdeiq2khu"), 
	IOExample(Dict{Symbol, Any}(:x => "PldSac78PtEonlymdaLlY5r9m"), "pldsac78pteonlymdally5r9m"), 
	IOExample(Dict{Symbol, Any}(:x => "S8crew2vZJsU"), "s8crew2vzjsu")])
problem_302 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "jiumpe6xithadsdqmerv"), "JIUMPE6xithadsdqmerv"), 
	IOExample(Dict{Symbol, Any}(:x => "atsexbvmctq4bwghlb"), "ATSEXBVMCTQ4bwghlb"), 
	IOExample(Dict{Symbol, Any}(:x => "uqftqowltp6ubivqtexec"), "UQFTQOWLTP6ubivqtexec"), 
	IOExample(Dict{Symbol, Any}(:x => "kafq91vfocw5joz0wzuhrqksklww"), "KAFQ91vfocw5joz0wzuhrqksklww"), 
	IOExample(Dict{Symbol, Any}(:x => "vxbrmtma0rrazvob"), "VXBRMTMA0rrazvob"), 
	IOExample(Dict{Symbol, Any}(:x => "dobujfbtddsrx5kabbebdnl"), "DOBUJFBTDDSRX5kabbebdnl"), 
	IOExample(Dict{Symbol, Any}(:x => "mgjqa8ndwytllxtuxg8ruzaqpf"), "MGJQA8ndwytllxtuxg8ruzaqpf"), 
	IOExample(Dict{Symbol, Any}(:x => "kaetzqew5vcmalerb"), "KAETZQEW5vcmalerb"), 
	IOExample(Dict{Symbol, Any}(:x => "wfbo5doeodnm9x"), "WFBO5doeodnm9x"), 
	IOExample(Dict{Symbol, Any}(:x => "tawppx88hnhokarotf"), "TAWPPX88hnhokarotf")])
problem_303 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "mifisnrxokepobjwmlk"), "MifIsnRxoKepObjWmlK"), 
	IOExample(Dict{Symbol, Any}(:x => "tttqmg"), "TttQmg"), 
	IOExample(Dict{Symbol, Any}(:x => "ysohbqfeapycwepvgnx"), "YsoHbqFeaPycWepVgnX"), 
	IOExample(Dict{Symbol, Any}(:x => "arpyu"), "ArpYu"), 
	IOExample(Dict{Symbol, Any}(:x => "gmjwqfpyuzpgoguia"), "GmjWqfPyuZpgOguIa"), 
	IOExample(Dict{Symbol, Any}(:x => "smteekpmn"), "SmtEekPmn"), 
	IOExample(Dict{Symbol, Any}(:x => "qkultf"), "QkuLtf"), 
	IOExample(Dict{Symbol, Any}(:x => "jnnlqnrq"), "JnnLqnRq"), 
	IOExample(Dict{Symbol, Any}(:x => "gyzvxgpu"), "GyzVxgPu"), 
	IOExample(Dict{Symbol, Any}(:x => "muxopq"), "MuxOpq")])
problem_304 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<magbuvlfohfm>"), "MaGbUvLfOhFm"), 
	IOExample(Dict{Symbol, Any}(:x => "<svlidrufpn>"), "SvLiDrUfPn"), 
	IOExample(Dict{Symbol, Any}(:x => "<seccbq>"), "SeCcBq"), 
	IOExample(Dict{Symbol, Any}(:x => "<mgqkkze>"), "MgQkKzE"), 
	IOExample(Dict{Symbol, Any}(:x => "<vmkioaovipbdw>"), "VmKiOaOvIpBdW"), 
	IOExample(Dict{Symbol, Any}(:x => "<moimw>"), "MoImW"), 
	IOExample(Dict{Symbol, Any}(:x => "<swnumyw>"), "SwNuMyW"), 
	IOExample(Dict{Symbol, Any}(:x => "<qgintscnpz>"), "QgInTsCnPz"), 
	IOExample(Dict{Symbol, Any}(:x => "<bgygkgokxhvbjkrlkl>"), "BgYgKgOkXhVbJkRlKl"), 
	IOExample(Dict{Symbol, Any}(:x => "<hjzkxtuf>"), "HjZkXtUf")])
problem_305 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "n-nd-xe-bl-jl-eh-"), "nndxebljleh"), 
	IOExample(Dict{Symbol, Any}(:x => "h-pw-qu-er-h"), "hpwquerh"), 
	IOExample(Dict{Symbol, Any}(:x => "w-fn-rv-qq-ng-ng-wq-e"), "wfnrvqqngngwqe"), 
	IOExample(Dict{Symbol, Any}(:x => "o-ia-ea-zd-tn-cw-"), "oiaeazdtncw"), 
	IOExample(Dict{Symbol, Any}(:x => "s-jn-jw-nz-zp-hw-oh-c"), "sjnjwnzzphwohc"), 
	IOExample(Dict{Symbol, Any}(:x => "b-bn-no-lr-ps-xl-tp-o"), "bbnnolrpsxltpo"), 
	IOExample(Dict{Symbol, Any}(:x => "g-mx-es-xn-am-nr-so-"), "gmxesxnamnrso"), 
	IOExample(Dict{Symbol, Any}(:x => "o-wf-ck-qn-ip-rq-ax-lx-"), "owfckqniprqaxlx"), 
	IOExample(Dict{Symbol, Any}(:x => "e-nd-iz-hl-in-e"), "endizhline"), 
	IOExample(Dict{Symbol, Any}(:x => "p-jz-vc-oi-g"), "pjzvcoig")])
problem_306 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "-ge-fb-cs-gh-ag-nz"), "gefbcsghagnz"), 
	IOExample(Dict{Symbol, Any}(:x => "-hn-mj-oe-cw-nk-dj-zy-ui-xk-j"), "hnmjoecwnkdjzyuixkj"), 
	IOExample(Dict{Symbol, Any}(:x => "-aw-od-gi-mk-pv"), "awodgimkpv"), 
	IOExample(Dict{Symbol, Any}(:x => "-od-el-er-f"), "odelerf"), 
	IOExample(Dict{Symbol, Any}(:x => "-jj-sk-ut-ox-vj-uq"), "jjskutoxvjuq"), 
	IOExample(Dict{Symbol, Any}(:x => "-fi-mz-un-sg-bp-ky-td-g"), "fimzunsgbpkytdg"), 
	IOExample(Dict{Symbol, Any}(:x => "-cu-mp-mq-wm-qz-lx-y"), "cumpmqwmqzlxy"), 
	IOExample(Dict{Symbol, Any}(:x => "-zm-dk-am-b"), "zmdkamb"), 
	IOExample(Dict{Symbol, Any}(:x => "-bm-hf-vm-lb-xt-wz-my-ba"), "bmhfvmlbxtwzmyba"), 
	IOExample(Dict{Symbol, Any}(:x => "-tl-ay-qh-xj-dh-ma-bx-p"), "tlayqhxjdhmabxp")])
problem_307 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "zmtbbvugarnhb"), "mbvgrh"), 
	IOExample(Dict{Symbol, Any}(:x => "mjnvafsuaki"), "jvfuk"), 
	IOExample(Dict{Symbol, Any}(:x => "itdbgpeezmphqayhtz"), "tbpemhahz"), 
	IOExample(Dict{Symbol, Any}(:x => "hhlcgmbgibo"), "hcmgb"), 
	IOExample(Dict{Symbol, Any}(:x => "ttgqbur"), "tqu"), 
	IOExample(Dict{Symbol, Any}(:x => "hvjwvrsvtbchxrfmirb"), "vwrvbhrmr"), 
	IOExample(Dict{Symbol, Any}(:x => "yepafosoqpcehkd"), "eaoopek"), 
	IOExample(Dict{Symbol, Any}(:x => "ucaxjxqm"), "cxxm"), 
	IOExample(Dict{Symbol, Any}(:x => "gwzkopwqrobvi"), "wkpqov"), 
	IOExample(Dict{Symbol, Any}(:x => "csrfsgxaxpazwp"), "sfgapzp")])
problem_308 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "yokhigixkyyik"), "okhgixyyi"), 
	IOExample(Dict{Symbol, Any}(:x => "ueieauttikclgvnhkbh"), "eieuttkclvnhbh"), 
	IOExample(Dict{Symbol, Any}(:x => "vuqwyducyql"), "uqwducql"), 
	IOExample(Dict{Symbol, Any}(:x => "diipifebwtepfjnixdt"), "iipfebtepjnidt"), 
	IOExample(Dict{Symbol, Any}(:x => "rgjtsrwuqvkrrlxcuvwrlaz"), "gjtrwuvkrlxcvwraz"), 
	IOExample(Dict{Symbol, Any}(:x => "vgtkbjljwfrlsftgvkapnvyou"), "gtkjljfrlftgkapvyo"), 
	IOExample(Dict{Symbol, Any}(:x => "mkajankpvvajfqpjnx"), "kajnkpvajqpjx"), 
	IOExample(Dict{Symbol, Any}(:x => "uasdntcmvtmhvthhtiwpiyakaaj"), "asdtcmtmhthhiwpyakaj"), 
	IOExample(Dict{Symbol, Any}(:x => "wuqxyeuazupaisx"), "uqxeuaupasx"), 
	IOExample(Dict{Symbol, Any}(:x => "faufqzshowogczzcwfrbtx"), "aufzshwogzzcfrbx")])
problem_309 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "vpiclmujkk"), "vpiclm"), 
	IOExample(Dict{Symbol, Any}(:x => "ltgxtpsyfctwfypox"), "ltgxtp"), 
	IOExample(Dict{Symbol, Any}(:x => "rnklkflrwntytmeuairnubckobsl"), "rnklkf"), 
	IOExample(Dict{Symbol, Any}(:x => "gscjtjnzyafizcxauwse"), "gscjtj"), 
	IOExample(Dict{Symbol, Any}(:x => "xgrmwzhcibanllaysffoadhmscbjp"), "xgrmwz"), 
	IOExample(Dict{Symbol, Any}(:x => "kcitxjvdhvhbdjonh"), "kcitxj"), 
	IOExample(Dict{Symbol, Any}(:x => "tdtmzubhixmrjjms"), "tdtmzu"), 
	IOExample(Dict{Symbol, Any}(:x => "irveqavgvqmyzcltqfoqbntplagi"), "irveqa"), 
	IOExample(Dict{Symbol, Any}(:x => "fdeslliwhwkxpnmozniaimxmoxk"), "fdesll"), 
	IOExample(Dict{Symbol, Any}(:x => "azrrgrzjywteyqmcto"), "azrrgr")])
problem_30 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3 Ames St., Portland, OR 02142"), "3"), 
	IOExample(Dict{Symbol, Any}(:x => "5000 Forbes Ave, Pittsburgh, PA 15213"), "5000"), 
	IOExample(Dict{Symbol, Any}(:x => "77 Massachusetts Ave, Cambridge, MA 02139"), "77"), 
	IOExample(Dict{Symbol, Any}(:x => "3113 Greenfield Ave., Los Angeles, CA 90034"), "3113"), 
	IOExample(Dict{Symbol, Any}(:x => "262 Washington Rd, Princeton, NJ 08540"), "262"), 
	IOExample(Dict{Symbol, Any}(:x => "450 Serra Mall, Stanford, CA 94305"), "450"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Vassar St. 46-4053, Cambridge, MA 02139"), "43"), 
	IOExample(Dict{Symbol, Any}(:x => "47 Foskett St. #2, Cambridge, MA 02144"), "47"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Margaret St. #1, Dorchester, MA 02125"), "43"), 
	IOExample(Dict{Symbol, Any}(:x => "253 Cory Hall, Berkeley, CA 94720"), "253")])
problem_310 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "yewjw.xbcmpvu.xabuh."), "yewjw.xbcmpvu"), 
	IOExample(Dict{Symbol, Any}(:x => "kltxdiq.pllgox.o."), "kltxdiq.pllgox"), 
	IOExample(Dict{Symbol, Any}(:x => "otdomcw.kwza.tul.ejvqlf.q."), "otdomcw.kwza"), 
	IOExample(Dict{Symbol, Any}(:x => "ximcze.nqldoth.ec."), "ximcze.nqldoth"), 
	IOExample(Dict{Symbol, Any}(:x => "oku.hjc.u.lfmg."), "oku.hjc"), 
	IOExample(Dict{Symbol, Any}(:x => "eozn.fnigxfz.febjce.hkzaexz.q."), "eozn.fnigxfz"), 
	IOExample(Dict{Symbol, Any}(:x => "ewae.e.dmysdox.wbbjscg."), "ewae.e"), 
	IOExample(Dict{Symbol, Any}(:x => "uuvmc.tamamze.sjq.oumbspw.brwdeiu."), "uuvmc.tamamze"), 
	IOExample(Dict{Symbol, Any}(:x => "stghem.smecb.x."), "stghem.smecb"), 
	IOExample(Dict{Symbol, Any}(:x => "xcezlgz.pjjftt.o."), "xcezlgz.pjjftt")])
problem_311 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "zzi.oqitbwh.gokwqm.qx.jxkx."), "gokwqm.qx.jxkx."), 
	IOExample(Dict{Symbol, Any}(:x => "vuktx.aj.zoeehg."), "zoeehg."), 
	IOExample(Dict{Symbol, Any}(:x => "f.daxrvb.xxuqh."), "xxuqh."), 
	IOExample(Dict{Symbol, Any}(:x => "qjczw.mdi.epmi."), "epmi."), 
	IOExample(Dict{Symbol, Any}(:x => "seysams.k.ebzh."), "ebzh."), 
	IOExample(Dict{Symbol, Any}(:x => "ipwnajf.ricl.exkyjr.md.p."), "exkyjr.md.p."), 
	IOExample(Dict{Symbol, Any}(:x => "vhkjn.d.vyvqs.poacvw."), "vyvqs.poacvw."), 
	IOExample(Dict{Symbol, Any}(:x => "cad.h.jki.uovgo."), "jki.uovgo."), 
	IOExample(Dict{Symbol, Any}(:x => "lajbbsy.wbex.jbkhhvf.gxk.ruaj."), "jbkhhvf.gxk.ruaj."), 
	IOExample(Dict{Symbol, Any}(:x => "on.pt.cvlgz."), "cvlgz.")])
problem_312 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "xolf.t.hs.glcglsq."), "xolf.T.HS.GLCGLSQ."), 
	IOExample(Dict{Symbol, Any}(:x => "u.xh.wteqiu.qjl."), "u.XH.WTEQIU.QJL."), 
	IOExample(Dict{Symbol, Any}(:x => "g.z."), "g.Z."), 
	IOExample(Dict{Symbol, Any}(:x => "i.kxvo."), "i.KXVO."), 
	IOExample(Dict{Symbol, Any}(:x => "dlqxl.n.v.ocaal."), "dlqxl.N.V.OCAAL."), 
	IOExample(Dict{Symbol, Any}(:x => "eis.t.uqxgue.nc."), "eis.T.UQXGUE.NC."), 
	IOExample(Dict{Symbol, Any}(:x => "atxp.g."), "atxp.G."), 
	IOExample(Dict{Symbol, Any}(:x => "nlyduoe.h.zzezx."), "nlyduoe.H.ZZEZX."), 
	IOExample(Dict{Symbol, Any}(:x => "jctopr.ytvnp.mxwzpaa."), "jctopr.YTVNP.MXWZPAA."), 
	IOExample(Dict{Symbol, Any}(:x => "iidelv.v.jwkgkga."), "iidelv.V.JWKGKGA.")])
problem_313 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "xctIolovMTt"), "IMT"), 
	IOExample(Dict{Symbol, Any}(:x => "OCZFQqIzJ"), "OCZFQIJ"), 
	IOExample(Dict{Symbol, Any}(:x => "LuBHrTxxQHP"), "LBHTQHP"), 
	IOExample(Dict{Symbol, Any}(:x => "BFHoHLvmQlx"), "BFHHLQ"), 
	IOExample(Dict{Symbol, Any}(:x => "RvNujiusziMxu"), "RNM"), 
	IOExample(Dict{Symbol, Any}(:x => "oyZSzJFyPgxx"), "ZSJFP"), 
	IOExample(Dict{Symbol, Any}(:x => "ulbwUPWZgIzwcd"), "UPWZI"), 
	IOExample(Dict{Symbol, Any}(:x => "WzBloJWuK"), "WBJWK"), 
	IOExample(Dict{Symbol, Any}(:x => "bdSvHKWlOYSJaPAdZIEnIm"), "SHKWOYSJPAZIEI"), 
	IOExample(Dict{Symbol, Any}(:x => "RmOBMqA"), "ROBMA")])
problem_314 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "AIMf"), "aim"), 
	IOExample(Dict{Symbol, Any}(:x => "qKAmikv"), "ka"), 
	IOExample(Dict{Symbol, Any}(:x => "HgKLCaOejSj"), "hklcos"), 
	IOExample(Dict{Symbol, Any}(:x => "sazjsKqVXLyHy"), "kvxlh"), 
	IOExample(Dict{Symbol, Any}(:x => "etoXMRY"), "xmry"), 
	IOExample(Dict{Symbol, Any}(:x => "NBxCgGLuo"), "nbcgl"), 
	IOExample(Dict{Symbol, Any}(:x => "WbUSvJwrSkw"), "wusjs"), 
	IOExample(Dict{Symbol, Any}(:x => "IJvOiAwcAzZYy"), "ijoaazy"), 
	IOExample(Dict{Symbol, Any}(:x => "uP"), "p"), 
	IOExample(Dict{Symbol, Any}(:x => "sUWqWbaDklSf"), "uwwds")])
problem_315 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "kBJtUY(KlZojAFG)sj"), "KlZojAFG"), 
	IOExample(Dict{Symbol, Any}(:x => "IeXz(UzVt)Z"), "UzVt"), 
	IOExample(Dict{Symbol, Any}(:x => "OuFCU(rWtGjB)litDFepN"), "rWtGjB"), 
	IOExample(Dict{Symbol, Any}(:x => "pPl(Ffh)kkwSdgd"), "Ffh"), 
	IOExample(Dict{Symbol, Any}(:x => "sSZE(Vwku)YoXoXivD"), "Vwku"), 
	IOExample(Dict{Symbol, Any}(:x => "WwURvy(GBUSPf)Inmu"), "GBUSPf"), 
	IOExample(Dict{Symbol, Any}(:x => "n(qO)rDpzmwKN"), "qO"), 
	IOExample(Dict{Symbol, Any}(:x => "RmAa(UX)vI"), "UX"), 
	IOExample(Dict{Symbol, Any}(:x => "xH(cEiqL)DJFXj"), "cEiqL"), 
	IOExample(Dict{Symbol, Any}(:x => "z(My)ObBA"), "My")])
problem_316 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "pmmKuq(PhzDY)cDSjrJnr"), "phzdy"), 
	IOExample(Dict{Symbol, Any}(:x => "Bx(gI)Nky"), "gi"), 
	IOExample(Dict{Symbol, Any}(:x => "L(CYQyjL)taS"), "cyqyjl"), 
	IOExample(Dict{Symbol, Any}(:x => "mfGpmfl(Aln)kw"), "aln"), 
	IOExample(Dict{Symbol, Any}(:x => "owAP(kvHgGDCk)NksnMU"), "kvhggdck"), 
	IOExample(Dict{Symbol, Any}(:x => "zDUxyFQ(sYuScose)JHriMPTpq"), "syuscose"), 
	IOExample(Dict{Symbol, Any}(:x => "LDVZpEiS(jHMmCjNs)fbrsv"), "jhmmcjns"), 
	IOExample(Dict{Symbol, Any}(:x => "GMKIFRqua(DFR)vPnn"), "dfr"), 
	IOExample(Dict{Symbol, Any}(:x => "dTlC(ifyH)TWhyxDZ"), "ifyh"), 
	IOExample(Dict{Symbol, Any}(:x => "V(RCBA)rHjrdANU"), "rcba")])
problem_317 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "z(OtmTx)HlTWQmz"), "OTMTX"), 
	IOExample(Dict{Symbol, Any}(:x => "nMelF(mFL)EboiEJ"), "MFL"), 
	IOExample(Dict{Symbol, Any}(:x => "qxIvr(bxsJthBkb)ch"), "BXSJTHBKB"), 
	IOExample(Dict{Symbol, Any}(:x => "faH(kTOKqSWK)AEHz"), "KTOKQSWK"), 
	IOExample(Dict{Symbol, Any}(:x => "NCorZif(dzOxjp)DgGiKHX"), "DZOXJP"), 
	IOExample(Dict{Symbol, Any}(:x => "oLIizcWu(qTwS)b"), "QTWS"), 
	IOExample(Dict{Symbol, Any}(:x => "Y(qBnXqfNNu)HdkTDlLZ"), "QBNXQFNNU"), 
	IOExample(Dict{Symbol, Any}(:x => "z(qAfBaVpj)UA"), "QAFBAVPJ"), 
	IOExample(Dict{Symbol, Any}(:x => "YG(KmMNLPCe)W"), "KMMNLPCE"), 
	IOExample(Dict{Symbol, Any}(:x => "igBUdS(yLlweY)d"), "YLLWEY")])
problem_318 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Cj(TPuB)q(Jutt)UT"), "TPuBJutt"), 
	IOExample(Dict{Symbol, Any}(:x => "jRNgR(YlY)Q(tT)K"), "YlYtT"), 
	IOExample(Dict{Symbol, Any}(:x => "Or(AOIhr)Rdo(YYEB)ypLCT"), "AOIhrYYEB"), 
	IOExample(Dict{Symbol, Any}(:x => "J(zdPn)wZ(Lilou)CU"), "zdPnLilou"), 
	IOExample(Dict{Symbol, Any}(:x => "lGK(P)cZg(Sm)n"), "PSm"), 
	IOExample(Dict{Symbol, Any}(:x => "Ty(QtyCw)X(HVu)JT"), "QtyCwHVu"), 
	IOExample(Dict{Symbol, Any}(:x => "OfO(cDGV)NILu(PSyI)LEUr"), "cDGVPSyI"), 
	IOExample(Dict{Symbol, Any}(:x => "Sl(QZsVX)sb(Dq)Kkx"), "QZsVXDq"), 
	IOExample(Dict{Symbol, Any}(:x => "K(suvH)qrA(SEAg)iu"), "suvHSEAg"), 
	IOExample(Dict{Symbol, Any}(:x => "ONv(CkIj)H(snLR)HC"), "CkIjsnLR")])
problem_319 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "USUI(j)KeJ(Hq)VksiT"), "JHQ"), 
	IOExample(Dict{Symbol, Any}(:x => "Md(OvWn)ycbI(ezX)zUl"), "OVWNEZX"), 
	IOExample(Dict{Symbol, Any}(:x => "YUGOI(OgI)wbq(kuj)zKHl"), "OGIKUJ"), 
	IOExample(Dict{Symbol, Any}(:x => "a(w)zi(nMGNo)AgTjY"), "WNMGNO"), 
	IOExample(Dict{Symbol, Any}(:x => "ZR(rLh)uIthK(ncFU)vQZS"), "RLHNCFU"), 
	IOExample(Dict{Symbol, Any}(:x => "FWNP(ZSB)Vuwj(VQ)sFG"), "ZSBVQ"), 
	IOExample(Dict{Symbol, Any}(:x => "exF(elvwy)MT(r)T"), "ELVWYR"), 
	IOExample(Dict{Symbol, Any}(:x => "ef(a)U(HpQLc)nEN"), "AHPQLC"), 
	IOExample(Dict{Symbol, Any}(:x => "lcMr(GcxKn)zyPjp(S)cpgO"), "GCXKNS"), 
	IOExample(Dict{Symbol, Any}(:x => "SQzhD(l)Lna(dUwK)sEva"), "LDUWK")])
problem_31 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3113 Greenfield Ave., Los Angeles, CA 90034"), "Greenfield"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Margaret St. #1, Dorchester, MA 02125"), "Margaret"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Vassar St. 46-4053, Cambridge, MA 02139"), "Vassar"), 
	IOExample(Dict{Symbol, Any}(:x => "5000 Forbes Ave, Pittsburgh, PA 15213"), "Forbes"), 
	IOExample(Dict{Symbol, Any}(:x => "262 Washington Rd, Princeton, NJ 08540"), "Washington"), 
	IOExample(Dict{Symbol, Any}(:x => "77 Massachusetts Ave, Cambridge, MA 02139"), "Massachusetts"), 
	IOExample(Dict{Symbol, Any}(:x => "47 Foskett St. #2, Cambridge, MA 02144"), "Foskett"), 
	IOExample(Dict{Symbol, Any}(:x => "253 Cory Hall, Berkeley, CA 94720"), "Cory"), 
	IOExample(Dict{Symbol, Any}(:x => "450 Serra Mall, Stanford, CA 94305"), "Serra"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Ames St., Portland, OR 02142"), "Ames")])
problem_320 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "c(Et)tHReC(tQjj)hYv"), "ettqjj"), 
	IOExample(Dict{Symbol, Any}(:x => "OAMzG(wEP)wQx(D)x"), "wepd"), 
	IOExample(Dict{Symbol, Any}(:x => "jFl(EMEb)io(bfGW)MolDn"), "emebbfgw"), 
	IOExample(Dict{Symbol, Any}(:x => "ZpyH(Aqv)tfSTo(QlOX)ZiHEE"), "aqvqlox"), 
	IOExample(Dict{Symbol, Any}(:x => "Kz(u)K(tDfP)afP"), "utdfp"), 
	IOExample(Dict{Symbol, Any}(:x => "RwVg(v)yOTS(w)pG"), "vw"), 
	IOExample(Dict{Symbol, Any}(:x => "PD(Vzq)mR(zCpjw)Lp"), "vzqzcpjw"), 
	IOExample(Dict{Symbol, Any}(:x => "m(h)vsmm(a)zTigV"), "ha"), 
	IOExample(Dict{Symbol, Any}(:x => "IYG(qGSAD)ajeRM(wDsh)CpN"), "qgsadwdsh"), 
	IOExample(Dict{Symbol, Any}(:x => "gHiD(LIkMB)meg(c)xSj"), "likmbc")])
problem_321 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "qt(tA)ueC(I)S"), "qtueCS"), 
	IOExample(Dict{Symbol, Any}(:x => "y(lc)rzz(oa)hC"), "yrzzhC"), 
	IOExample(Dict{Symbol, Any}(:x => "Xw(DH)zvi(C)qe"), "Xwzviqe"), 
	IOExample(Dict{Symbol, Any}(:x => "Vw(eP)uYH(Q)ok"), "VwuYHok"), 
	IOExample(Dict{Symbol, Any}(:x => "V(O)JIIu(DY)Ff"), "VJIIuFf"), 
	IOExample(Dict{Symbol, Any}(:x => "o(S)tuq(AB)S"), "otuqS"), 
	IOExample(Dict{Symbol, Any}(:x => "p(UM)nS(R)V"), "pnSV"), 
	IOExample(Dict{Symbol, Any}(:x => "K(T)qR(p)aJ"), "KqRaJ"), 
	IOExample(Dict{Symbol, Any}(:x => "bQ(Q)ePoL(Tg)gK"), "bQePoLgK"), 
	IOExample(Dict{Symbol, Any}(:x => "Hy(m)WE(nT)W"), "HyWEW")])
problem_322 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "p(yE)oVa(I)Co"), "I"), 
	IOExample(Dict{Symbol, Any}(:x => "E(Ds)in(EX)g"), "EX"), 
	IOExample(Dict{Symbol, Any}(:x => "lm(nx)BQU(Ga)H"), "Ga"), 
	IOExample(Dict{Symbol, Any}(:x => "BM(MZ)Kql(Sm)l"), "Sm"), 
	IOExample(Dict{Symbol, Any}(:x => "DJ(fX)EXHs(mb)ng"), "mb"), 
	IOExample(Dict{Symbol, Any}(:x => "v(GN)vIeu(W)a"), "W"), 
	IOExample(Dict{Symbol, Any}(:x => "Tg(G)WVA(GA)j"), "GA"), 
	IOExample(Dict{Symbol, Any}(:x => "mz(iN)glpS(jl)z"), "jl"), 
	IOExample(Dict{Symbol, Any}(:x => "yx(T)YCa(kP)M"), "kP"), 
	IOExample(Dict{Symbol, Any}(:x => "W(t)im(aB)hY"), "aB")])
problem_323 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "nZB3KUiIUW"), "nZB"), 
	IOExample(Dict{Symbol, Any}(:x => "avfmzxQ3HZDFQJB"), "avfmzxQ"), 
	IOExample(Dict{Symbol, Any}(:x => "VIgHT0PWgasCD"), "VIgHT"), 
	IOExample(Dict{Symbol, Any}(:x => "yWnlQfchU8lLcA"), "yWnlQfchU"), 
	IOExample(Dict{Symbol, Any}(:x => "HgCBXD3csJvqDQV"), "HgCBXD"), 
	IOExample(Dict{Symbol, Any}(:x => "MCCPaN0odY"), "MCCPaN"), 
	IOExample(Dict{Symbol, Any}(:x => "EWC3MPfYf"), "EWC"), 
	IOExample(Dict{Symbol, Any}(:x => "Gus8ahv"), "Gus"), 
	IOExample(Dict{Symbol, Any}(:x => "dkmzSBRaF1uDKd"), "dkmzSBRaF"), 
	IOExample(Dict{Symbol, Any}(:x => "Kiuzs7xpUw"), "Kiuzs")])
problem_324 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "LmZ4FCQiV"), "FCQiV"), 
	IOExample(Dict{Symbol, Any}(:x => "shraAsEG1vavDt"), "vavDt"), 
	IOExample(Dict{Symbol, Any}(:x => "tHwfnfmzS2iGPQ"), "iGPQ"), 
	IOExample(Dict{Symbol, Any}(:x => "sWDST1dJZlz"), "dJZlz"), 
	IOExample(Dict{Symbol, Any}(:x => "UOixXm4MaHjUeoH"), "MaHjUeoH"), 
	IOExample(Dict{Symbol, Any}(:x => "zvnEDwJxR8kYvKXq"), "kYvKXq"), 
	IOExample(Dict{Symbol, Any}(:x => "zNm6RngMq"), "RngMq"), 
	IOExample(Dict{Symbol, Any}(:x => "JPghLUBvC4TAzlFEwi"), "TAzlFEwi"), 
	IOExample(Dict{Symbol, Any}(:x => "oUCe3Xub"), "Xub"), 
	IOExample(Dict{Symbol, Any}(:x => "kreJz6pgWG"), "pgWG")])
problem_325 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "rRvuki8rRARN0xXw"), "rRARN"), 
	IOExample(Dict{Symbol, Any}(:x => "qgfQt4hUvW4xQZvWi"), "hUvW"), 
	IOExample(Dict{Symbol, Any}(:x => "lZOIP5aGmlVm3TxXqV"), "aGmlVm"), 
	IOExample(Dict{Symbol, Any}(:x => "Hasdv5dLh1XOIhzF"), "dLh"), 
	IOExample(Dict{Symbol, Any}(:x => "nLtOXA2EKnJ1WSBp"), "EKnJ"), 
	IOExample(Dict{Symbol, Any}(:x => "FAE7dsZji1gKMO"), "dsZji"), 
	IOExample(Dict{Symbol, Any}(:x => "ViZWG9QHSWjr3xgbl"), "QHSWjr"), 
	IOExample(Dict{Symbol, Any}(:x => "YkJM3kXSMN5wqZE"), "kXSMN"), 
	IOExample(Dict{Symbol, Any}(:x => "tZp2YnKS1HKh"), "YnKS"), 
	IOExample(Dict{Symbol, Any}(:x => "TybinS5undWfw3aBb"), "undWfw")])
problem_326 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1766ycm7tv"), "1766"), 
	IOExample(Dict{Symbol, Any}(:x => "5772t0VC"), "5772"), 
	IOExample(Dict{Symbol, Any}(:x => "515788iUeVa"), "515788"), 
	IOExample(Dict{Symbol, Any}(:x => "796931CwWPuoP"), "796931"), 
	IOExample(Dict{Symbol, Any}(:x => "25547LplbcfJ"), "25547"), 
	IOExample(Dict{Symbol, Any}(:x => "626OuqMg2c"), "626"), 
	IOExample(Dict{Symbol, Any}(:x => "32174R8w5rf"), "32174"), 
	IOExample(Dict{Symbol, Any}(:x => "581509kkEQFJ"), "581509"), 
	IOExample(Dict{Symbol, Any}(:x => "3944bQK2f"), "3944"), 
	IOExample(Dict{Symbol, Any}(:x => "576Jyk32aQ"), "576")])
problem_327 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "cAnOQ046885L3JjLu"), "cAnOQ"), 
	IOExample(Dict{Symbol, Any}(:x => "WOGxR914151kdzl"), "WOGxR"), 
	IOExample(Dict{Symbol, Any}(:x => "HPU955526DPtC"), "HPU"), 
	IOExample(Dict{Symbol, Any}(:x => "gsQ1140CFNp"), "gsQ"), 
	IOExample(Dict{Symbol, Any}(:x => "cLak966Y65"), "cLak"), 
	IOExample(Dict{Symbol, Any}(:x => "pNxYs521636Zc1Ju"), "pNxYs"), 
	IOExample(Dict{Symbol, Any}(:x => "wtESaN29294hselD3"), "wtESaN"), 
	IOExample(Dict{Symbol, Any}(:x => "eZFF380ny3yg8"), "eZFF"), 
	IOExample(Dict{Symbol, Any}(:x => "bAHds7170qzJW2F"), "bAHds"), 
	IOExample(Dict{Symbol, Any}(:x => "hlwqEJ275449Tn"), "hlwqEJ")])
problem_32 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "262 Washington Rd, Princeton, NJ 08540"), "Princeton"), 
	IOExample(Dict{Symbol, Any}(:x => "3113 Greenfield Ave., Los Angeles, CA 90034"), "Los Angeles"), 
	IOExample(Dict{Symbol, Any}(:x => "47 Foskett St. #2, Cambridge, MA 02144"), "Cambridge"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Margaret St. #1, Dorchester, MA 02125"), "Dorchester"), 
	IOExample(Dict{Symbol, Any}(:x => "450 Serra Mall, Stanford, CA 94305"), "Stanford"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Ames St., Portland, OR 02142"), "Portland"), 
	IOExample(Dict{Symbol, Any}(:x => "253 Cory Hall, Berkeley, CA 94720"), "Berkeley"), 
	IOExample(Dict{Symbol, Any}(:x => "5000 Forbes Ave, Pittsburgh, PA 15213"), "Pittsburgh"), 
	IOExample(Dict{Symbol, Any}(:x => "77 Massachusetts Ave, Cambridge, MA 02139"), "Cambridge"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Vassar St. 46-4053, Cambridge, MA 02139"), "Cambridge")])
problem_33 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5000 Forbes Ave, Pittsburgh, PA 15213"), "PA"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Vassar St. 46-4053, Cambridge, MA 02139"), "MA"), 
	IOExample(Dict{Symbol, Any}(:x => "47 Foskett St. #2, Cambridge, MA 02144"), "MA"), 
	IOExample(Dict{Symbol, Any}(:x => "77 Massachusetts Ave, Cambridge, MA 02139"), "MA"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Ames St., Portland, OR 02142"), "OR"), 
	IOExample(Dict{Symbol, Any}(:x => "450 Serra Mall, Stanford, CA 94305"), "CA"), 
	IOExample(Dict{Symbol, Any}(:x => "3113 Greenfield Ave., Los Angeles, CA 90034"), "CA"), 
	IOExample(Dict{Symbol, Any}(:x => "253 Cory Hall, Berkeley, CA 94720"), "CA"), 
	IOExample(Dict{Symbol, Any}(:x => "262 Washington Rd, Princeton, NJ 08540"), "NJ"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Margaret St. #1, Dorchester, MA 02125"), "MA")])
problem_34 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "43 Vassar St. 46-4053, Cambridge, MA 02139"), "02139"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Margaret St. #1, Dorchester, MA 02125"), "02125"), 
	IOExample(Dict{Symbol, Any}(:x => "3113 Greenfield Ave., Los Angeles, CA 90034"), "90034"), 
	IOExample(Dict{Symbol, Any}(:x => "262 Washington Rd, Princeton, NJ 08540"), "08540"), 
	IOExample(Dict{Symbol, Any}(:x => "5000 Forbes Ave, Pittsburgh, PA 15213"), "15213"), 
	IOExample(Dict{Symbol, Any}(:x => "47 Foskett St. #2, Cambridge, MA 02144"), "02144"), 
	IOExample(Dict{Symbol, Any}(:x => "450 Serra Mall, Stanford, CA 94305"), "94305"), 
	IOExample(Dict{Symbol, Any}(:x => "77 Massachusetts Ave, Cambridge, MA 02139"), "02139"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Ames St., Portland, OR 02142"), "02142"), 
	IOExample(Dict{Symbol, Any}(:x => "253 Cory Hall, Berkeley, CA 94720"), "94720")])
problem_35 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Joanie Faas"), "J Faas"), 
	IOExample(Dict{Symbol, Any}(:x => "Oma Cornelison"), "O Cornelison"), 
	IOExample(Dict{Symbol, Any}(:x => "Yoshua Bengio"), "Y Bengio"), 
	IOExample(Dict{Symbol, Any}(:x => "Annita Nicely"), "A Nicely"), 
	IOExample(Dict{Symbol, Any}(:x => "Ian Goodfellow"), "I Goodfellow"), 
	IOExample(Dict{Symbol, Any}(:x => "Marin Lorentzen"), "M Lorentzen"), 
	IOExample(Dict{Symbol, Any}(:x => "James Brown"), "J Brown"), 
	IOExample(Dict{Symbol, Any}(:x => "David Beckham"), "D Beckham"), 
	IOExample(Dict{Symbol, Any}(:x => "Verlene Ottley"), "V Ottley"), 
	IOExample(Dict{Symbol, Any}(:x => "Daniele Dunetti"), "D Dunetti")])
problem_36 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Daniele Dunetti"), "DD"), 
	IOExample(Dict{Symbol, Any}(:x => "James Brown"), "JB"), 
	IOExample(Dict{Symbol, Any}(:x => "Marin Lorentzen"), "ML"), 
	IOExample(Dict{Symbol, Any}(:x => "David Beckham"), "DB"), 
	IOExample(Dict{Symbol, Any}(:x => "Joanie Faas"), "JF"), 
	IOExample(Dict{Symbol, Any}(:x => "Annita Nicely"), "AN"), 
	IOExample(Dict{Symbol, Any}(:x => "Ian Goodfellow"), "IG"), 
	IOExample(Dict{Symbol, Any}(:x => "Oma Cornelison"), "OC"), 
	IOExample(Dict{Symbol, Any}(:x => "Verlene Ottley"), "VO"), 
	IOExample(Dict{Symbol, Any}(:x => "Yoshua Bengio"), "YB")])
problem_37 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<numpy>"), "numpy"), 
	IOExample(Dict{Symbol, Any}(:x => "<stdlib>"), "stdlib"), 
	IOExample(Dict{Symbol, Any}(:x => "<system>"), "system"), 
	IOExample(Dict{Symbol, Any}(:x => "<sys.h>"), "sys"), 
	IOExample(Dict{Symbol, Any}(:x => "<iostream>"), "iostream"), 
	IOExample(Dict{Symbol, Any}(:x => "<stdio.h>"), "stdio"), 
	IOExample(Dict{Symbol, Any}(:x => "<os>"), "os"), 
	IOExample(Dict{Symbol, Any}(:x => "<math>"), "math"), 
	IOExample(Dict{Symbol, Any}(:x => "<malloc.h>"), "malloc"), 
	IOExample(Dict{Symbol, Any}(:x => "<main>"), "main")])
problem_38 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<iostream>"), "IOSTREAM"), 
	IOExample(Dict{Symbol, Any}(:x => "<numpy>"), "NUMPY"), 
	IOExample(Dict{Symbol, Any}(:x => "<stdlib>"), "STDLIB"), 
	IOExample(Dict{Symbol, Any}(:x => "<system>"), "SYSTEM"), 
	IOExample(Dict{Symbol, Any}(:x => "<os>"), "OS"), 
	IOExample(Dict{Symbol, Any}(:x => "<main>"), "MAIN"), 
	IOExample(Dict{Symbol, Any}(:x => "<stdio.h>"), "STDIO"), 
	IOExample(Dict{Symbol, Any}(:x => "<malloc.h>"), "MALLOC"), 
	IOExample(Dict{Symbol, Any}(:x => "<math>"), "MATH"), 
	IOExample(Dict{Symbol, Any}(:x => "<sys.h>"), "SYS")])
problem_39 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "#include <main>"), "main"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <sys.h>"), "sys"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <stdlib>"), "stdlib"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <malloc.h>"), "malloc"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <stdio.h>"), "stdio"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <os>"), "os"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <iostream>"), "iostream"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <numpy>"), "numpy"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <system>"), "system"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <math>"), "math")])
problem_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "alice"), "A"), 
	IOExample(Dict{Symbol, Any}(:x => "edith"), "E"), 
	IOExample(Dict{Symbol, Any}(:x => "thomas"), "T"), 
	IOExample(Dict{Symbol, Any}(:x => "laura"), "L"), 
	IOExample(Dict{Symbol, Any}(:x => "paul"), "P"), 
	IOExample(Dict{Symbol, Any}(:x => "chris"), "C"), 
	IOExample(Dict{Symbol, Any}(:x => "james"), "J"), 
	IOExample(Dict{Symbol, Any}(:x => "sarah"), "S"), 
	IOExample(Dict{Symbol, Any}(:x => "nigel"), "N"), 
	IOExample(Dict{Symbol, Any}(:x => "charles"), "C")])
problem_40 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "#include <iostream>"), "IOSTREAM"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <math>"), "MATH"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <numpy>"), "NUMPY"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <malloc.h>"), "MALLOC"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <stdlib>"), "STDLIB"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <sys.h>"), "SYS"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <stdio.h>"), "STDIO"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <main>"), "MAIN"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <os>"), "OS"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <system>"), "SYSTEM")])
problem_41 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Mr Patrick Starfish"), "Patrick Starfish"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Daenerys Targaryen"), "Daenerys Targaryen"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Severus Snape"), "Severus Snape"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Ray Stantz"), "Ray Stantz"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Spongebob Squarepants"), "Spongebob Squarepants"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Montgomery Montgomery"), "Montgomery Montgomery"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Harry Potter"), "Harry Potter"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Hermione Granger"), "Hermione Granger"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Bernard Rieux"), "Bernard Rieux"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Minerva Mcgonagall"), "Minerva Mcgonagall")])
problem_42 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Dr Bernard Rieux"), "Dr Rieux"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Ray Stantz"), "Dr Stantz"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Daenerys Targaryen"), "Ms Targaryen"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Harry Potter"), "Mr Potter"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Severus Snape"), "Professor Snape"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Minerva Mcgonagall"), "Professor Mcgonagall"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Montgomery Montgomery"), "Dr Montgomery"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Spongebob Squarepants"), "Mr Squarepants"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Patrick Starfish"), "Mr Starfish"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Hermione Granger"), "Ms Granger")])
problem_43 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Dr Bernard Rieux"), "Dr"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Daenerys Targaryen"), "Ms"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Hermione Granger"), "Ms"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Ray Stantz"), "Dr"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Minerva Mcgonagall"), "Professor"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Severus Snape"), "Professor"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Harry Potter"), "Mr"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Patrick Starfish"), "Mr"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Spongebob Squarepants"), "Mr"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Montgomery Montgomery"), "Dr")])
problem_44 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "MR HARRY POTTER"), "Harry Potter"), 
	IOExample(Dict{Symbol, Any}(:x => "MR PATRICK STARFISH"), "Patrick Starfish"), 
	IOExample(Dict{Symbol, Any}(:x => "MS DAENERYS TARGARYEN"), "Daenerys Targaryen"), 
	IOExample(Dict{Symbol, Any}(:x => "PROFESSOR MINERVA MCGONAGALL"), "Minerva McGonagall"), 
	IOExample(Dict{Symbol, Any}(:x => "PROFESSOR SEVERUS SNAPE"), "Severus Snape"), 
	IOExample(Dict{Symbol, Any}(:x => "DR RAY STANTZ"), "Ray Stantz"), 
	IOExample(Dict{Symbol, Any}(:x => "MR SPONGEBOB SQUAREPANTS"), "Spongebob Squarepants"), 
	IOExample(Dict{Symbol, Any}(:x => "DR BERNARD RIEUX"), "Bernard Rieux"), 
	IOExample(Dict{Symbol, Any}(:x => "DR MONTGOMERY MONTGOMERY"), "Montgomery Montgomery"), 
	IOExample(Dict{Symbol, Any}(:x => "MS HERMIONE GRANGER"), "Hermione Granger")])
problem_45 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "DR BERNARD RIEUX"), "Dr Rieux"), 
	IOExample(Dict{Symbol, Any}(:x => "DR RAY STANTZ"), "Dr Stantz"), 
	IOExample(Dict{Symbol, Any}(:x => "PROFESSOR MINERVA MCGONAGALL"), "Professor Mcgonagall"), 
	IOExample(Dict{Symbol, Any}(:x => "DR MONTGOMERY MONTGOMERY"), "Dr Montgomery"), 
	IOExample(Dict{Symbol, Any}(:x => "MS HERMIONE GRANGER"), "Ms Granger"), 
	IOExample(Dict{Symbol, Any}(:x => "PROFESSOR SEVERUS SNAPE"), "Professor Snape"), 
	IOExample(Dict{Symbol, Any}(:x => "MR SPONGEBOB SQUAREPANTS"), "Mr Squarepants"), 
	IOExample(Dict{Symbol, Any}(:x => "MR HARRY POTTER"), "Mr Potter"), 
	IOExample(Dict{Symbol, Any}(:x => "MR PATRICK STARFISH"), "Mr Starfish"), 
	IOExample(Dict{Symbol, Any}(:x => "MS DAENERYS TARGARYEN"), "Ms Targaryen")])
problem_46 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "of which sugars 2.5g 0.6g"), "2.5g"), 
	IOExample(Dict{Symbol, Any}(:x => "Fibre 3.5g 0.9g"), "0.9g"), 
	IOExample(Dict{Symbol, Any}(:x => "Energy kCal 708kCal 177kCal"), "708kCal"), 
	IOExample(Dict{Symbol, Any}(:x => "Salt 0.1g Trace"), "0.1g"), 
	IOExample(Dict{Symbol, Any}(:x => "Sodium N/A N/A"), "N/A"), 
	IOExample(Dict{Symbol, Any}(:x => "of which saturates 5.6g 1.4g"), "5.6g"), 
	IOExample(Dict{Symbol, Any}(:x => "Protein 17.0g 4.3g"), "17.0g"), 
	IOExample(Dict{Symbol, Any}(:x => "Fat 69.0g 17.0g"), "69.0g"), 
	IOExample(Dict{Symbol, Any}(:x => "Energy kJ 2,923kJ 731kJ"), "2,923kJ"), 
	IOExample(Dict{Symbol, Any}(:x => "Carbohydrate 3.1g 0.8g"), "3.1g")])
problem_47 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "thOMas"), "thomas"), 
	IOExample(Dict{Symbol, Any}(:x => "saRAh"), "sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "niGEl"), "nigel"), 
	IOExample(Dict{Symbol, Any}(:x => "alICe"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "chRIs"), "chris"), 
	IOExample(Dict{Symbol, Any}(:x => "chARleS"), "charles"), 
	IOExample(Dict{Symbol, Any}(:x => "jaMEs"), "james"), 
	IOExample(Dict{Symbol, Any}(:x => "paUL"), "paul"), 
	IOExample(Dict{Symbol, Any}(:x => "laURa"), "laura"), 
	IOExample(Dict{Symbol, Any}(:x => "edITh"), "edith")])
problem_48 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "alice"), "alICe"), 
	IOExample(Dict{Symbol, Any}(:x => "james"), "jaMEs"), 
	IOExample(Dict{Symbol, Any}(:x => "charles"), "chARleS"), 
	IOExample(Dict{Symbol, Any}(:x => "sarah"), "saRAh"), 
	IOExample(Dict{Symbol, Any}(:x => "nigel"), "niGEl"), 
	IOExample(Dict{Symbol, Any}(:x => "chris"), "chRIs"), 
	IOExample(Dict{Symbol, Any}(:x => "thomas"), "thOMas"), 
	IOExample(Dict{Symbol, Any}(:x => "edith"), "edITh"), 
	IOExample(Dict{Symbol, Any}(:x => "paul"), "paUL"), 
	IOExample(Dict{Symbol, Any}(:x => "laura"), "laURa")])
problem_49 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "16,079 inferences, 0.003 CPU in 0.003 seconds (95% CPU, 5842660 Lips)"), "16,079"), 
	IOExample(Dict{Symbol, Any}(:x => "39,258 inferences, 0.007 CPU in 0.008 seconds (85% CPU, 5972615 Lips)"), "39,258"), 
	IOExample(Dict{Symbol, Any}(:x => "12,111 inferences, 0.002 CPU in 0.002 seconds (95% CPU, 6255682 Lips)"), "12,111"), 
	IOExample(Dict{Symbol, Any}(:x => "35,695 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6902920 Lips)"), "35,695"), 
	IOExample(Dict{Symbol, Any}(:x => "514,102 inferences, 0.051 CPU in 0.059 seconds (86% CPU, 10154499 Lips)"), "514,102"), 
	IOExample(Dict{Symbol, Any}(:x => "215,282,111 inferences, 23.671 CPU in 24.283 seconds (97% CPU, 9094687 Lips)"), "215,282,111"), 
	IOExample(Dict{Symbol, Any}(:x => "9,675,636 inferences, 0.903 CPU in 0.929 seconds (97% CPU, 10718278 Lips)"), "9,675,636"), 
	IOExample(Dict{Symbol, Any}(:x => "5,860 inferences, 0.001 CPU in 0.001 seconds (98% CPU, 6475138 Lips)"), "5,860"), 
	IOExample(Dict{Symbol, Any}(:x => "35,698 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6854455 Lips)"), "35,698"), 
	IOExample(Dict{Symbol, Any}(:x => "1,085 inferences, 0.000 CPU in 0.000 seconds (91% CPU, 4254902 Lips)"), "1,085")])
problem_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "thomas"), "Thomas"), 
	IOExample(Dict{Symbol, Any}(:x => "chris"), "Chris"), 
	IOExample(Dict{Symbol, Any}(:x => "jozie"), "Jozie"), 
	IOExample(Dict{Symbol, Any}(:x => "james"), "James"), 
	IOExample(Dict{Symbol, Any}(:x => "amy"), "Amy"), 
	IOExample(Dict{Symbol, Any}(:x => "charles"), "Charles"), 
	IOExample(Dict{Symbol, Any}(:x => "ben"), "Ben"), 
	IOExample(Dict{Symbol, Any}(:x => "paul"), "Paul"), 
	IOExample(Dict{Symbol, Any}(:x => "frank"), "Frank"), 
	IOExample(Dict{Symbol, Any}(:x => "laura"), "Laura")])
problem_50 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "215,282,111 inferences, 23.671 CPU in 24.283 seconds (97% CPU, 9094687 Lips)"), "23.671"), 
	IOExample(Dict{Symbol, Any}(:x => "1,085 inferences, 0.000 CPU in 0.000 seconds (91% CPU, 4254902 Lips)"), "0.000"), 
	IOExample(Dict{Symbol, Any}(:x => "5,860 inferences, 0.001 CPU in 0.001 seconds (98% CPU, 6475138 Lips)"), "0.001"), 
	IOExample(Dict{Symbol, Any}(:x => "12,111 inferences, 0.002 CPU in 0.002 seconds (95% CPU, 6255682 Lips)"), "0.002"), 
	IOExample(Dict{Symbol, Any}(:x => "35,698 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6854455 Lips)"), "0.005"), 
	IOExample(Dict{Symbol, Any}(:x => "9,675,636 inferences, 0.903 CPU in 0.929 seconds (97% CPU, 10718278 Lips)"), "0.903"), 
	IOExample(Dict{Symbol, Any}(:x => "35,695 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6902920 Lips)"), "0.005"), 
	IOExample(Dict{Symbol, Any}(:x => "39,258 inferences, 0.007 CPU in 0.008 seconds (85% CPU, 5972615 Lips)"), "0.007"), 
	IOExample(Dict{Symbol, Any}(:x => "514,102 inferences, 0.051 CPU in 0.059 seconds (86% CPU, 10154499 Lips)"), "0.051"), 
	IOExample(Dict{Symbol, Any}(:x => "16,079 inferences, 0.003 CPU in 0.003 seconds (95% CPU, 5842660 Lips)"), "0.003")])
problem_51 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "514,102 inferences, 0.051 CPU in 0.059 seconds (86% CPU, 10154499 Lips)"), "0.059"), 
	IOExample(Dict{Symbol, Any}(:x => "1,085 inferences, 0.000 CPU in 0.000 seconds (91% CPU, 4254902 Lips)"), "0.000"), 
	IOExample(Dict{Symbol, Any}(:x => "5,860 inferences, 0.001 CPU in 0.001 seconds (98% CPU, 6475138 Lips)"), "0.001"), 
	IOExample(Dict{Symbol, Any}(:x => "35,695 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6902920 Lips)"), "0.006"), 
	IOExample(Dict{Symbol, Any}(:x => "12,111 inferences, 0.002 CPU in 0.002 seconds (95% CPU, 6255682 Lips)"), "0.002"), 
	IOExample(Dict{Symbol, Any}(:x => "215,282,111 inferences, 23.671 CPU in 24.283 seconds (97% CPU, 9094687 Lips)"), "24.283"), 
	IOExample(Dict{Symbol, Any}(:x => "35,698 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6854455 Lips)"), "0.006"), 
	IOExample(Dict{Symbol, Any}(:x => "39,258 inferences, 0.007 CPU in 0.008 seconds (85% CPU, 5972615 Lips)"), "0.008"), 
	IOExample(Dict{Symbol, Any}(:x => "9,675,636 inferences, 0.903 CPU in 0.929 seconds (97% CPU, 10718278 Lips)"), "0.929"), 
	IOExample(Dict{Symbol, Any}(:x => "16,079 inferences, 0.003 CPU in 0.003 seconds (95% CPU, 5842660 Lips)"), "0.003")])
problem_52 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "12,111 inferences, 0.002 CPU in 0.002 seconds (95% CPU, 6255682 Lips)"), "6255682"), 
	IOExample(Dict{Symbol, Any}(:x => "16,079 inferences, 0.003 CPU in 0.003 seconds (95% CPU, 5842660 Lips)"), "5842660"), 
	IOExample(Dict{Symbol, Any}(:x => "39,258 inferences, 0.007 CPU in 0.008 seconds (85% CPU, 5972615 Lips)"), "5972615"), 
	IOExample(Dict{Symbol, Any}(:x => "35,698 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6854455 Lips)"), "6854455"), 
	IOExample(Dict{Symbol, Any}(:x => "215,282,111 inferences, 23.671 CPU in 24.283 seconds (97% CPU, 9094687 Lips)"), "9094687"), 
	IOExample(Dict{Symbol, Any}(:x => "514,102 inferences, 0.051 CPU in 0.059 seconds (86% CPU, 10154499 Lips)"), "10154499"), 
	IOExample(Dict{Symbol, Any}(:x => "35,695 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6902920 Lips)"), "6902920"), 
	IOExample(Dict{Symbol, Any}(:x => "1,085 inferences, 0.000 CPU in 0.000 seconds (91% CPU, 4254902 Lips)"), "4254902"), 
	IOExample(Dict{Symbol, Any}(:x => "9,675,636 inferences, 0.903 CPU in 0.929 seconds (97% CPU, 10718278 Lips)"), "10718278"), 
	IOExample(Dict{Symbol, Any}(:x => "5,860 inferences, 0.001 CPU in 0.001 seconds (98% CPU, 6475138 Lips)"), "6475138")])
problem_53 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;1,633,000</strong>"), "1,633,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;3,000</strong>"), "3,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;133,000</strong>"), "133,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;625,000</strong>"), "625,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;635,000</strong>"), "635,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;2,950,000</strong>"), "2,950,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;775,000</strong>"), "775,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;33,000</strong>"), "33,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;633,000</strong>"), "633,000")])
problem_54 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"small.jpg\">"), "jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"meme.gif\">"), "gif"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"stoic.jpg\">"), "jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"help.jpg\">"), "jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"yes.png\">"), "png"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"no.png\">"), "png"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"flamingo.jpg\">"), "jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"sad.jpg\">"), "jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"smiley.gif\">"), "gif"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"cow.gif\">"), "gif")])
problem_55 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"yes.png\">"), "yes.png"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"cow.gif\">"), "cow.gif"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"sad.jpg\">"), "sad.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"stoic.jpg\">"), "stoic.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"flamingo.jpg\">"), "flamingo.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"smiley.gif\">"), "smiley.gif"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"small.jpg\">"), "small.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"no.png\">"), "no.png"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"help.jpg\">"), "help.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"meme.gif\">"), "meme.gif")])
problem_56 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "www.independent.co.uk"), "independent.co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "www.corriere.it"), "corriere.it"), 
	IOExample(Dict{Symbol, Any}(:x => "www.bbc.co.uk"), "bbc.co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "www.bild.de"), "bild.de"), 
	IOExample(Dict{Symbol, Any}(:x => "www.telegraph.co.uk"), "telegraph.co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "www.elpais.com"), "elpais.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.washingtonpost.com"), "washingtonpost.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.nytimes.com"), "nytimes.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.theguardian.com"), "theguardian.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.lemonde.fr"), "lemonde.fr")])
problem_57 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "www.lemonde.fr"), "fr"), 
	IOExample(Dict{Symbol, Any}(:x => "www.washingtonpost.com"), "com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.theguardian.com"), "com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.elpais.com"), "com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.bbc.co.uk"), "co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "www.corriere.it"), "it"), 
	IOExample(Dict{Symbol, Any}(:x => "www.telegraph.co.uk"), "co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "www.bild.de"), "de"), 
	IOExample(Dict{Symbol, Any}(:x => "www.independent.co.uk"), "co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "www.nytimes.com"), "com")])
problem_58 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"google.com\">search</a>"), "google.com"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"html_images.asp\">HTML Images</a>"), "html_images.asp"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"url\">text</a>"), "url"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"bbc.co.uk\">bbc</a>"), "bbc.co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"url\">link text</a>"), "url"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"https://www.w3schools.com/\">Visit W3Schools!</a>"), "https://www.w3schools.com/"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"homepage\">link text</a>"), "homepage"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"default.asp\">HTML tutorial</a>"), "default.asp"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"bbc.co.uk\">news</a>"), "bbc.co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"/html/default.asp\">HTML tutorial</a>"), "/html/default.asp")])
problem_59 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Gerson Zaverucha, Vitor Santos Costa, Aline Paes:"), "Zaverucha, Santos Costa, Paes"), 
	IOExample(Dict{Symbol, Any}(:x => "Paolo Frasconi, Francesca A. Lisi:"), "Frasconi, Lisi"), 
	IOExample(Dict{Symbol, Any}(:x => "Katsumi Inoue, Hayato Ohwada, Akihiro Yamamoto:"), "Inoue, Ohwada, Yamamoto"), 
	IOExample(Dict{Symbol, Any}(:x => "Luc De Raedt:"), "De Raedt"), 
	IOExample(Dict{Symbol, Any}(:x => "Jesse Davis, Jan Ramon:"), "Davis, Ramon"), 
	IOExample(Dict{Symbol, Any}(:x => "James Cussens, Alessandra Russo:"), "Cussens, Russo"), 
	IOExample(Dict{Symbol, Any}(:x => "Hendrik Blockeel, Jan Ramon, Jude W. Shavlik, Prasad Tadepalli:"), "Blockeel, Ramon, Shavlik, Tadepalli"), 
	IOExample(Dict{Symbol, Any}(:x => "Fabrizio Riguzzi, Filip Zelezny:"), "Riguzzi, Zelezny"), 
	IOExample(Dict{Symbol, Any}(:x => "Stephen Muggleton, Alireza Tamaddoni-Nezhad, Francesca A. Lisi:"), "Muggleton, Tamaddoni-Nezhad, Lisi"), 
	IOExample(Dict{Symbol, Any}(:x => "Filip Zelezny, Nada Lavrac:"), "Zelezny, Lavrac")])
problem_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "chris."), "chris"), 
	IOExample(Dict{Symbol, Any}(:x => "james."), "james"), 
	IOExample(Dict{Symbol, Any}(:x => "edward."), "edward"), 
	IOExample(Dict{Symbol, Any}(:x => "edwin."), "edwin"), 
	IOExample(Dict{Symbol, Any}(:x => "max."), "max"), 
	IOExample(Dict{Symbol, Any}(:x => "amelia."), "amelia"), 
	IOExample(Dict{Symbol, Any}(:x => "charles."), "charles"), 
	IOExample(Dict{Symbol, Any}(:x => "thomas."), "thomas"), 
	IOExample(Dict{Symbol, Any}(:x => "tom."), "tom"), 
	IOExample(Dict{Symbol, Any}(:x => "paul."), "paul")])
problem_60 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Katsumi Inoue, Hayato Ohwada, Akihiro Yamamoto:"), "K Inoue, H Ohwada, A Yamamoto"), 
	IOExample(Dict{Symbol, Any}(:x => "Hendrik Blockeel, Jan Ramon, Jude W. Shavlik, Prasad Tadepalli:"), "H Blockeel, J Ramon, J Shavlik, P Tadepalli"), 
	IOExample(Dict{Symbol, Any}(:x => "Stephen Muggleton, Alireza Tamaddoni-Nezhad, Francesca A. Lisi:"), "S Muggleton, A Tamaddoni-Nezhad, F Lisi"), 
	IOExample(Dict{Symbol, Any}(:x => "Gerson Zaverucha, Vitor Santos Costa, Aline Paes:"), "G Zaverucha, V Santos Costa, A Paes"), 
	IOExample(Dict{Symbol, Any}(:x => "Filip Zelezny, Nada Lavrac:"), "F Zelezny, N Lavrac"), 
	IOExample(Dict{Symbol, Any}(:x => "James Cussens, Alessandra Russo:"), "J Cussens, A Russo"), 
	IOExample(Dict{Symbol, Any}(:x => "Luc De Raedt:"), "L De Raedt"), 
	IOExample(Dict{Symbol, Any}(:x => "Jesse Davis, Jan Ramon:"), "Davis, Ramon"), 
	IOExample(Dict{Symbol, Any}(:x => "Fabrizio Riguzzi, Filip Zelezny:"), "F Riguzzi, F Zelezny"), 
	IOExample(Dict{Symbol, Any}(:x => "Paolo Frasconi, Francesca A. Lisi:"), "P Frasconi, F Lisi")])
problem_61 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "ILP 2008"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "ILP 2014"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "ILP 2016"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "ILP 2012"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "ILP 2013"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "ILP 2007"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "ILP 2011"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "ILP 2010"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "ILP 2009"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "ILP 2015")])
problem_62 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "Windsor Great Park"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "Prague"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "Leuven"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "Nancy"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "London"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "Florence"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "Dubrovnik"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "Corvallis"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "Kyoto"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "Rio de Janeiro")])
problem_63 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "2010"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "2007"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "2013"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "2009"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "2012"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "2014"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "2008"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "2015"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "2011"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "2016")])
problem_64 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "Belgium"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "UK"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "Croatia"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "Japan"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "Brazil"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "Czech Republic"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "USA"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "UK")])
problem_65 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "September"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "September"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "September"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "June"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "July"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "August"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "August"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "September"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "June"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "August")])
problem_66 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "-9-1--345835"), "91345835"), 
	IOExample(Dict{Symbol, Any}(:x => "-4---13-54---82-"), "4135482"), 
	IOExample(Dict{Symbol, Any}(:x => "5----"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "-3-6--0--270-"), "360270"), 
	IOExample(Dict{Symbol, Any}(:x => "5-79---5--24-"), "579524"), 
	IOExample(Dict{Symbol, Any}(:x => "4---5----9"), "459"), 
	IOExample(Dict{Symbol, Any}(:x => "-075--3-474-"), "0753474"), 
	IOExample(Dict{Symbol, Any}(:x => "-9--640019"), "9640019"), 
	IOExample(Dict{Symbol, Any}(:x => "-1---7266"), "17266"), 
	IOExample(Dict{Symbol, Any}(:x => "-1-0"), "10")])
problem_67 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2017\">26. IJCAI 2017: Melbourne, VIC, Australia</h2>"), "2017"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2005\">19. IJCAI 2005: Edinburgh, Scotland, UK</h2>"), "2005"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2013\">23. IJCAI 2013: Beijing, China</h2>"), "2013"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2015\">24. IJCAI 2015: Buenos Aires, Argentina</h2>"), "2015"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2007\">20. IJCAI 2007: Hyderabad, India</h2>"), "2007"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2009\">21. IJCAI 2009: Pasadena, California, USA</h2>"), "2009"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2001\">17. IJCAI 2001: Seattle, USA</h2>"), "2001"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2011\">22. IJCAI 2011: Barcelona, Catalonia, Spain</h2>"), "2011"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2003\">18. IJCAI 2003: Acapulco, Mexico</h2>"), "2003"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2016\">25. IJCAI 2016: New York, NY, USA</h2>"), "2016")])
problem_68 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2001\">17. IJCAI 2001: Seattle, USA</h2>"), "Seattle"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2013\">23. IJCAI 2013: Beijing, China</h2>"), "Beijing"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2011\">22. IJCAI 2011: Barcelona, Catalonia, Spain</h2>"), "Barcelona"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2003\">18. IJCAI 2003: Acapulco, Mexico</h2>"), "Acapulco"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2017\">26. IJCAI 2017: Melbourne, VIC, Australia</h2>"), "Melbourne"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2005\">19. IJCAI 2005: Edinburgh, Scotland, UK</h2>"), "Edinburgh"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2009\">21. IJCAI 2009: Pasadena, California, USA</h2>"), "Pasadena"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2015\">24. IJCAI 2015: Buenos Aires, Argentina</h2>"), "Buenos Aires"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2016\">25. IJCAI 2016: New York, NY, USA</h2>"), "New York"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2007\">20. IJCAI 2007: Hyderabad, India</h2>"), "Hyderabad")])
problem_69 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2007\">20. IJCAI 2007: Hyderabad, India</h2>"), "India"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2005\">19. IJCAI 2005: Edinburgh, Scotland, UK</h2>"), "UK"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2001\">17. IJCAI 2001: Seattle, USA</h2>"), "USA"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2016\">25. IJCAI 2016: New York, NY, USA</h2>"), "USA"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2017\">26. IJCAI 2017: Melbourne, VIC, Australia</h2>"), "Australia"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2013\">23. IJCAI 2013: Beijing, China</h2>"), "China"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2011\">22. IJCAI 2011: Barcelona, Catalonia, Spain</h2>"), "Spain"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2003\">18. IJCAI 2003: Acapulco, Mexico</h2>"), "Mexico"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2009\">21. IJCAI 2009: Pasadena, California, USA</h2>"), "USA"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2015\">24. IJCAI 2015: Buenos Aires, Argentina</h2>"), "Argentina")])
problem_6 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "David Beckham"), "Beckham"), 
	IOExample(Dict{Symbol, Any}(:x => "Annita Nicely"), "Nicely"), 
	IOExample(Dict{Symbol, Any}(:x => "Tim Howard"), "Howard"), 
	IOExample(Dict{Symbol, Any}(:x => "Oma Cornelison"), "Cornelison"), 
	IOExample(Dict{Symbol, Any}(:x => "Marin Lorentzen"), "Lorentzen"), 
	IOExample(Dict{Symbol, Any}(:x => "James Brown"), "Brown"), 
	IOExample(Dict{Symbol, Any}(:x => "David Batty"), "Batty"), 
	IOExample(Dict{Symbol, Any}(:x => "Micheal Owen"), "Owen"), 
	IOExample(Dict{Symbol, Any}(:x => "Verlene Ottley"), "Ottley"), 
	IOExample(Dict{Symbol, Any}(:x => "Joanie Faas"), "Faas")])
problem_70 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "September, 2016"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "July, 2009"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "June, 2007"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "August, 2013"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "July-August, 2011"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "September, 2014"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "June, 2010"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "August, 2015"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "September, 2008"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "September, 2012")])
problem_71 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:6JYxLv2GGPaZDkyJaHSQJY"), "6JYxLv2GGPaZDkyJaHSQJY"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:5Wo7vtVNx8Hz2L9CSf7tKd"), "5Wo7vtVNx8Hz2L9CSf7tKd"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:6jRAiWrKhURIcFGPEeMnsD"), "6jRAiWrKhURIcFGPEeMnsD"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:2WjkOw9JVbvAdKKUaGs3OK"), "2WjkOw9JVbvAdKKUaGs3OK"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:2MWyl7mj5wM75B3t3D5z4E"), "2MWyl7mj5wM75B3t3D5z4E"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:1OxcIUqVmVYxT6427tbhDW"), "1OxcIUqVmVYxT6427tbhDW"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:5An6plSS4zk3mLQyA3IoFr"), "5An6plSS4zk3mLQyA3IoFr"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:6wMTeVootJ8RdCLNOZy5Km"), "6wMTeVootJ8RdCLNOZy5Km"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:3BiIPNWmMeJAK9iwEFTeDX"), "3BiIPNWmMeJAK9iwEFTeDX"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:6HJujxcjMmVZhd8z5EpPri"), "6HJujxcjMmVZhd8z5EpPri")])
problem_72 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Alex Rodriguez\", \"NYY\", \"Third Baseman\""), "Alex Rodriguez"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Kenji Johjima\", \"SEA\", \"Catcher\""), "Kenji Johjima"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Barry Bonds\", \"SF\", \"Outfielder\""), "Barry Bonds"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jeff Mathis\", \"ANA\", \"Catcher\""), "Jeff Mathis"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Tom Gordon\", \"PHI\", \"Relief Pitcher\""), "Tom Gordon"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Vladimir Guerrero\", \"ANA\", \"Outfielder\""), "Vladimir Guerrero"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Scott Podsednik\", \"CWS\", \"Outfielder\""), "Scott Podsednik"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Albert Pujols\", \"STL\", \"First Baseman\""), "Albert Pujols"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Roberto Novoa\", \"CHC\", \"Relief Pitcher\""), "Roberto Novoa"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Mark Buehrle\", \"CWS\", \"Starting Pitcher\""), "Mark Buehrle")])
problem_73 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Albert Pujols\", \"STL\", \"First Baseman\""), "STL"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Scott Podsednik\", \"CWS\", \"Outfielder\""), "CWS"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Roberto Novoa\", \"CHC\", \"Relief Pitcher\""), "CHC"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jeff Mathis\", \"ANA\", \"Catcher\""), "ANA"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Vladimir Guerrero\", \"ANA\", \"Outfielder\""), "ANA"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Mark Buehrle\", \"CWS\", \"Starting Pitcher\""), "CWS"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Tom Gordon\", \"PHI\", \"Relief Pitcher\""), "PHI"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Barry Bonds\", \"SF\", \"Outfielder\""), "SF"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex Rodriguez\", \"NYY\", \"Third Baseman\""), "NYY"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Kenji Johjima\", \"SEA\", \"Catcher\""), "SEA")])
problem_74 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Roberto Novoa\", \"CHC\", \"Relief Pitcher\""), "Relief Pitcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Tom Gordon\", \"PHI\", \"Relief Pitcher\""), "Relief Pitcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Kenji Johjima\", \"SEA\", \"Catcher\""), "Catcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Vladimir Guerrero\", \"ANA\", \"Outfielder\""), "Outfielder"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Scott Podsednik\", \"CWS\", \"Outfielder\""), "Outfielder"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Mark Buehrle\", \"CWS\", \"Starting Pitcher\""), "Starting Pitcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jeff Mathis\", \"ANA\", \"Catcher\""), "Catcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex Rodriguez\", \"NYY\", \"Third Baseman\""), "Third Baseman"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Barry Bonds\", \"SF\", \"Outfielder\""), "Outfielder"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Albert Pujols\", \"STL\", \"First Baseman\""), "First Baseman")])
problem_75 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Jeff Mathis\", \"ANA\", \"Catcher\""), "Jeff Mathis, ANA"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Roberto Novoa\", \"CHC\", \"Relief Pitcher\""), "Roberto Novoa, CHC"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Barry Bonds\", \"SF\", \"Outfielder\""), "Barry Bonds, SF"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Kenji Johjima\", \"SEA\", \"Catcher\""), "Kenji Johjima, SEA"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex Rodriguez\", \"NYY\", \"Third Baseman\""), "Alex Rodriguez, NYY"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Scott Podsednik\", \"CWS\", \"Outfielder\""), "Scott Podsednik, CWS"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Albert Pujols\", \"STL\", \"First Baseman\""), "Albert Pujols, STL"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Tom Gordon\", \"PHI\", \"Relief Pitcher\""), "Tom Gordon, PHI"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Vladimir Guerrero\", \"ANA\", \"Outfielder\""), "Vladimir Guerrero, ANA"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Mark Buehrle\", \"CWS\", \"Starting Pitcher\""), "Mark Buehrle, CWS")])
problem_76 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Reds\",82.20,97"), "Reds"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Athletics\",55.37, 94"), "Athletics"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Rays\",64.17, 90"), "Rays"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Rangers\",120.51, 93"), "Rangers"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Braves\",83.31,94"), "Braves"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Yankees\",197.96,95"), "Yankees"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Nationals\",81.34,98"), "Nationals"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Orioles\",81.43, 93"), "Orioles"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Giants\",117.62,94"), "Giants"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Angels\",154.49, 89"), "Angels")])
problem_77 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Nationals\",81.34,98"), "Nationals,81.34,98"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Braves\",83.31,94"), "Braves,83.31,94"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Rays\",64.17,90"), "Rays,90"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Athletics\",55.37,94"), "Athletics,94"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Giants\",117.62,94"), "Giants,117.62,94"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Reds\",82.20,97"), "Reds,82.20,97"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Yankees\",197.96,95"), "Yankees,197.96,95"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Angels\",154.49,89"), "Angels,89"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Rangers\",120.51,93"), "Rangers,93"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Orioles\",81.43,93"), "Orioles,93")])
problem_78 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Dave\",\"M\",39,72,167"), "Dave,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Bert\",\"M\",42,68,166"), "Bert,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Carl\",\"M\",32,70,155"), "Carl,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Elly\",\"F\",30,66,124"), "Elly,F"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Hank\",\"M\",30,71,158"), "Hank,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jake\",\"M\",32,69,143"), "Jake,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Ivan\",\"M\",53,72,175"), "Ivan,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex\",\"M\",41,74,170"), "Alex,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Gwen\",\"F\",26,64,121"), "Gwen,F"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Fran\",\"F\",33,66,115"), "Fran,F")])
problem_79 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Dave\",\"M\",39,72,167"), "Dave,M,39,72,167"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Elly\",\"F\",30,66,124"), "Elly,F,30,66,124"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Ivan\",\"M\",53,72,175"), "Ivan,M,53,72,175"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Fran\",\"F\",33,66,115"), "Fran,F,33,66,115"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex\",\"M\",41,74,170"), "Alex,M,41,74,170"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Hank\",\"M\",30,71,158"), "Hank,M,30,71,158"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Carl\",\"M\",32,70,155"), "Carl,M,32,70,155"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Gwen\",\"F\",26,64,121"), "Gwen,F,26,64,121"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jake\",\"M\",32,69,143"), "Jake,M,32,69,143"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Bert\",\"M\",42,68,166"), "Bert,M,42,68,166")])
problem_7 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Arthur Joe Juan"), "AJJ"), 
	IOExample(Dict{Symbol, Any}(:x => "David James James"), "DJJ"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Andy Sid"), "SAS"), 
	IOExample(Dict{Symbol, Any}(:x => "Jose Larry Scott"), "JLS"), 
	IOExample(Dict{Symbol, Any}(:x => "Alice Bob Charlie"), "ABC"), 
	IOExample(Dict{Symbol, Any}(:x => "Jeanne Laura Sarah"), "JLS"), 
	IOExample(Dict{Symbol, Any}(:x => "Bob Ben Carol"), "BBC"), 
	IOExample(Dict{Symbol, Any}(:x => "Kevin Jason Matthew"), "KJM"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Steven George"), "DSG"), 
	IOExample(Dict{Symbol, Any}(:x => "Raymond Frank Timothy"), "RFT")])
problem_80 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Hank\",\"M\",30,71,158"), "Hank"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Dave\",\"M\",39,72,167"), "Dave"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Bert\",\"M\",42,68,166"), "Bert"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Elly\",\"F\",30,66,124"), "Elly"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jake\",\"M\",32,69,143"), "Jake"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Gwen\",\"F\",26,64,121"), "Gwen"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Carly\",\"F\",32,70,155"), "Carly"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Fran\",\"F\",33,66,115"), "Fran"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex\",\"M\",41,74,170"), "Alex"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Ivan\",\"M\",53,72,175"), "Ivan")])
problem_81 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Carly\",\"F\",32,70,155"), "F"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex\",\"M\",41,74,170"), "M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Fran\",\"F\",33,66,115"), "F"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Bert\",\"M\",42,68,166"), "M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Gwen\",\"F\",26,64,121"), "F"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jake\",\"M\",32,69,143"), "M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Ivan\",\"M\",53,72,175"), "M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Dave\",\"M\",39,72,167"), "M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Hank\",\"M\",30,71,158"), "M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Elly\",\"F\",30,66,124"), "F")])
problem_82 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<country>Iceland</country>"), "Iceland"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Italy</country>"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Spain</country>"), "Spain"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Denmark</country>"), "Denmark"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Scotland</country>"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Norway</country>"), "Norway"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Sweden</country>"), "Sweden"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Finland</country>"), "Finland"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>France</country>"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Germany</country>"), "Germany")])
problem_83 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<price>30.66</price>"), "30.66"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>124.00</price>"), "124.00"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>21.21</price>"), "21.21"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>30.21</price>"), "30.21"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>10.00</price>"), "10.00"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>12.00</price>"), "12.00"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>19.90</price>"), "19.90"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>9.90</price>"), "9.90"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>16.66</price>"), "16.66"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>22.20</price>"), "22.20")])
problem_84 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk108\"><price>12.95</price></book>"), "bk108"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk109\"><price>11.00</price></book>"), "bk109"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk101\"><price>44.95</price></book>"), "bk101"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk105\"><price>5.95</price></book>"), "bk105"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk110\"><price>41.00</price></book>"), "bk110"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk103\"><price>5.95</price></book>"), "bk103"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk106\"><price>1.95</price></book>"), "bk106"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk102\"><price>5.95</price></book>"), "bk102"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk104\"><price>5.95</price></book>"), "bk104"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk107\"><price>2.95</price></book>"), "bk107")])
problem_85 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk106\"><price>1.95</price></book>"), "1.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk107\"><price>2.95</price></book>"), "2.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk108\"><price>12.95</price></book>"), "12.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk104\"><price>5.95</price></book>"), "5.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk101\"><price>44.95</price></book>"), "44.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk103\"><price>5.95</price></book>"), "5.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk102\"><price>5.95</price></book>"), "5.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk109\"><price>11.00</price></book>"), "11.00"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk105\"><price>5.95</price></book>"), "5.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk110\"><price>41.00</price></book>"), "41.00")])
problem_86 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk109\"><price>11.00</price></book>"), "<price>11.00</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk108\"><price>12.95</price></book>"), "<price>12.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk105\"><price>5.95</price></book>"), "<price>5.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk106\"><price>1.95</price></book>"), "<price>1.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk110\"><price>41.00</price></book>"), "<price>41.00</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk104\"><price>5.95</price></book>"), "<price>5.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk107\"><price>2.95</price></book>"), "<price>2.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk101\"><price>44.95</price></book>"), "<price>44.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk102\"><price>5.95</price></book>"), "<price>5.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk103\"><price>5.95</price></book>"), "<price>5.95</price>")])
problem_87 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "test.sh"), "sh"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG1298.JPEG"), "JPEG"), 
	IOExample(Dict{Symbol, Any}(:x => "results.py"), "py"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG0972.mov"), "mov"), 
	IOExample(Dict{Symbol, Any}(:x => "probs.txt"), "txt"), 
	IOExample(Dict{Symbol, Any}(:x => "DGC1298.JPEG"), "JPEG"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG13414.PNG"), "PNG"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG1898.JPG"), "JPG"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG134141.jpg"), "jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "stack.txt"), "txt")])
problem_88 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "St Cross College, 61 St Giles, Oxford, OX1 3LZ"), "OX1 3LZ"), 
	IOExample(Dict{Symbol, Any}(:x => "University College, High Street, Oxford OX1 4BH"), "OX1 4BH"), 
	IOExample(Dict{Symbol, Any}(:x => "Exeter College, Turl St, Oxford OX1 3DP"), "OX1 3DP"), 
	IOExample(Dict{Symbol, Any}(:x => "Merton College, Merton St, Oxford OX1 4JD"), "OX1 4JD"), 
	IOExample(Dict{Symbol, Any}(:x => "Worcester College, 1 Walton St, Oxford OX1 2HB"), "OX1 2HB"), 
	IOExample(Dict{Symbol, Any}(:x => "Jesus College, Turl St, Oxford OX1 3DW"), "OX1 3DW"), 
	IOExample(Dict{Symbol, Any}(:x => "University College, Oxford, OX1 4BH"), "OX1 4BH"), 
	IOExample(Dict{Symbol, Any}(:x => "Hertford College, Catte St, Oxford OX1 3BW"), "OX1 3BW"), 
	IOExample(Dict{Symbol, Any}(:x => "New College, Holywell St, Oxford OX1 3BN"), "OX1 3BN"), 
	IOExample(Dict{Symbol, Any}(:x => "Trinity College, Broad St, Oxford OX1 3BH"), "OX1 3BH")])
problem_89 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "New College, Holywell St, Oxford OX1 3BN"), "New College"), 
	IOExample(Dict{Symbol, Any}(:x => "St Cross College, 61 St Giles, Oxford, OX1 3LZ"), "St Cross College"), 
	IOExample(Dict{Symbol, Any}(:x => "Worcester College, 1 Walton St, Oxford OX1 2HB"), "Worcester College"), 
	IOExample(Dict{Symbol, Any}(:x => "University College, High Street, Oxford OX1 4BH"), "University College"), 
	IOExample(Dict{Symbol, Any}(:x => "Trinity College, Broad St, Oxford OX1 3BH"), "Trinity College"), 
	IOExample(Dict{Symbol, Any}(:x => "University College, Oxford, OX1 4BH"), "University College"), 
	IOExample(Dict{Symbol, Any}(:x => "Jesus College, Turl St, Oxford OX1 3DW"), "Jesus College"), 
	IOExample(Dict{Symbol, Any}(:x => "Hertford College, Catte St, Oxford OX1 3BW"), "Hertford College"), 
	IOExample(Dict{Symbol, Any}(:x => "Merton College, Merton St, Oxford OX1 4JD"), "Merton College"), 
	IOExample(Dict{Symbol, Any}(:x => "Exeter College, Turl St, Oxford OX1 3DP"), "Exeter College")])
problem_8 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Bob Ben Carol"), "Carol"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Steven George"), "George"), 
	IOExample(Dict{Symbol, Any}(:x => "Arthur Joe Juan"), "Juan"), 
	IOExample(Dict{Symbol, Any}(:x => "Kevin Jason Matthew"), "Matthew"), 
	IOExample(Dict{Symbol, Any}(:x => "Jeanne Laura Sarah"), "Sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "Jose Larry Scott"), "Scott"), 
	IOExample(Dict{Symbol, Any}(:x => "David James James"), "James"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Andy Sid"), "Sid"), 
	IOExample(Dict{Symbol, Any}(:x => "Alice Bob Charlie"), "Charlie"), 
	IOExample(Dict{Symbol, Any}(:x => "Raymond Frank Timothy"), "Timothy")])
problem_90 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "University College, Oxford, OX1 4BH"), "University College, OX1 4BH"), 
	IOExample(Dict{Symbol, Any}(:x => "Worcester College, 1 Walton St, Oxford OX1 2HB"), "Worcester College, OX1 2HB"), 
	IOExample(Dict{Symbol, Any}(:x => "University College, High Street, Oxford OX1 4BH"), "University College, Oxford OX1 4BH"), 
	IOExample(Dict{Symbol, Any}(:x => "St Cross College, 61 St Giles, Oxford, OX1 3LZ"), "St Cross College, OX1 3LZ"), 
	IOExample(Dict{Symbol, Any}(:x => "New College, Holywell St, Oxford OX1 3BN"), "New College, OX1 3BN"), 
	IOExample(Dict{Symbol, Any}(:x => "Jesus College, Turl St, Oxford OX1 3DW"), "Jesus College, OX1 3DW"), 
	IOExample(Dict{Symbol, Any}(:x => "Hertford College, Catte St, Oxford OX1 3BW"), "Hertford College, OX1 3BW"), 
	IOExample(Dict{Symbol, Any}(:x => "Merton College, Merton St, Oxford OX1 4JD"), "Merton College, OX1 4JD"), 
	IOExample(Dict{Symbol, Any}(:x => "Exeter College, Turl St, Oxford OX1 3DP"), "Exeter College, OX1 3DP"), 
	IOExample(Dict{Symbol, Any}(:x => "Trinity College, Broad St, Oxford OX1 3BH"), "Trinity College, OX1 3BH")])
problem_91 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "james"), "jm"), 
	IOExample(Dict{Symbol, Any}(:x => "alice"), "ai"), 
	IOExample(Dict{Symbol, Any}(:x => "sarah"), "sr"), 
	IOExample(Dict{Symbol, Any}(:x => "paul"), "pu"), 
	IOExample(Dict{Symbol, Any}(:x => "laura"), "lu"), 
	IOExample(Dict{Symbol, Any}(:x => "thomas"), "to"), 
	IOExample(Dict{Symbol, Any}(:x => "chris"), "cr"), 
	IOExample(Dict{Symbol, Any}(:x => "edith"), "ei"), 
	IOExample(Dict{Symbol, Any}(:x => "nigel"), "ng"), 
	IOExample(Dict{Symbol, Any}(:x => "charles"), "ca")])
problem_92 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "alice"), "ae"), 
	IOExample(Dict{Symbol, Any}(:x => "laura"), "la"), 
	IOExample(Dict{Symbol, Any}(:x => "chris"), "cs"), 
	IOExample(Dict{Symbol, Any}(:x => "james"), "js"), 
	IOExample(Dict{Symbol, Any}(:x => "charles"), "cs"), 
	IOExample(Dict{Symbol, Any}(:x => "nigel"), "nl"), 
	IOExample(Dict{Symbol, Any}(:x => "edith"), "eh"), 
	IOExample(Dict{Symbol, Any}(:x => "sarah"), "sh"), 
	IOExample(Dict{Symbol, Any}(:x => "thomas"), "ts"), 
	IOExample(Dict{Symbol, Any}(:x => "paul"), "pl")])
problem_93 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "LightBlue1\\''''''''"), "LightBlue1"), 
	IOExample(Dict{Symbol, Any}(:x => "chocolate3\\''''''''"), "chocolate3"), 
	IOExample(Dict{Symbol, Any}(:x => "DodgerBlue4\\''''''''"), "DodgerBlue4"), 
	IOExample(Dict{Symbol, Any}(:x => "DarkOliveGreen\\''''''''"), "DarkOliveGreen"), 
	IOExample(Dict{Symbol, Any}(:x => "PaleGreen2\\''''''''"), "PaleGreen2"), 
	IOExample(Dict{Symbol, Any}(:x => "AntiqueWhite2\\''''''''"), "AntiqueWhite2"), 
	IOExample(Dict{Symbol, Any}(:x => "SlateGray4\\''''''''"), "SlateGray4"), 
	IOExample(Dict{Symbol, Any}(:x => "brown4\\''''''''"), "brown4"), 
	IOExample(Dict{Symbol, Any}(:x => "OrangeRed1\\''''''''"), "OrangeRed1"), 
	IOExample(Dict{Symbol, Any}(:x => "DarkSlateGray3\\''''''''"), "DarkSlateGray3")])
problem_94 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "h e n r y"), "henry"), 
	IOExample(Dict{Symbol, Any}(:x => "e d i t h"), "edith"), 
	IOExample(Dict{Symbol, Any}(:x => "g e r a d l i n e"), "geradline"), 
	IOExample(Dict{Symbol, Any}(:x => "d a v i d"), "david"), 
	IOExample(Dict{Symbol, Any}(:x => "f r e d"), "fred"), 
	IOExample(Dict{Symbol, Any}(:x => "c a r o l"), "carol"), 
	IOExample(Dict{Symbol, Any}(:x => "a l i c e"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "j e a n n e"), "jeanne"), 
	IOExample(Dict{Symbol, Any}(:x => "b o b"), "bob"), 
	IOExample(Dict{Symbol, Any}(:x => "i n g e"), "inge")])
problem_95 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "22 July,1983 (35 years old)"), "JUL 1983"), 
	IOExample(Dict{Symbol, Any}(:x => "2 May,1941 (77 years old)"), "MAY 1941"), 
	IOExample(Dict{Symbol, Any}(:x => "25 September,1980 (38 years old)"), "SEP 1980"), 
	IOExample(Dict{Symbol, Any}(:x => "28 December,1958 (60 years old)"), "DEC 1958"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1947 (71 years old)"), "JUL 1947"), 
	IOExample(Dict{Symbol, Any}(:x => "21 October,1943 (75 years old)"), "OCT 1943"), 
	IOExample(Dict{Symbol, Any}(:x => "23 November,1954 (64 years old)"), "NOV 1954"), 
	IOExample(Dict{Symbol, Any}(:x => "30 October,1955 (63 years old)"), "OCT 1955"), 
	IOExample(Dict{Symbol, Any}(:x => "26 October,1998 (20 years old)"), "OCT 1998"), 
	IOExample(Dict{Symbol, Any}(:x => "21 April,1965 (53 years old)"), "APR 1965")])
problem_96 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 8am-5pm"), "8am-5pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 9am-10pm"), "9am-10pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 9am-6pm"), "9am-6pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 9am-5pm"), "9am-5pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 8am-7pm"), "8am-7pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 10am-10pm"), "10am-10pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 10am-11pm"), "10am-11pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 10am-1pm"), "10am-1pm")])
problem_97 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''''"), "Implementation"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''"), "Introduction"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''"), "Framework"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''''"), "Experiments"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''"), "Discussion"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''"), "Theory"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''"), "Metagol"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''"), "Related work"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''"), "Background"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''''"), "Conclusions")])
problem_98 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "letter('i')."), "i"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('d')."), "d"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('e')."), "e"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('c')."), "c"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('h')."), "h"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('a')."), "a"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('b')."), "b"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('g')."), "g"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('f')."), "f"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('j')."), "i")])
problem_99 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "number(4)"), "4"), 
	IOExample(Dict{Symbol, Any}(:x => "number(5)"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "number(10)"), "10"), 
	IOExample(Dict{Symbol, Any}(:x => "number(50)"), "50"), 
	IOExample(Dict{Symbol, Any}(:x => "number(2)"), "2"), 
	IOExample(Dict{Symbol, Any}(:x => "number(40)"), "40"), 
	IOExample(Dict{Symbol, Any}(:x => "number(20)"), "20"), 
	IOExample(Dict{Symbol, Any}(:x => "number(30)"), "30"), 
	IOExample(Dict{Symbol, Any}(:x => "number(3)"), "3"), 
	IOExample(Dict{Symbol, Any}(:x => "number(1)"), "1")])
problem_9 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Kevin Jason Matthew"), "Kevin"), 
	IOExample(Dict{Symbol, Any}(:x => "Jeanne Laura Sarah"), "Jeanne"), 
	IOExample(Dict{Symbol, Any}(:x => "Arthur Joe Juan"), "Arthur"), 
	IOExample(Dict{Symbol, Any}(:x => "David James James"), "David"), 
	IOExample(Dict{Symbol, Any}(:x => "Alice Bob Charlie"), "Alice"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Steven George"), "Donald"), 
	IOExample(Dict{Symbol, Any}(:x => "Bob Ben Carol"), "Bob"), 
	IOExample(Dict{Symbol, Any}(:x => "Jose Larry Scott"), "Jose"), 
	IOExample(Dict{Symbol, Any}(:x => "Raymond Frank Timothy"), "Raymond"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Andy Sid"), "Sam")])
problem_b100 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "369K 16 Oct 17:30 JCR-Menu.ppt"), "16 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "321K 10 Oct 13:12 ECRC-LP-61.ps"), "10 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "313K 15 Oct 15:11 KR_2018_paper_91.pdf"), "15 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "732K 11 Oct 17:59 guide.pdf"), "11 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "582K 18 Oct 12:13 make-01.pdf"), "18 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "71K 16 Oct 17:29 events.ics"), "16 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "433M 10 Oct 13:24 mercury-14.01.1.tar"), "10 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "300K 6 Oct 14:49 Retirement.pdf"), "6 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "1.6M 15 Oct 17:19 summary.pdf"), "15 Oct"), 
	IOExample(Dict{Symbol, Any}(:x => "720K 16 Oct 09:49 logic_primer.ppt"), "16 Oct")])
problem_b101 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''"), "\\'''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''''"), "\\''''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''"), "\\''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''''"), "\\'''''''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''"), "\\'''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''"), "\\''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''"), "\\'''''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''"), "\\'''''''''''''''''''''"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''''"), "\\''''''''''''''''''''")])
problem_b102 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "BA French"), "French"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Modern History"), "Modern History"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Computer Science"), "Computer Science"), 
	IOExample(Dict{Symbol, Any}(:x => "BA English"), "English"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Media Studies"), "Media Studies"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Philosophy, Politics and Economics"), "Philosophy, Politics and Economics"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Geography"), "Geography"), 
	IOExample(Dict{Symbol, Any}(:x => "BA History"), "History"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Mathematics"), "Mathematics"), 
	IOExample(Dict{Symbol, Any}(:x => "BA Anthropology"), "Anthropology")])
problem_b103 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "6 J. American Chemical Society 29,272 881,457"), "6"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Physical Review Letters 31,112 884,911"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "9 New England Journal of Medicine 3,564 568,698"), "9"), 
	IOExample(Dict{Symbol, Any}(:x => "7 Physical Review B 48,888 612,377"), "7"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Applied Physics Letters 36,759 549,224"), "10"), 
	IOExample(Dict{Symbol, Any}(:x => "8 Astrophysical Journal 26,418 581,299"), "8"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Journal of Biological Chemistry 54,695 1,652,432"), "1"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Nature 10,549 1,242,392"), "3"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Science 9,369 1,125,022"), "4"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Proc. Natl. Acad. Sci. USA (PNAS) 30,396 1,376,541"), "2")])
problem_b104 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "10 Applied Physics Letters 36,759 549,224"), "36,759"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Nature 10,549 1,242,392"), "10,549"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Physical Review Letters 31,112 884,911"), "31,112"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Journal of Biological Chemistry 54,695 1,652,432"), "54,695"), 
	IOExample(Dict{Symbol, Any}(:x => "8 Astrophysical Journal 26,418 581,299"), "26,418"), 
	IOExample(Dict{Symbol, Any}(:x => "9 New England Journal of Medicine 3,564 568,698"), "3,564"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Science 9,369 1,125,022"), "9,369"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Proc. Natl. Acad. Sci. USA (PNAS) 30,396 1,376,541"), "30,396"), 
	IOExample(Dict{Symbol, Any}(:x => "6 J. American Chemical Society 29,272 881,457"), "29,272"), 
	IOExample(Dict{Symbol, Any}(:x => "7 Physical Review B 48,888 612,377"), "48,888")])
problem_b105 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "7 Physical Review B 48,888 612,377"), "Physical Review B"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Physical Review Letters 31,112 884,911"), "Physical Review Letters"), 
	IOExample(Dict{Symbol, Any}(:x => "8 Astrophysical Journal 26,418 581,299"), "Astrophysical Journal"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Proc. Natl. Acad. Sci. USA (PNAS) 30,396 1,376,541"), "Proc. Natl. Acad. Sci. USA (PNAS)"), 
	IOExample(Dict{Symbol, Any}(:x => "9 New England Journal of Medicine 3,564 568,698"), "New England Journal of Medicine"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Applied Physics Letters 36,759 549,224"), "Applied Physics Letters"), 
	IOExample(Dict{Symbol, Any}(:x => "6 J. American Chemical Society 29,272 881,457"), "J. American Chemical Society"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Science 9,369 1,125,022"), "Science"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Nature 10,549 1,242,392"), "Nature"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Journal of Biological Chemistry 54,695 1,652,432"), "Journal of Biological Chemistry")])
problem_b106 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Daniel Miller @DannyAnth"), "@DannyAnth"), 
	IOExample(Dict{Symbol, Any}(:x => "Xinyuan Wang @amberwanguk"), "@amberwanguk"), 
	IOExample(Dict{Symbol, Any}(:x => "Elisabetta Costa @elisax00"), "@elisax00"), 
	IOExample(Dict{Symbol, Any}(:x => "Tom M Mitchell @tommmitchell"), "@tommmitchell"), 
	IOExample(Dict{Symbol, Any}(:x => "Michael Wooldridge @wooldridgemike"), "@wooldridgemike"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Henry @g7vdj"), "@g7vdj"), 
	IOExample(Dict{Symbol, Any}(:x => "William Cohen @professorwcohen"), "@professorwcohen"), 
	IOExample(Dict{Symbol, Any}(:x => "Rishabh Singh @rishabhs"), "@rishabhs"), 
	IOExample(Dict{Symbol, Any}(:x => "Laura Haapio-Kirk @LauraLHK"), "@LauraLHK"), 
	IOExample(Dict{Symbol, Any}(:x => "Shriram Venkatraman @venkatshriram"), "@venkatshriram")])
problem_b107 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1.6M 15 Oct 17:19 summary.pdf"), "17:19"), 
	IOExample(Dict{Symbol, Any}(:x => "582K 18 Oct 12:13 make-01.pdf"), "12:13"), 
	IOExample(Dict{Symbol, Any}(:x => "433M 10 Oct 13:24 mercury-14.01.1.tar"), "13:24"), 
	IOExample(Dict{Symbol, Any}(:x => "300K 6 Oct 14:49 Retirement.pdf"), "14:49"), 
	IOExample(Dict{Symbol, Any}(:x => "321K 10 Oct 13:12 ECRC-LP-61.ps"), "13:12"), 
	IOExample(Dict{Symbol, Any}(:x => "313K 15 Oct 15:11 KR_2018_paper_91.pdf"), "15:11"), 
	IOExample(Dict{Symbol, Any}(:x => "71K 16 Oct 17:29 events.ics"), "17:29"), 
	IOExample(Dict{Symbol, Any}(:x => "720K 16 Oct 09:49 logic_primer.ppt"), "09:49"), 
	IOExample(Dict{Symbol, Any}(:x => "369K 16 Oct 17:30 JCR-Menu.ppt"), "17:30"), 
	IOExample(Dict{Symbol, Any}(:x => "732K 11 Oct 17:59 guide.pdf"), "17:59")])
problem_b108 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "a,l,i,c,e"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "g,e,r,a,d,l,i,n,e"), "geradline"), 
	IOExample(Dict{Symbol, Any}(:x => "b,o,b"), "bob"), 
	IOExample(Dict{Symbol, Any}(:x => "c,a,r,o,l"), "carol"), 
	IOExample(Dict{Symbol, Any}(:x => "f,r,e,d"), "fred"), 
	IOExample(Dict{Symbol, Any}(:x => "d,a,v,i,d"), "david"), 
	IOExample(Dict{Symbol, Any}(:x => "h,e,n,r,y"), "henry"), 
	IOExample(Dict{Symbol, Any}(:x => "j,e,a,n,n,e"), "jeanne"), 
	IOExample(Dict{Symbol, Any}(:x => "e,d,i,t,h"), "edith"), 
	IOExample(Dict{Symbol, Any}(:x => "i,n,g,e"), "inge")])
problem_b109 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Kevin,Jason,Matthew"), "KJM"), 
	IOExample(Dict{Symbol, Any}(:x => "Bob,Ben,Carol"), "BBC"), 
	IOExample(Dict{Symbol, Any}(:x => "Raymond,Frank,Timothy"), "RFT"), 
	IOExample(Dict{Symbol, Any}(:x => "David,James,James"), "DJJ"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald,Steven,George"), "DSG"), 
	IOExample(Dict{Symbol, Any}(:x => "Alice,Bob,Charlie"), "ABC"), 
	IOExample(Dict{Symbol, Any}(:x => "Arthur,Joe,Juan"), "AJJ"), 
	IOExample(Dict{Symbol, Any}(:x => "Jeanne,Laura,Sarah"), "JLS"), 
	IOExample(Dict{Symbol, Any}(:x => "Jose,Larry,Scott"), "JLS"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam,Andy,Sid"), "SAS")])
problem_b10 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Jeanne Laura Sarah"), "Jeanne Sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "Alice Bob Charlie"), "Alice Charlie"), 
	IOExample(Dict{Symbol, Any}(:x => "Bob Ben Carol"), "Bob Carol"), 
	IOExample(Dict{Symbol, Any}(:x => "David James James"), "David James"), 
	IOExample(Dict{Symbol, Any}(:x => "Kevin Jason Matthew"), "Kevin Matthew"), 
	IOExample(Dict{Symbol, Any}(:x => "Raymond Frank Timothy"), "Raymond Timothy"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Steven George"), "Donald George"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Andy Sid"), "Sam Sid"), 
	IOExample(Dict{Symbol, Any}(:x => "Arthur Joe Juan"), "Arthur Juan"), 
	IOExample(Dict{Symbol, Any}(:x => "Jose Larry Scott"), "Jose Scott")])
problem_b110 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Marin Lorentzen"), "Marin LORENTZEN"), 
	IOExample(Dict{Symbol, Any}(:x => "Verlene Ottley"), "Verlene OTTLEY"), 
	IOExample(Dict{Symbol, Any}(:x => "Annita Nicely"), "Annita NICELY"), 
	IOExample(Dict{Symbol, Any}(:x => "David Beckham"), "David BECKHAM"), 
	IOExample(Dict{Symbol, Any}(:x => "David Batty"), "David BATTY"), 
	IOExample(Dict{Symbol, Any}(:x => "Joanie Faas"), "Joanie FAAS"), 
	IOExample(Dict{Symbol, Any}(:x => "Tim Howard"), "Tim HOWARD"), 
	IOExample(Dict{Symbol, Any}(:x => "Micheal Owen"), "Micheal OWEN"), 
	IOExample(Dict{Symbol, Any}(:x => "James Brown"), "James BROWN"), 
	IOExample(Dict{Symbol, Any}(:x => "Oma Cornelison"), "Oma CORNELISON")])
problem_b111 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Micheal Owen"), "OWEN"), 
	IOExample(Dict{Symbol, Any}(:x => "Marin Lorentzen"), "LORENTZEN"), 
	IOExample(Dict{Symbol, Any}(:x => "Annita Nicely"), "NICELY"), 
	IOExample(Dict{Symbol, Any}(:x => "David Beckham"), "BECKHAM"), 
	IOExample(Dict{Symbol, Any}(:x => "David Batty"), "BATTY"), 
	IOExample(Dict{Symbol, Any}(:x => "Verlene Ottley"), "OTTLEY"), 
	IOExample(Dict{Symbol, Any}(:x => "Joanie Faas"), "FAAS"), 
	IOExample(Dict{Symbol, Any}(:x => "James Brown"), "BROWN"), 
	IOExample(Dict{Symbol, Any}(:x => "Oma Cornelison"), "CORNELISON"), 
	IOExample(Dict{Symbol, Any}(:x => "Tim Howard"), "HOWARD")])
problem_b112 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "DAVID BECKHAM"), "David Beckham"), 
	IOExample(Dict{Symbol, Any}(:x => "MICHEAL OWEN"), "Micheal Owen"), 
	IOExample(Dict{Symbol, Any}(:x => "MARIN LORENTZEN"), "Marin Lorentzen"), 
	IOExample(Dict{Symbol, Any}(:x => "ANNITA NICELY"), "Annita Nicely"), 
	IOExample(Dict{Symbol, Any}(:x => "OMA CORNELISON"), "Oma Cornelison"), 
	IOExample(Dict{Symbol, Any}(:x => "DAVID BATTY"), "David Batty"), 
	IOExample(Dict{Symbol, Any}(:x => "TIM HOWARD"), "Tim Howard"), 
	IOExample(Dict{Symbol, Any}(:x => "JAMES BROWN"), "James Brown"), 
	IOExample(Dict{Symbol, Any}(:x => "VERLENE OTTLEY"), "Verlene Ottley"), 
	IOExample(Dict{Symbol, Any}(:x => "JOANIE FAAS"), "Joanie Faas")])
problem_b113 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ox1 3dp"), "OX13DP"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 3xw"), "OX13XW"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 4bh"), "OX14BH"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 0bn"), "OX10BN"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 3lp"), "OX13LP"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 3lz"), "OX13LZ"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 3bw"), "OX13BW"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 3cp"), "OX13CP"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 4ah"), "OX14AH"), 
	IOExample(Dict{Symbol, Any}(:x => "ox1 3bn"), "OX13BN")])
problem_b114 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "732K 11 Oct 17:59 guide.pdf"), "guide.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "313K 15 Oct 15:11 KR_2018_paper_91.pdf"), "KR_2018_paper_91.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "1.6M 15 Oct 17:19 summary.pdf"), "summary.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "582K 18 Oct 12:13 make-01.pdf"), "make-01.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "300K 6 Oct 14:49 Retirement.pdf"), "Retirement.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "369K 16 Oct 17:30 JCR-Menu.ppt"), "JCR-Menu.ppt"), 
	IOExample(Dict{Symbol, Any}(:x => "433M 10 Oct 13:24 mercury-14.01.1.tar"), "mercury-14.01.1.tar"), 
	IOExample(Dict{Symbol, Any}(:x => "720K 16 Oct 09:49 logic_primer.ppt"), "logic_primer.ppt"), 
	IOExample(Dict{Symbol, Any}(:x => "321K 10 Oct 13:12 ECRC-LP-61.ps"), "ECRC-LP-61.ps"), 
	IOExample(Dict{Symbol, Any}(:x => "71K 16 Oct 17:29 events.ics"), "events.ics")])
problem_b115 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "300K 6 Oct 14:49 Retirement.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "369K 16 Oct 17:30 JCR-Menu.ppt"), "ppt"), 
	IOExample(Dict{Symbol, Any}(:x => "582K 18 Oct 12:13 make-01.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "313K 15 Oct 15:11 KR_2018_paper_91.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "71K 16 Oct 17:29 events.ics"), "ics"), 
	IOExample(Dict{Symbol, Any}(:x => "732K 11 Oct 17:59 guide.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "1.6M 15 Oct 17:19 summary.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "433M 10 Oct 13:24 mercury-14.01.1.tar"), "tar"), 
	IOExample(Dict{Symbol, Any}(:x => "720K 16 Oct 09:49 logic_primer.ppt"), "ppt"), 
	IOExample(Dict{Symbol, Any}(:x => "321K 10 Oct 13:12 ECRC-LP-61.ps"), "ps")])
problem_b116 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;10;"), "10"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;0;"), "0"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;11;"), "11"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;4;"), "4"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;13;"), "13"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;14;"), "14"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;12;"), "12"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;2;"), "2"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;3;"), "3"), 
	IOExample(Dict{Symbol, Any}(:x => "Book and Theses;20;"), "20")])
problem_b117 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "verlene ottley"), "Verlene Ottley"), 
	IOExample(Dict{Symbol, Any}(:x => "david batty"), "David Batty"), 
	IOExample(Dict{Symbol, Any}(:x => "marin lorentzen"), "Marin Lorentzen"), 
	IOExample(Dict{Symbol, Any}(:x => "joanie faas"), "Joanie Faas"), 
	IOExample(Dict{Symbol, Any}(:x => "david beckham"), "David Beckham"), 
	IOExample(Dict{Symbol, Any}(:x => "micheal owen"), "Micheal Owen"), 
	IOExample(Dict{Symbol, Any}(:x => "tim howard"), "Tim Howard"), 
	IOExample(Dict{Symbol, Any}(:x => "james brown"), "James Brown"), 
	IOExample(Dict{Symbol, Any}(:x => "oma cornelison"), "Oma Cornelison"), 
	IOExample(Dict{Symbol, Any}(:x => "annita nicely"), "Annita Nicely")])
problem_b118 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Luc De Raedt: Panel: Logic and Learnability. EWSL 1991: 344"), "Panel: Logic and Learnability"), 
	IOExample(Dict{Symbol, Any}(:x => "Ivan Bratko: Machine learning in artificial intelligence. AI in Engineering 8(3): 159-164 (1993)"), "Machine learning in artificial intelligence"), 
	IOExample(Dict{Symbol, Any}(:x => "Michael Bain: Experiments in Non-Monotonic Learning. ML 1991: 380-384"), "Experiments in Non-Monotonic Learning"), 
	IOExample(Dict{Symbol, Any}(:x => "Hendrik Blockeel: Top-Down Induction of First Order Logical Decision Trees. AI Commun. 12(1-2): 119-120 (1999)"), "Top-Down Induction of First Order Logical Decision Trees"), 
	IOExample(Dict{Symbol, Any}(:x => "Katsumi Inoue: Extended Logic Programs with Default Assumptions. ICLP 1991: 490-504"), "Extended Logic Programs with Default Assumptions"), 
	IOExample(Dict{Symbol, Any}(:x => "Andrew Cropper: Learning Efficient Logic Programs. IJCAI 2015: 4359-4360"), "Learning Efficient Logic Programs"), 
	IOExample(Dict{Symbol, Any}(:x => "Ute Schmid: KI und Informatik. KI 26(1): 1-4 (2012)"), "KI und Informatik"), 
	IOExample(Dict{Symbol, Any}(:x => "Stephen Muggleton: Inductive Logic Programming. ALT 1990: 42-62"), "Inductive Logic Programming"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Michie: Heuristic Search. Comput. J. 14(1): 96-102 (1971)"), "Heuristic Search"), 
	IOExample(Dict{Symbol, Any}(:x => "Claude Sammut: Concept Learning by Experiment. IJCAI 1981: 104-105"), "Concept Learning by Experiment")])
problem_b119 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Luc De Raedt: Panel: Logic and Learnability. EWSL 1991: 344"), "Panel: Logic and Learnability"), 
	IOExample(Dict{Symbol, Any}(:x => "Andrew Cropper: Learning Efficient Logic Programs. IJCAI 2015: 4359-4360"), "Cropper"), 
	IOExample(Dict{Symbol, Any}(:x => "Claude Sammut: Concept Learning by Experiment. IJCAI 1981: 104-105"), "Sammut"), 
	IOExample(Dict{Symbol, Any}(:x => "Hendrik Blockeel: Top-Down Induction of First Order Logical Decision Trees. AI Commun. 12(1-2): 119-120 (1999)"), "Blockeel"), 
	IOExample(Dict{Symbol, Any}(:x => "Ute Schmid: KI und Informatik. KI 26(1): 1-4 (2012)"), "Schmid"), 
	IOExample(Dict{Symbol, Any}(:x => "Ivan Bratko: Machine learning in artificial intelligence. AI in Engineering 8(3): 159-164 (1993)"), "Bratko"), 
	IOExample(Dict{Symbol, Any}(:x => "Katsumi Inoue: Extended Logic Programs with Default Assumptions. ICLP 1991: 490-504"), "Inoue"), 
	IOExample(Dict{Symbol, Any}(:x => "Stephen Muggleton: Inductive Logic Programming. ALT 1990: 42-62"), "Muggleton"), 
	IOExample(Dict{Symbol, Any}(:x => "Michael Bain: Experiments in Non-Monotonic Learning. ML 1991: 380-384"), "Bain"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Michie: Heuristic Search. Comput. J. 14(1): 96-102 (1971)"), "Michie")])
problem_b11 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Arthur Joe Juan"), "AJ Juan"), 
	IOExample(Dict{Symbol, Any}(:x => "Kevin Jason Matthew"), "KJ Matthew"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Andy Sid"), "SA Sid"), 
	IOExample(Dict{Symbol, Any}(:x => "Jeanne Laura Sarah"), "JL Sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "Raymond Frank Timothy"), "RF Timothy"), 
	IOExample(Dict{Symbol, Any}(:x => "Bob Ben Carol"), "BB Carol"), 
	IOExample(Dict{Symbol, Any}(:x => "Alice Bob Charlie"), "AB Charlie"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Steven George"), "DS George"), 
	IOExample(Dict{Symbol, Any}(:x => "David James James"), "DJ James"), 
	IOExample(Dict{Symbol, Any}(:x => "Jose Larry Scott"), "JL Scott")])
problem_b120 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Jailbird (1979)"), "1979"), 
	IOExample(Dict{Symbol, Any}(:x => "Cat's Cradle (1963)"), "1963"), 
	IOExample(Dict{Symbol, Any}(:x => "Galapagos (1985)"), "1985"), 
	IOExample(Dict{Symbol, Any}(:x => "The Sirens of Titan (1959)"), "1959"), 
	IOExample(Dict{Symbol, Any}(:x => "Slaughterhouse-Five (1969)"), "1969"), 
	IOExample(Dict{Symbol, Any}(:x => "Deadeye Dick (1982)"), "1982"), 
	IOExample(Dict{Symbol, Any}(:x => "Mother Night (1961)"), "1961"), 
	IOExample(Dict{Symbol, Any}(:x => "Breakfast of Champions (1973)"), "1973"), 
	IOExample(Dict{Symbol, Any}(:x => "Player Piano (1952)"), "1952"), 
	IOExample(Dict{Symbol, Any}(:x => "Slapstick (1976)"), "1976")])
problem_b121 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Cat's Cradle (1963)"), "Cat's Cradle"), 
	IOExample(Dict{Symbol, Any}(:x => "Player Piano (1952)"), "Player Piano"), 
	IOExample(Dict{Symbol, Any}(:x => "Jailbird (1979)"), "Jailbird"), 
	IOExample(Dict{Symbol, Any}(:x => "The Sirens of Titan (1959)"), "The Sirens of Titan"), 
	IOExample(Dict{Symbol, Any}(:x => "Deadeye Dick (1982)"), "Deadeye Dick"), 
	IOExample(Dict{Symbol, Any}(:x => "Mother Night (1961)"), "Mother Night"), 
	IOExample(Dict{Symbol, Any}(:x => "Galapagos (1985)"), "Galapagos"), 
	IOExample(Dict{Symbol, Any}(:x => "Slaughterhouse-Five (1969)"), "Slaughterhouse-Five"), 
	IOExample(Dict{Symbol, Any}(:x => "Breakfast of Champions (1973)"), "Breakfast of Champions"), 
	IOExample(Dict{Symbol, Any}(:x => "Slapstick (1976)"), "Slapstick")])
problem_b122 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Xinyuan Wang @amberwanguk"), "Xinyuan Wang"), 
	IOExample(Dict{Symbol, Any}(:x => "Elisabetta Costa @elisax00"), "Elisabetta Costa"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Henry @g7vdj"), "Sam Henry"), 
	IOExample(Dict{Symbol, Any}(:x => "Rishabh Singh @rishabhs"), "Rishabh Singh"), 
	IOExample(Dict{Symbol, Any}(:x => "Tom M Mitchell @tommmitchell"), "Tom M Mitchell"), 
	IOExample(Dict{Symbol, Any}(:x => "Laura Haapio-Kirk @LauraLHK"), "Laura Haapio-Kirk"), 
	IOExample(Dict{Symbol, Any}(:x => "Michael Wooldridge @wooldridgemike"), "Michael Wooldridge"), 
	IOExample(Dict{Symbol, Any}(:x => "William Cohen @professorwcohen"), "William Cohen"), 
	IOExample(Dict{Symbol, Any}(:x => "Daniel Miller @DannyAnth"), "Daniel Miller"), 
	IOExample(Dict{Symbol, Any}(:x => "Shriram Venkatraman @venkatshriram"), "Shriram Venkatraman")])
problem_b123 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "cchhrriiss"), "chris"), 
	IOExample(Dict{Symbol, Any}(:x => "cchhaarrlleess"), "charles"), 
	IOExample(Dict{Symbol, Any}(:x => "tthhoommaass"), "thomas"), 
	IOExample(Dict{Symbol, Any}(:x => "jjaammeess"), "james"), 
	IOExample(Dict{Symbol, Any}(:x => "aalliiccee"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "ppaauull"), "paul"), 
	IOExample(Dict{Symbol, Any}(:x => "nniiggeell"), "nigel"), 
	IOExample(Dict{Symbol, Any}(:x => "ssaarraah"), "sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "llaauurraa"), "laura"), 
	IOExample(Dict{Symbol, Any}(:x => "eeddiitth"), "edith")])
problem_b124 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3 Jan 1975 8 May 1993"), "1975 1993"), 
	IOExample(Dict{Symbol, Any}(:x => "13 May 1993 19 Dec 1996"), "1993 1996"), 
	IOExample(Dict{Symbol, Any}(:x => "16 Dec 2004 10 Jan 2005"), "2004 2005"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Jul 1999 12 Jul 2001"), "1999 2001"), 
	IOExample(Dict{Symbol, Any}(:x => "11 Jan 1999 16 May 1999"), "1999 1999"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Feb 2004 16 Dec 2004"), "2004 2004"), 
	IOExample(Dict{Symbol, Any}(:x => "12 Jul 2001 7 Feb 2004"), "2001 2004"), 
	IOExample(Dict{Symbol, Any}(:x => "20 Dec 1996 8 May 1997"), "1996 1997"), 
	IOExample(Dict{Symbol, Any}(:x => "8 May 1997 5 Jan 1999"), "1997 1999"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Jan 1999 11 Jan 1999"), "1999 1999")])
problem_b125 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "36 Scotland Billy Davies"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "42 England Gary brazil"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "45 Spain Aitor Karanka"), "Spain"), 
	IOExample(Dict{Symbol, Any}(:x => "38 England Stuart Pearce"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "43 England Mark Warburton"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "39 Scotland Dougie Freedman"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "71 England Nigel Clough"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "34 Scotland Alex McLeish"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "35 England Rob Kelly"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "41 France Philippe Montanier"), "France")])
problem_b126 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "13 Scotland DF Danny Fox"), "13 Fox"), 
	IOExample(Dict{Symbol, Any}(:x => "11 England MF Ben Osborn"), "11 Osborn"), 
	IOExample(Dict{Symbol, Any}(:x => "4 England DF Michael Mancienne"), "4 Mancienne"), 
	IOExample(Dict{Symbol, Any}(:x => "8 England MF Chris Cohen"), "8 Cohen"), 
	IOExample(Dict{Symbol, Any}(:x => "14 England MF Matty Cash"), "14 Cash"), 
	IOExample(Dict{Symbol, Any}(:x => "7 Scotland MF Liam Bridcutt"), "7 Bridcutt"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Scotland MF Barrie McKay"), "10 McKay"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Algeria MF Adlene Guedioura"), "5 Guedioura"), 
	IOExample(Dict{Symbol, Any}(:x => "17 England FW Ben Brereton"), "17 Brereton"), 
	IOExample(Dict{Symbol, Any}(:x => "19 Wales FW Sam Jones"), "19 Jones")])
problem_b128 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "About 1,620,000 results (0.66 seconds)"), "1,620,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 6,240,000 results (0.65 seconds)"), "6,240,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,320,000 results (0.63 seconds)"), "5,320,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 299,000 results (0.57 seconds)"), "299,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 520,000 results (0.59 seconds)"), "520,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,390,000 results (0.70 seconds)"), "1,390,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 31,900,000 results (0.70 seconds)"), "31,900,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,090,000 results (0.90 seconds)"), "5,090,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 8,630,000 results (0.50 seconds)"), "8,630,000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 37,400,000 results (0.52 seconds)"), "37,400,000")])
problem_b129 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "About 8,630,000 results (0.50 seconds)"), "0.50 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,090,000 results (0.90 seconds)"), "0.90 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 37,400,000 results (0.52 seconds)"), "0.52 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 520,000 results (0.59 seconds)"), "0.59 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,390,000 results (0.70 seconds)"), "0.70 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,320,000 results (0.63 seconds)"), "0.63 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 299,000 results (0.57 seconds)"), "0.57 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 31,900,000 results (0.70 seconds)"), "0.70 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,620,000 results (0.66 seconds)"), "0.66 seconds"), 
	IOExample(Dict{Symbol, Any}(:x => "About 6,240,000 results (0.65 seconds)"), "0.65 seconds")])
problem_b12 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "lisa.simpson@yahoo.com"), "Lisa Simpson"), 
	IOExample(Dict{Symbol, Any}(:x => "jim.james@fas.harvard.edu"), "Jim James"), 
	IOExample(Dict{Symbol, Any}(:x => "alan.turing@cam.ac.uk"), "Alan Turing"), 
	IOExample(Dict{Symbol, Any}(:x => "matthew.rosman@yahoo.com"), "Matthew Rosman"), 
	IOExample(Dict{Symbol, Any}(:x => "bob.smith@gmail.com"), "Bob Smith"), 
	IOExample(Dict{Symbol, Any}(:x => "brent.harold@hotmail.com"), "Brent Harold"), 
	IOExample(Dict{Symbol, Any}(:x => "alice.cooper@rock.com"), "Alice Cooper"), 
	IOExample(Dict{Symbol, Any}(:x => "jim.smith@gmail.com"), "Jim Smith"), 
	IOExample(Dict{Symbol, Any}(:x => "ruby.clinton@mit.edu"), "Ruby Clinton"), 
	IOExample(Dict{Symbol, Any}(:x => "thom.yorke@radiohead.com"), "Thom Yorke")])
problem_b130 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "slapstick (1976)"), "Slapstick"), 
	IOExample(Dict{Symbol, Any}(:x => "slaughterhouse five (1969)"), "Slaughterhouse Five"), 
	IOExample(Dict{Symbol, Any}(:x => "mother night (1961)"), "Mother Night"), 
	IOExample(Dict{Symbol, Any}(:x => "deadeye dick (1982)"), "Deadeye Dick"), 
	IOExample(Dict{Symbol, Any}(:x => "breakfast of champions (1973)"), "Breakfast of Champions"), 
	IOExample(Dict{Symbol, Any}(:x => "cats cradle (1963)"), "Cats Cradle"), 
	IOExample(Dict{Symbol, Any}(:x => "the sirens of titan (1959)"), "The Sirens of Titan"), 
	IOExample(Dict{Symbol, Any}(:x => "galapagos (1985)"), "Galapagos"), 
	IOExample(Dict{Symbol, Any}(:x => "jailbird (1979)"), "Jailbird"), 
	IOExample(Dict{Symbol, Any}(:x => "player piano (1952)"), "Player Piano")])
problem_b131 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2. Giraffes Cant Dance, \$2.32"), "Giraffes Cant Dance"), 
	IOExample(Dict{Symbol, Any}(:x => "6. The Pout-Pout Fish, \$3.74"), "The Pout-Pout Fish"), 
	IOExample(Dict{Symbol, Any}(:x => "9. The Sun and Her Flowers, \$6.49"), "The Sun and Her Flowers"), 
	IOExample(Dict{Symbol, Any}(:x => "7. Harry Potter: A Journey Through a History of Magic, \$6.70"), "Harry Potter: A Journey Through a History of Magic"), 
	IOExample(Dict{Symbol, Any}(:x => "3. Diary of a Wimpy Kid, \$7.50"), "Diary of a Wimpy Kid"), 
	IOExample(Dict{Symbol, Any}(:x => "5. Harry Potter and the Prisoner of Azkaban, \$17.99"), "Harry Potter and the Prisoner of Azkaban"), 
	IOExample(Dict{Symbol, Any}(:x => "1. Wonder, \$6.37"), "Wonder"), 
	IOExample(Dict{Symbol, Any}(:x => "4. The Instant Pot, \$6.61"), "The Instant Pot"), 
	IOExample(Dict{Symbol, Any}(:x => "8. Leonardo da Vinci, \$14.88"), "Leonardo da Vinci"), 
	IOExample(Dict{Symbol, Any}(:x => "10. Milk and Vine, \$3.79"), "Milk and Vine")])
problem_b132 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "299,000"), "299000"), 
	IOExample(Dict{Symbol, Any}(:x => "1,390,000"), "1390000"), 
	IOExample(Dict{Symbol, Any}(:x => "635,000"), "635000"), 
	IOExample(Dict{Symbol, Any}(:x => "2,950,000"), "2950000"), 
	IOExample(Dict{Symbol, Any}(:x => "775,000"), "775000"), 
	IOExample(Dict{Symbol, Any}(:x => "520,000"), "520000"), 
	IOExample(Dict{Symbol, Any}(:x => "5,090,000"), "5090000"), 
	IOExample(Dict{Symbol, Any}(:x => "31,900,000"), "31900000"), 
	IOExample(Dict{Symbol, Any}(:x => "625,000"), "625000")])
problem_b133 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "About 37,400,000 results (0.52 seconds)"), "37400000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,390,000 results (0.70 seconds)"), "1390000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 299,000 results (0.57 seconds)"), "299000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,320,000 results (0.63 seconds)"), "5320000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 8,630,000 results (0.50 seconds)"), "8630000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,620,000 results (0.66 seconds)"), "1620000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 31,900,000 results (0.70 seconds)"), "31900000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,090,000 results (0.90 seconds)"), "5090000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 520,000 results (0.59 seconds)"), "520000"), 
	IOExample(Dict{Symbol, Any}(:x => "About 6,240,000 results (0.65 seconds)"), "6240000")])
problem_b134 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "cccchhhhaaaarrrrlllleeeessss"), "charles"), 
	IOExample(Dict{Symbol, Any}(:x => "llllaaaauuuurrrraaaa"), "laura"), 
	IOExample(Dict{Symbol, Any}(:x => "ppppaaaauuuullll"), "paul"), 
	IOExample(Dict{Symbol, Any}(:x => "eeeeddddiiiitttthhhh"), "edith"), 
	IOExample(Dict{Symbol, Any}(:x => "nnnniiiiggggeeeellll"), "nigel"), 
	IOExample(Dict{Symbol, Any}(:x => "ssssaaaarrrraaaahhhh"), "sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "cccchhhhrrrriiiissss"), "chris"), 
	IOExample(Dict{Symbol, Any}(:x => "tttthhhhoooommmmaaaassss"), "thomas"), 
	IOExample(Dict{Symbol, Any}(:x => "aaaalllliiiicccceeee"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "jjjjaaaammmmeeeessss"), "james")])
problem_b135 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ppppppppaaaaaaaauuuuuuuullllllll"), "paul"), 
	IOExample(Dict{Symbol, Any}(:x => "cccccccchhhhhhhhrrrrrrrriiiiiiiissssssss"), "chris"), 
	IOExample(Dict{Symbol, Any}(:x => "llllllllaaaaaaaauuuuuuuurrrrrrrraaaaaaaa"), "laura"), 
	IOExample(Dict{Symbol, Any}(:x => "nnnnnnnniiiiiiiiggggggggeeeeeeeellllllll"), "nigel"), 
	IOExample(Dict{Symbol, Any}(:x => "ssssssssaaaaaaaarrrrrrrraaaaaaaahhhhhhhh"), "sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "eeeeeeeeddddddddiiiiiiiitttttttthhhhhhhh"), "edith"), 
	IOExample(Dict{Symbol, Any}(:x => "tttttttthhhhhhhhoooooooommmmmmmmaaaaaaaassssssss"), "thomas"), 
	IOExample(Dict{Symbol, Any}(:x => "aaaaaaaalllllllliiiiiiiicccccccceeeeeeee"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "cccccccchhhhhhhhaaaaaaaarrrrrrrrlllllllleeeeeeeessssssss"), "charles"), 
	IOExample(Dict{Symbol, Any}(:x => "jjjjjjjjaaaaaaaammmmmmmmeeeeeeeessssssss"), "james")])
problem_b136 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "sketch.txt"), "txt"), 
	IOExample(Dict{Symbol, Any}(:x => "metaprob.aux"), "aux"), 
	IOExample(Dict{Symbol, Any}(:x => "ijcai15.sty"), "sty"), 
	IOExample(Dict{Symbol, Any}(:x => "metaprob.bbl"), "bbl"), 
	IOExample(Dict{Symbol, Any}(:x => "01-intro.tex"), "tex"), 
	IOExample(Dict{Symbol, Any}(:x => "metaprob.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "metaprob.log"), "log"), 
	IOExample(Dict{Symbol, Any}(:x => "metaprob.blg"), "blg"), 
	IOExample(Dict{Symbol, Any}(:x => "05-e1.tex"), "tex"), 
	IOExample(Dict{Symbol, Any}(:x => "ourbib15.bib"), "bib")])
problem_b137 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "--2-X628-2-1--"), "--2-"), 
	IOExample(Dict{Symbol, Any}(:x => "57-1-X-82-5-4---93-0-2"), "57-1-"), 
	IOExample(Dict{Symbol, Any}(:x => "-92-2-----1X9-1--229-080"), "-92-2-----1"), 
	IOExample(Dict{Symbol, Any}(:x => "0--3X943030"), "0--3"), 
	IOExample(Dict{Symbol, Any}(:x => "41-1X54"), "41-1"), 
	IOExample(Dict{Symbol, Any}(:x => "-X27----6--97-1"), "-"), 
	IOExample(Dict{Symbol, Any}(:x => "-59-0X-5-5-0-964043--48"), "-59-0"), 
	IOExample(Dict{Symbol, Any}(:x => "2509-3-2--536-8-X6-266-----"), "2509-3-2--536-8-"), 
	IOExample(Dict{Symbol, Any}(:x => "-553---930--26--8--X1"), "-553---930--26--8--"), 
	IOExample(Dict{Symbol, Any}(:x => "9---X4"), "9---")])
problem_b138 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(lists))."), "lists"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(system))."), "system"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(apply))."), "apply"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(error))."), "error"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(random))."), "random"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(metagol))."), "metagol"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(sockets))."), "sockets"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(pairs))."), "pairs"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(python))."), "python"), 
	IOExample(Dict{Symbol, Any}(:x => ":-use_module(library(timeout))."), "timeout")])
problem_b139 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "217 posts 3268 followers 18 following"), "217 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "240 posts 522 followers 522 following"), "240 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "628 posts 201 followers 617 following"), "628 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "368 posts 22600 followers 95 following"), "368 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "4536 posts 12000 followers 338 following"), "4536 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "361 posts 435 followers 709 following"), "361 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "661 posts 426 followers 567 following"), "661 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "570 posts 479 followers 1025 following"), "570 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "467 posts 906 followers 288 following"), "467 posts"), 
	IOExample(Dict{Symbol, Any}(:x => "144 posts 248 followers 872 following"), "144 posts")])
problem_b13 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "jim.james@fas.harvard.edu"), "harvard"), 
	IOExample(Dict{Symbol, Any}(:x => "alan.turing@cam.ac.uk"), "cam"), 
	IOExample(Dict{Symbol, Any}(:x => "jim.smith@gmail.com"), "gmail"), 
	IOExample(Dict{Symbol, Any}(:x => "thom.yorke@radiohead.com"), "radiohead"), 
	IOExample(Dict{Symbol, Any}(:x => "bob.smith@gmail.com"), "gmail"), 
	IOExample(Dict{Symbol, Any}(:x => "matthew.rosman@yahoo.com"), "yahoo"), 
	IOExample(Dict{Symbol, Any}(:x => "ruby.clinton@mit.edu"), "mit"), 
	IOExample(Dict{Symbol, Any}(:x => "lisa.simpson@yahoo.com"), "yahoo"), 
	IOExample(Dict{Symbol, Any}(:x => "brent.harold@hotmail.com"), "hotmail"), 
	IOExample(Dict{Symbol, Any}(:x => "alice.cooper@rock.com"), "rock")])
problem_b140 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "661 posts 426 followers 567 following"), "426 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "217 posts 3268 followers 18 following"), "3,268 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "570 posts 479 followers 1025 following"), "479 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "240 posts 522 followers 522 following"), "522 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "368 posts 22600 followers 95 following"), "22600 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "361 posts 435 followers 709 following"), "435 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "144 posts 248 followers 872 following"), "248 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "628 posts 201 followers 617 following"), "201 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "4536 posts 12000 followers 338 following"), "12000 followers"), 
	IOExample(Dict{Symbol, Any}(:x => "467 posts 906 followers 288 following"), "906 followers")])
problem_b141 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "628 posts 201 followers 617 following"), "617 following"), 
	IOExample(Dict{Symbol, Any}(:x => "661 posts 426 followers 567 following"), "567 following"), 
	IOExample(Dict{Symbol, Any}(:x => "467 posts 906 followers 288 following"), "288 following"), 
	IOExample(Dict{Symbol, Any}(:x => "240 posts 522 followers 522 following"), "522 following"), 
	IOExample(Dict{Symbol, Any}(:x => "144 posts 248 followers 872 following"), "872 following"), 
	IOExample(Dict{Symbol, Any}(:x => "570 posts 479 followers 1025 following"), "1025 following"), 
	IOExample(Dict{Symbol, Any}(:x => "4536 posts 12000 followers 338 following"), "338 following"), 
	IOExample(Dict{Symbol, Any}(:x => "368 posts 22600 followers 95 following"), "95 following"), 
	IOExample(Dict{Symbol, Any}(:x => "217 posts 3268 followers 18 following"), "3268 following"), 
	IOExample(Dict{Symbol, Any}(:x => "361 posts 435 followers 709 following"), "709 following")])
problem_b142 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "UB6-Ogf55H394m"), "UB6"), 
	IOExample(Dict{Symbol, Any}(:x => "X062u85Rb2-ba016f4X4bf652wx20"), "X062u85Rb2"), 
	IOExample(Dict{Symbol, Any}(:x => "a24TFafO59s0B-JX"), "a24TFafO59s0B"), 
	IOExample(Dict{Symbol, Any}(:x => "S3kb-82"), "S3kb"), 
	IOExample(Dict{Symbol, Any}(:x => "9U5MsnhH5rM6-5ic6Xi9c4"), "9U5MsnhH5rM6"), 
	IOExample(Dict{Symbol, Any}(:x => "R049M7Ui8o73q4-Wu3dmi"), "R049M7Ui8o73q4"), 
	IOExample(Dict{Symbol, Any}(:x => "51V1v40794Ng8Vd89X-2"), "51V1v40794Ng8Vd89X"), 
	IOExample(Dict{Symbol, Any}(:x => "53c5mS440S-lWd4"), "53c5mS440S"), 
	IOExample(Dict{Symbol, Any}(:x => "442E5T-e83kHj5"), "442E5T"), 
	IOExample(Dict{Symbol, Any}(:x => "2JM141x60n-XnEH048J5W1g"), "2JM141x60n")])
problem_b143 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5 Jacques Anquetil (FRA)"), "5 Anquetil"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Miguel Indurain (ESP)"), "5 Indurain"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Chris Froome (GBR)"), "4 Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Greg LeMond (USA)"), "3 LeMond"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Bernard Hinault (FRA)"), "5 Hinault"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Philippe Thys (BEL)"), "3 Thys"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Ottavio Bottecchia (ITA)"), "2 Bottecchia"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Eddy Merckx (BEL)"), "5 Merckx"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Louison Bobet (FRA)"), "3 Bobet"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Alberto Contador (ESP)"), "2 Contador")])
problem_b144 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3 Greg LeMond (USA)"), "Greg LeMond"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Chris Froome (GBR)"), "Chris Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Louison Bobet (FRA)"), "Louison Bobet"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Miguel Indurain (ESP)"), "Miguel Indurain"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Philippe Thys (BEL)"), "Philippe Thys"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Jacques Anquetil (FRA)"), "Jacques Anquetil"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Alberto Contador (ESP)"), "Alberto Contador"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Eddy Merckx (BEL)"), "Eddy Merckx"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Ottavio Bottecchia (ITA)"), "Ottavio Bottecchia"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Bernard Hinault (FRA)"), "Bernard Hinault")])
problem_b146 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3,360 km (2,088 mi) 84h 46' 14\""), "2,088"), 
	IOExample(Dict{Symbol, Any}(:x => "3,430 km (2,130 mi) 86h 12' 22\""), "2,130"), 
	IOExample(Dict{Symbol, Any}(:x => "3,496 km (2,172 mi) 87h 34' 47\""), "2,172"), 
	IOExample(Dict{Symbol, Any}(:x => "3,404 km (2,115 mi) 83h 56' 20\""), "2,115"), 
	IOExample(Dict{Symbol, Any}(:x => "3,570 km (2,220 mi) 91h 00' 26\""), "2,220"), 
	IOExample(Dict{Symbol, Any}(:x => "3,529 km (2,193 mi) 89h 04' 48\""), "2,193"), 
	IOExample(Dict{Symbol, Any}(:x => "3,459 km (2,149 mi) 85h 48' 35\""), "2,149"), 
	IOExample(Dict{Symbol, Any}(:x => "3,559 km (2,211 mi) 87h 52' 52\""), "2,211"), 
	IOExample(Dict{Symbol, Any}(:x => "3,660 km (2,274 mi) 89h 59' 06\""), "2,274"), 
	IOExample(Dict{Symbol, Any}(:x => "3,540 km (2,200 mi) 86h 20' 55\""), "2,200")])
problem_b147 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "London, UK: 8.136 million people"), "London, 8.136"), 
	IOExample(Dict{Symbol, Any}(:x => "Mumbai, India: 27.8 million people"), "Mumbai, 27.8"), 
	IOExample(Dict{Symbol, Any}(:x => "Shanghai, China: 30.8 million people"), "Shanghai, 30.8"), 
	IOExample(Dict{Symbol, Any}(:x => "Dhaka, Bangladesh: 27.4 million people"), "Dhaka, 27.4"), 
	IOExample(Dict{Symbol, Any}(:x => "Karachi, Pakistan: 24.8 million people"), "Karachi, 24.8"), 
	IOExample(Dict{Symbol, Any}(:x => "Cairo, Egypt: 24.5 million people"), "Cairo, 24.5"), 
	IOExample(Dict{Symbol, Any}(:x => "Beijing, China: 27.7 million people"), "Beijing, 27.7"), 
	IOExample(Dict{Symbol, Any}(:x => "New York, USA: 8.26 million people"), "New York, 8.26"), 
	IOExample(Dict{Symbol, Any}(:x => "Delhi, India: 36.1 million people"), "Delhi, 36.1"), 
	IOExample(Dict{Symbol, Any}(:x => "Tokyo, Japan: 37.2 million people"), "Tokyo, 37.2")])
problem_b148 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Beijing, China: 27.7 million people"), "China"), 
	IOExample(Dict{Symbol, Any}(:x => "Cairo, Egypt: 24.5 million people"), "Egypt"), 
	IOExample(Dict{Symbol, Any}(:x => "Delhi, India: 36.1 million people"), "India"), 
	IOExample(Dict{Symbol, Any}(:x => "London, UK: 8.136 million people"), "UK"), 
	IOExample(Dict{Symbol, Any}(:x => "New York, USA: 8.26 million people"), "USA"), 
	IOExample(Dict{Symbol, Any}(:x => "Dhaka, Bangladesh: 27.4 million people"), "Bangladesh"), 
	IOExample(Dict{Symbol, Any}(:x => "Mumbai, India: 27.8 million people"), "India"), 
	IOExample(Dict{Symbol, Any}(:x => "Shanghai, China: 30.8 million people"), "China"), 
	IOExample(Dict{Symbol, Any}(:x => "Karachi, Pakistan: 24.8 million people"), "Pakistan"), 
	IOExample(Dict{Symbol, Any}(:x => "Tokyo, Japan: 37.2 million people"), "Japan")])
problem_b14 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "CHORE BOY HD SC SPNG 1 PK"), "1 PK"), 
	IOExample(Dict{Symbol, Any}(:x => "Heinz Classic Cream of Tomato Soup 400g"), "400g"), 
	IOExample(Dict{Symbol, Any}(:x => "FRENCH WORCESTERSHIRE 5 Z"), "5 Z"), 
	IOExample(Dict{Symbol, Any}(:x => "Nestle Smarties 4x38g"), "4x38g"), 
	IOExample(Dict{Symbol, Any}(:x => "BTR KRNL WK CORN 15Z"), "15Z"), 
	IOExample(Dict{Symbol, Any}(:x => "CAMP DRY DBL NDL 3.6 OZ"), "3.6 OZ"), 
	IOExample(Dict{Symbol, Any}(:x => "BKD BEANS 28 OZ"), "28 OZ"), 
	IOExample(Dict{Symbol, Any}(:x => "BSH ORIG BEANS 8.3oz"), "8.3oz"), 
	IOExample(Dict{Symbol, Any}(:x => "O F TOMATO PASTE 6 OZ"), "6 OZ"), 
	IOExample(Dict{Symbol, Any}(:x => "Doritos Chilli Heatwave 180g"), "180g")])
problem_b150 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "thailand 6,906"), "Thailand 6,906"), 
	IOExample(Dict{Symbol, Any}(:x => "south korea 99,880"), "South Korea 99,880"), 
	IOExample(Dict{Symbol, Any}(:x => "myanmar 4,781"), "Myanmar 4,781"), 
	IOExample(Dict{Symbol, Any}(:x => "france 4,781"), "France 4,781"), 
	IOExample(Dict{Symbol, Any}(:x => "india 8,313"), "India 8,313"), 
	IOExample(Dict{Symbol, Any}(:x => "nepal 8,669"), "Nepal 8,669"), 
	IOExample(Dict{Symbol, Any}(:x => "united kingdom 5,522"), "United Kingdom 5,522"), 
	IOExample(Dict{Symbol, Any}(:x => "united states 15,901"), "United States 15,901"), 
	IOExample(Dict{Symbol, Any}(:x => "philippines 27,929"), "Philippines 27,929"), 
	IOExample(Dict{Symbol, Any}(:x => "china 161,169"), "China 161,169")])
problem_b151 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "chris"), "crs"), 
	IOExample(Dict{Symbol, Any}(:x => "thomas"), "toa"), 
	IOExample(Dict{Symbol, Any}(:x => "james"), "jms"), 
	IOExample(Dict{Symbol, Any}(:x => "sarah"), "srh"), 
	IOExample(Dict{Symbol, Any}(:x => "alice"), "aie"), 
	IOExample(Dict{Symbol, Any}(:x => "paul"), "pu"), 
	IOExample(Dict{Symbol, Any}(:x => "laura"), "lua"), 
	IOExample(Dict{Symbol, Any}(:x => "charles"), "cals"), 
	IOExample(Dict{Symbol, Any}(:x => "edith"), "eih"), 
	IOExample(Dict{Symbol, Any}(:x => "nigel"), "ngl")])
problem_b152 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/professorwcohen"), "professorwcohen"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/UdiShapiro"), "UdiShapiro"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/TobyWalsh"), "TobyWalsh"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/SumitGulwani"), "SumitGulwani"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/tommmitchell"), "tommmitchell"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/pelotonespresso"), "pelotonespresso"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/RealAAAI"), "RealAAAI"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/PLDI"), "PLDI"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/HertfordCollege"), "HertfordCollege"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/poplconf"), "poplconf")])
problem_b153 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/professorwcohen"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/RealAAAI"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/tommmitchell"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/PLDI"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/UdiShapiro"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/pelotonespresso"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/TobyWalsh"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/HertfordCollege"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/SumitGulwani"), "twitter.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.twitter.com/poplconf"), "twitter.com")])
problem_b154 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Diners Club,30239396183269"), "Diners Club"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4532035570024922"), "Visa"), 
	IOExample(Dict{Symbol, Any}(:x => "Diners Club,30189831127696"), "Diners Club"), 
	IOExample(Dict{Symbol, Any}(:x => "American Express,346743115587584"), "American Express"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4916944185554908"), "Visa"), 
	IOExample(Dict{Symbol, Any}(:x => "American Express,373976083599365"), "American Express"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4556876501562519"), "Visa"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4532333294347962"), "Visa"), 
	IOExample(Dict{Symbol, Any}(:x => "Diners Club,30353191710174"), "Diners Club"), 
	IOExample(Dict{Symbol, Any}(:x => "American Express,343660986553409"), "American Express")])
problem_b155 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "American Express,346743115587584"), "346743115587584"), 
	IOExample(Dict{Symbol, Any}(:x => "Diners Club,30353191710174"), "30353191710174"), 
	IOExample(Dict{Symbol, Any}(:x => "American Express,373976083599365"), "373976083599365"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4916944185554908"), "4916944185554908"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4556876501562519"), "4556876501562519"), 
	IOExample(Dict{Symbol, Any}(:x => "Diners Club,30189831127696"), "30189831127696"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4532333294347962"), "4532333294347962"), 
	IOExample(Dict{Symbol, Any}(:x => "American Express,343660986553409"), "343660986553409"), 
	IOExample(Dict{Symbol, Any}(:x => "Diners Club,30239396183269"), "30239396183269"), 
	IOExample(Dict{Symbol, Any}(:x => "Visa,4532035570024922"), "4532035570024922")])
problem_b156 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5405 1052 2515 1916, 01/20, 340, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5122 1790 8893 7705, 09/21, 284, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1062 9387 1716, 03/20, 429, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4106 1475 1970, 09/22, 397, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5314 5016 8586 8462, 01/21, 850, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3650 8176 1320, 02/23, 549, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1005 1530 5793, 08/23, 915, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4852 1289 3133, 01/22, 431, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1087 3189 9176, 11/21, 694, MasterCard"), "MasterCard"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1083 2063 8654, 05/22, 648, MasterCard"), "MasterCard")])
problem_b157 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5405 1052 2515 1916, 01/20, 340, MasterCard"), "01/20"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1087 3189 9176, 11/21, 694, MasterCard"), "11/21"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4106 1475 1970, 09/22, 397, MasterCard"), "09/22"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1062 9387 1716, 03/20, 429, MasterCard"), "03/20"), 
	IOExample(Dict{Symbol, Any}(:x => "5314 5016 8586 8462, 01/21, 850, MasterCard"), "01/21"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3650 8176 1320, 02/23, 549, MasterCard"), "02/23"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1083 2063 8654, 05/22, 648, MasterCard"), "05/22"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4852 1289 3133, 01/22, 431, MasterCard"), "01/22"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1005 1530 5793, 08/23, 915, MasterCard"), "08/23"), 
	IOExample(Dict{Symbol, Any}(:x => "5122 1790 8893 7705, 09/21, 284, MasterCard"), "09/21")])
problem_b158 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5314 5016 8586 8462, 01/21, 850, MasterCard"), "5314 5016 8586 8462"), 
	IOExample(Dict{Symbol, Any}(:x => "5122 1790 8893 7705, 09/21, 284, MasterCard"), "5122 1790 8893 7705"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1083 2063 8654, 05/22, 648, MasterCard"), "5405 1083 2063 8654"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1052 2515 1916, 01/20, 340, MasterCard"), "5405 1052 2515 1916"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1087 3189 9176, 11/21, 694, MasterCard"), "5405 1087 3189 9176"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1062 9387 1716, 03/20, 429, MasterCard"), "5405 1062 9387 1716"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3650 8176 1320, 02/23, 549, MasterCard"), "5404 3650 8176 1320"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4106 1475 1970, 09/22, 397, MasterCard"), "5218 4106 1475 1970"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4852 1289 3133, 01/22, 431, MasterCard"), "5137 4852 1289 3133"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1005 1530 5793, 08/23, 915, MasterCard"), "5405 1005 1530 5793")])
problem_b159 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5137 4852 1289 3133, 01/22, 431, MasterCard"), "431"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1052 2515 1916, 01/20, 340, MasterCard"), "340"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1087 3189 9176, 11/21, 694, MasterCard"), "694"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1005 1530 5793, 08/23, 915, MasterCard"), "915"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4106 1475 1970, 09/22, 397, MasterCard"), "397"), 
	IOExample(Dict{Symbol, Any}(:x => "5314 5016 8586 8462, 01/21, 850, MasterCard"), "850"), 
	IOExample(Dict{Symbol, Any}(:x => "5122 1790 8893 7705, 09/21, 284, MasterCard"), "284"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1062 9387 1716, 03/20, 429, MasterCard"), "429"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3650 8176 1320, 02/23, 549, MasterCard"), "549"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1083 2063 8654, 05/22, 648, MasterCard"), "648")])
problem_b15 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "/Company/Code/index.html"), "/Company/Code/"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/bin/ncdu.exe"), "/usr/local/bin/"), 
	IOExample(Dict{Symbol, Any}(:x => "/var/db/auth.db"), "/var/db/"), 
	IOExample(Dict{Symbol, Any}(:x => "/Work/Records/2010/January.dat"), "/Work/Records/2010/"), 
	IOExample(Dict{Symbol, Any}(:x => "/Work/Presentations/talk.ppt"), "/Work/Presentations/"), 
	IOExample(Dict{Symbol, Any}(:x => "/Users/jim/Downloads/pdf.pdf"), "/Users/jim/Downloads/"), 
	IOExample(Dict{Symbol, Any}(:x => "/Proj/Numerical/NBody/nbody.c"), "/Proj/Numerical/NBody/"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/texlive/2017/doc.html"), "/usr/local/texlive/2017/"), 
	IOExample(Dict{Symbol, Any}(:x => "/Company/Docs/Spec/specs.doc"), "/Company/Docs/Spec/"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/Homebrew/CONTRIBUTING.md"), "/usr/local/Homebrew/")])
problem_b160 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5405 1040 5693 1652, 07/21, 177, Holli Claxton, MasterCard"), "Holli Claxton"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4136 7761 5496, 05/20, 505, Devell Blaisdell, MasterCard"), "Devell Blaisdell"), 
	IOExample(Dict{Symbol, Any}(:x => "5323 5254 7005 2676, 07/23, 627, Simmona Elzey, MasterCard"), "Simmona Elzey"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3677 2397 0897, 12/20, 710, Fulk Sharkey, MasterCard"), "Fulk Sharkey"), 
	IOExample(Dict{Symbol, Any}(:x => "5520 7165 1105 8274, 04/22, 705, Emina Burkley, MasterCard"), "Emina Burkley"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4823 6957 8278, 06/22, 231, Affonso Tousignant, MasterCard"), "Affonso Tousignant"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7317 7561 0495, 12/23, 207, Deval O'Donnell, MasterCard"), "Deval O'Donnell"), 
	IOExample(Dict{Symbol, Any}(:x => "5121 6409 6639 2751, 11/20, 275, Wioleta Sheffer, MasterCard"), "Wioleta Sheffer"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7150 6827 2113, 06/21, 130, Sariel Reale, MasterCard"), "Sariel Reale"), 
	IOExample(Dict{Symbol, Any}(:x => "5127 1743 3998 9394, 01/20, 588, Gilbertha Stamey, MasterCard"), "Gilbertha Stamey")])
problem_b161 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Brand: Apple Model: iPhone 5"), "iPhone 5"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 7370"), "7370"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Feton Technology Model: ALPS A618"), "ALPS A618"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6208c"), "6208c"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6310"), "6310"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 2680"), "2680"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6150"), "6150"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Sony Ericsson Model: W580"), "W580"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 3210"), "3210"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: LG Model: MG155c"), "MG155c")])
problem_b162 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6310"), "Nokia"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6208c"), "Nokia"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6150"), "Nokia"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Feton Model: ALPS A618"), "Feton"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 3210"), "Nokia"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Apple Model: iPhone 5"), "Apple"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: LG Model: MG155c"), "LG"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Sony Model: W580"), "Sony"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 2680"), "Nokia"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 7370"), "Nokia")])
problem_b163 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6310"), "Nokia 6310"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 2680"), "Nokia 2680"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6150"), "Nokia 6150"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Apple Model: iPhone 5"), "Apple iPhone 5"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 7370"), "Nokia 7370"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 3210"), "Nokia 3210"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Sony Model: W580"), "Sony W580"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: LG Model: MG155c"), "LG MG155c"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Nokia Model: 6208c"), "Nokia 6208c"), 
	IOExample(Dict{Symbol, Any}(:x => "Brand: Feton Model: ALPS A618"), "Feton ALPS A618")])
problem_b167 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "30, Place de la Gare 5036 COLOMIERS, France"), "5036"), 
	IOExample(Dict{Symbol, Any}(:x => "4, Chemin Des Bateliers 2663 ANGLET, France"), "2663"), 
	IOExample(Dict{Symbol, Any}(:x => "43, Faubourg Saint Honore 9489 PARIS, France"), "9489"), 
	IOExample(Dict{Symbol, Any}(:x => "55, rue Descartes 5306 SURESNES, France"), "5306"), 
	IOExample(Dict{Symbol, Any}(:x => "65, boulevard Bryas 2619 COURBEVOIE, France"), "2619"), 
	IOExample(Dict{Symbol, Any}(:x => "27, avenue de Bouvines 2867 SCHOELCHER, France"), "2867"), 
	IOExample(Dict{Symbol, Any}(:x => "57, Rue Roussy 6711 ORANGE, France"), "6711"), 
	IOExample(Dict{Symbol, Any}(:x => "95, rue de la Boetie 772 POITIERS, France"), "772"), 
	IOExample(Dict{Symbol, Any}(:x => "33, rue Nationale 5752 PARIS, France"), "5752"), 
	IOExample(Dict{Symbol, Any}(:x => "16, Chemin Du Lavarin Sud 2935 CAEN, France"), "2935")])
problem_b168 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "16, Chemin Du Lavarin Sud 2935 CAEN, France"), "16, Chemin Du Lavarin Sud"), 
	IOExample(Dict{Symbol, Any}(:x => "57, Rue Roussy 6711 ORANGE, France"), "57, Rue Roussy"), 
	IOExample(Dict{Symbol, Any}(:x => "33, rue Nationale 5752 PARIS, France"), "33, rue Nationale"), 
	IOExample(Dict{Symbol, Any}(:x => "30, Place de la Gare 5036 COLOMIERS, France"), "30, Place de la Gare"), 
	IOExample(Dict{Symbol, Any}(:x => "4, Chemin Des Bateliers 2663 ANGLET, France"), "4, Chemin Des Bateliers"), 
	IOExample(Dict{Symbol, Any}(:x => "43, Faubourg Saint Honore 9489 PARIS, France"), "43, Faubourg Saint Honore"), 
	IOExample(Dict{Symbol, Any}(:x => "27, avenue de Bouvines 2867 SCHOELCHER, France"), "27, avenue de Bouvines"), 
	IOExample(Dict{Symbol, Any}(:x => "65, boulevard Bryas 2619 COURBEVOIE, France"), "65, boulevard Bryas"), 
	IOExample(Dict{Symbol, Any}(:x => "95, rue de la Boetie 772 POITIERS, France"), "95, rue de la Boetie"), 
	IOExample(Dict{Symbol, Any}(:x => "55, rue Descartes 5306 SURESNES, France"), "55, rue Descartes")])
problem_b169 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "55, rue Descartes 5306 SURESNES, France"), "SURESNES"), 
	IOExample(Dict{Symbol, Any}(:x => "33, rue Nationale 5752 PARIS, France"), "PARIS"), 
	IOExample(Dict{Symbol, Any}(:x => "65, boulevard Bryas 2619 COURBEVOIE, France"), "COURBEVOIE"), 
	IOExample(Dict{Symbol, Any}(:x => "30, Place de la Gare 5036 COLOMIERS, France"), "COLOMIERS"), 
	IOExample(Dict{Symbol, Any}(:x => "95, rue de la Boetie 772 POITIERS, France"), "POITIERS"), 
	IOExample(Dict{Symbol, Any}(:x => "4, Chemin Des Bateliers 2663 ANGLET, France"), "ANGLET"), 
	IOExample(Dict{Symbol, Any}(:x => "57, Rue Roussy 6711 ORANGE, France"), "ORANGE"), 
	IOExample(Dict{Symbol, Any}(:x => "27, avenue de Bouvines 2867 SCHOELCHER, France"), "SCHOELCHER"), 
	IOExample(Dict{Symbol, Any}(:x => "43, Faubourg Saint Honore 9489 PARIS, France"), "PARIS"), 
	IOExample(Dict{Symbol, Any}(:x => "16, Chemin Du Lavarin Sud 2935 CAEN, France"), "CAEN")])
problem_b16 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/texlive/2017/doc.html"), "doc.html"), 
	IOExample(Dict{Symbol, Any}(:x => "/Company/Code/index.html"), "index.html"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/bin/ncdu.exe"), "ncdu.exe"), 
	IOExample(Dict{Symbol, Any}(:x => "/Work/Presentations/talk.ppt"), "talk.ppt"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/Homebrew/CONTRIBUTING.md"), "CONTRIBUTING.md"), 
	IOExample(Dict{Symbol, Any}(:x => "/Work/Records/2010/January.dat"), "January.dat"), 
	IOExample(Dict{Symbol, Any}(:x => "/Proj/Numerical/Simulators/NBody/nbody.c"), "nbody.c"), 
	IOExample(Dict{Symbol, Any}(:x => "/Company/Docs/Spec/specs.doc"), "specs.doc"), 
	IOExample(Dict{Symbol, Any}(:x => "/Users/jim/Downloads/pdf.pdf"), "pdf.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "/var/db/auth.db"), "auth.db")])
problem_b170 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "57, Rue Roussy 6711 ORANGE, France"), "Rue Roussy"), 
	IOExample(Dict{Symbol, Any}(:x => "95, rue de la Boetie 772 POITIERS, France"), "rue de la Boetie"), 
	IOExample(Dict{Symbol, Any}(:x => "33, rue Nationale 5752 PARIS, France"), "rue Nationale"), 
	IOExample(Dict{Symbol, Any}(:x => "4, Chemin Des Bateliers 2663 ANGLET, France"), "Chemin Des Bateliers"), 
	IOExample(Dict{Symbol, Any}(:x => "27, avenue de Bouvines 2867 SCHOELCHER, France"), "avenue de Bouvines"), 
	IOExample(Dict{Symbol, Any}(:x => "16, Chemin Du Lavarin Sud 2935 CAEN, France"), "Chemin Du Lavarin Sud"), 
	IOExample(Dict{Symbol, Any}(:x => "30, Place de la Gare 5036 COLOMIERS, France"), "Place de la Gare"), 
	IOExample(Dict{Symbol, Any}(:x => "55, rue Descartes 5306 SURESNES, France"), "55, rue Descartes"), 
	IOExample(Dict{Symbol, Any}(:x => "43, Faubourg Saint Honore 9489 PARIS, France"), "Faubourg Saint Honore"), 
	IOExample(Dict{Symbol, Any}(:x => "65, boulevard Bryas 2619 COURBEVOIE, France"), "boulevard Bryas")])
problem_b171 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "65, boulevard Bryas 2619 COURBEVOIE, France"), "Courbevoie"), 
	IOExample(Dict{Symbol, Any}(:x => "95, rue de la Boetie 772 POITIERS, France"), "Poitiers"), 
	IOExample(Dict{Symbol, Any}(:x => "30, Place de la Gare 5036 COLOMIERS, France"), "Colomiers"), 
	IOExample(Dict{Symbol, Any}(:x => "43, Faubourg Saint Honore 9489 PARIS, France"), "Paris"), 
	IOExample(Dict{Symbol, Any}(:x => "57, Rue Roussy 6711 ORANGE, France"), "Orange"), 
	IOExample(Dict{Symbol, Any}(:x => "33, rue Nationale 5752 PARIS, France"), "Paris"), 
	IOExample(Dict{Symbol, Any}(:x => "27, avenue de Bouvines 2867 SCHOELCHER, France"), "Schoelcher"), 
	IOExample(Dict{Symbol, Any}(:x => "4, Chemin Des Bateliers 2663 ANGLET, France"), "Anglet"), 
	IOExample(Dict{Symbol, Any}(:x => "55, rue Descartes 5306 SURESNES, France"), "Suresnes"), 
	IOExample(Dict{Symbol, Any}(:x => "16, Chemin Du Lavarin Sud 2935 CAEN, France"), "Caen")])
problem_b172 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "30, Place de la Gare 5036 COLOMIERS, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "16, Chemin Du Lavarin Sud 2935 CAEN, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "33, rue Nationale 5752 PARIS, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "27, avenue de Bouvines 2867 SCHOELCHER, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "55, rue Descartes 5306 SURESNES, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "43, Faubourg Saint Honore 9489 PARIS, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "57, Rue Roussy 6711 ORANGE, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "4, Chemin Des Bateliers 2663 ANGLET, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "65, boulevard Bryas 2619 COURBEVOIE, France"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "95, rue de la Boetie 772 POITIERS, France"), "France")])
problem_b173 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Paderborner Strasse 6836 5660 Sielenbach, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Scharnweberstrasse 7308 9751 Mannheim Friedrichsfeld, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Flughafenstrasse 2472 5370 Leonberg, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Marseiller Strasse 5542 7619 Schwabsoien, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Ufnau Strasse 1464 2320 Fellheim, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "An Der Urania 211 6544 Aebtissinwisch, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Ellmenreichstrasse 7660 5523 Adelsdorf, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Waldowstr 3442 4532 Dorzbach, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Alsterkrugchaussee 3048 2847 Megesheim, Germany"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "Brandenburgische Str 7737 5061 Martinstein, Germany"), "Germany")])
problem_b174 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Ellmenreichstrasse 7660 5523 Adelsdorf, Germany"), "Adelsdorf"), 
	IOExample(Dict{Symbol, Any}(:x => "Brandenburgische Str 7737 5061 Martinstein, Germany"), "Martinstein"), 
	IOExample(Dict{Symbol, Any}(:x => "Scharnweberstrasse 7308 9751 Mannheim Friedrichsfeld, Germany"), "Mannheim Friedrichsfeld"), 
	IOExample(Dict{Symbol, Any}(:x => "Ufnau Strasse 1464 2320 Fellheim, Germany"), "Fellheim"), 
	IOExample(Dict{Symbol, Any}(:x => "Waldowstr 3442 4532 Dorzbach, Germany"), "Dorzbach"), 
	IOExample(Dict{Symbol, Any}(:x => "An Der Urania 211 6544 Aebtissinwisch, Germany"), "Aebtissinwisch"), 
	IOExample(Dict{Symbol, Any}(:x => "Marseiller Strasse 5542 7619 Schwabsoien, Germany"), "Schwabsoien"), 
	IOExample(Dict{Symbol, Any}(:x => "Alsterkrugchaussee 3048 2847 Megesheim, Germany"), "Megesheim"), 
	IOExample(Dict{Symbol, Any}(:x => "Paderborner Strasse 6836 5660 Sielenbach, Germany"), "Sielenbach"), 
	IOExample(Dict{Symbol, Any}(:x => "Flughafenstrasse 2472 5370 Leonberg, Germany"), "Leonberg")])
problem_b175 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Ellmenreichstrasse 7660 5523 Adelsdorf, Germany"), "7660 5523"), 
	IOExample(Dict{Symbol, Any}(:x => "Paderborner Strasse 6836 5660 Sielenbach, Germany"), "6836 5660"), 
	IOExample(Dict{Symbol, Any}(:x => "Ufnau Strasse 1464 2320 Fellheim, Germany"), "1464 2320"), 
	IOExample(Dict{Symbol, Any}(:x => "An Der Urania 211 6544 Aebtissinwisch, Germany"), "211 6544"), 
	IOExample(Dict{Symbol, Any}(:x => "Marseiller Strasse 5542 7619 Schwabsoien, Germany"), "5542 7619"), 
	IOExample(Dict{Symbol, Any}(:x => "Scharnweberstrasse 7308 9751 Mannheim Friedrichsfeld, Germany"), "7308 9751"), 
	IOExample(Dict{Symbol, Any}(:x => "Alsterkrugchaussee 3048 2847 Megesheim, Germany"), "3048 2847"), 
	IOExample(Dict{Symbol, Any}(:x => "Brandenburgische Str 7737 5061 Martinstein, Germany"), "7737 5061"), 
	IOExample(Dict{Symbol, Any}(:x => "Waldowstr 3442 4532 Dorzbach, Germany"), "3442 4532"), 
	IOExample(Dict{Symbol, Any}(:x => "Flughafenstrasse 2472 5370 Leonberg, Germany"), "2472 5370")])
problem_b176 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Paderborner Strasse 6836 5660 Sielenbach, Germany"), "Paderborner Strasse"), 
	IOExample(Dict{Symbol, Any}(:x => "Ellmenreichstrasse 7660 5523 Adelsdorf, Germany"), "Ellmenreichstrasse"), 
	IOExample(Dict{Symbol, Any}(:x => "Scharnweberstrasse 7308 9751 Mannheim Friedrichsfeld, Germany"), "Scharnweberstrasse"), 
	IOExample(Dict{Symbol, Any}(:x => "Ufnau Strasse 1464 2320 Fellheim, Germany"), "Ufnau Strasse"), 
	IOExample(Dict{Symbol, Any}(:x => "Alsterkrugchaussee 3048 2847 Megesheim, Germany"), "Alsterkrugchaussee"), 
	IOExample(Dict{Symbol, Any}(:x => "An Der Urania 211 6544 Aebtissinwisch, Germany"), "An Der Urania"), 
	IOExample(Dict{Symbol, Any}(:x => "Flughafenstrasse 2472 5370 Leonberg, Germany"), "Flughafenstrasse"), 
	IOExample(Dict{Symbol, Any}(:x => "Brandenburgische Str 7737 5061 Martinstein, Germany"), "Brandenburgische Str"), 
	IOExample(Dict{Symbol, Any}(:x => "Waldowstr 3442 4532 Dorzbach, Germany"), "Waldowstr"), 
	IOExample(Dict{Symbol, Any}(:x => "Marseiller Strasse 5542 7619 Schwabsoien, Germany"), "Marseiller Strasse")])
problem_b177 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Piazza Giuseppe Garibaldi, 2402 43010-Castelguelfo PR, Italy"), "Piazza Giuseppe Garibaldi"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Foria, 9145 71030-Macchia FG, Italy"), "Via Foria"), 
	IOExample(Dict{Symbol, Any}(:x => "Corso Garibaldi, 6254 03010-Patrica FR, Italy"), "Corso Garibaldi"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Duomo, 7754 57024-Donoratico LI, Italy"), "Via Duomo"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Trieste e Trento, 1005 12078-Ormea CN, Italy"), "Piazza Trieste e Trento"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Santa Teresa, 9341 53049-Torrita Di Siena SI, Italy"), "Via Santa Teresa"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Bologna, 4069 26849-Santo Stefano Lodigiano LO, Italy"), "Via Bologna"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Matteo Schilizzi, 1513 16045-Lorsica GE, Italy"), "Via Matteo Schilizzi"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Cavour, 6561 81030-Lusciano CE, Italy"), "Via Cavour"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Valpantena, 9266 84032-Buonabitacolo SA, Italy"), "Via Valpantena")])
problem_b178 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Via Foria, 9145 71030-Macchia FG, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Santa Teresa, 9341 53049-Torrita Di Siena SI, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Matteo Schilizzi, 1513 16045-Lorsica GE, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Trieste e Trento, 1005 12078-Ormea CN, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Valpantena, 9266 84032-Buonabitacolo SA, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Giuseppe Garibaldi, 2402 43010-Castelguelfo PR, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Cavour, 6561 81030-Lusciano CE, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Duomo, 7754 57024-Donoratico LI, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Corso Garibaldi, 6254 03010-Patrica FR, Italy"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Bologna, 4069 26849-Santo Stefano Lodigiano LO, Italy"), "Italy")])
problem_b179 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Via Valpantena, 9266 84032-Buonabitacolo SA, Italy"), "SA"), 
	IOExample(Dict{Symbol, Any}(:x => "Corso Garibaldi, 6254 03010-Patrica FR, Italy"), "FR"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Cavour, 6561 81030-Lusciano CE, Italy"), "CE"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Bologna, 4069 26849-Santo Stefano Lodigiano LO, Italy"), "LO"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Giuseppe Garibaldi, 2402 43010-Castelguelfo PR, Italy"), "PR"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Duomo, 7754 57024-Donoratico LI, Italy"), "LI"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Santa Teresa, 9341 53049-Torrita Di Siena SI, Italy"), "SI"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Matteo Schilizzi, 1513 16045-Lorsica GE, Italy"), "GE"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Foria, 9145 71030-Macchia FG, Italy"), "FG"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Trieste e Trento, 1005 12078-Ormea CN, Italy"), "CN")])
problem_b17 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Inductive Logic Programming"), "ILP"), 
	IOExample(Dict{Symbol, Any}(:x => "Algorithmic Learning Theory"), "ALT"), 
	IOExample(Dict{Symbol, Any}(:x => "European Conference Artificial Intelligence"), "ECAI"), 
	IOExample(Dict{Symbol, Any}(:x => "Neural Information Processing Systems"), "NIPS"), 
	IOExample(Dict{Symbol, Any}(:x => "International Semantic Web Conference"), "ISWC"), 
	IOExample(Dict{Symbol, Any}(:x => "Computer Aided Verification"), "CAV"), 
	IOExample(Dict{Symbol, Any}(:x => "Very Large Data Bases"), "VLDB"), 
	IOExample(Dict{Symbol, Any}(:x => "Principles Of Programming Languages"), "POPL"), 
	IOExample(Dict{Symbol, Any}(:x => "Design Automation Conference"), "DAC"), 
	IOExample(Dict{Symbol, Any}(:x => "British Machine Vision Conference"), "BMVC")])
problem_b180 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Via Cavour, 6561 81030-Lusciano CE, Italy"), "6561"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Foria, 9145 71030-Macchia FG, Italy"), "9145"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Matteo Schilizzi, 1513 16045-Lorsica GE, Italy"), "1513"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Giuseppe Garibaldi, 2402 43010-Castelguelfo PR, Italy"), "2402"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Trieste e Trento, 1005 12078-Ormea CN, Italy"), "1005"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Bologna, 4069 26849-Santo Stefano Lodigiano LO, Italy"), "4069"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Duomo, 7754 57024-Donoratico LI, Italy"), "7754"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Santa Teresa, 9341 53049-Torrita Di Siena SI, Italy"), "9341"), 
	IOExample(Dict{Symbol, Any}(:x => "Corso Garibaldi, 6254 03010-Patrica FR, Italy"), "6254"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Valpantena, 9266 84032-Buonabitacolo SA, Italy"), "9266")])
problem_b181 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Via Foria, 9145 71030-Macchia FG, Italy"), "71030"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Duomo, 7754 57024-Donoratico LI, Italy"), "57024"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Valpantena, 9266 84032-Buonabitacolo SA, Italy"), "84032"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Matteo Schilizzi, 1513 16045-Lorsica GE, Italy"), "16045"), 
	IOExample(Dict{Symbol, Any}(:x => "Corso Garibaldi, 6254 03010-Patrica FR, Italy"), "03010"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Santa Teresa, 9341 53049-Torrita Di Siena SI, Italy"), "53049"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Trieste e Trento, 1005 12078-Ormea CN, Italy"), "12078"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Bologna, 4069 26849-Santo Stefano Lodigiano LO, Italy"), "26849"), 
	IOExample(Dict{Symbol, Any}(:x => "Via Cavour, 6561 81030-Lusciano CE, Italy"), "81030"), 
	IOExample(Dict{Symbol, Any}(:x => "Piazza Giuseppe Garibaldi, 2402 43010-Castelguelfo PR, Italy"), "43010")])
problem_b182 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "30 October,1955 (63 years old)"), "October"), 
	IOExample(Dict{Symbol, Any}(:x => "21 April,1965 (53 years old)"), "April"), 
	IOExample(Dict{Symbol, Any}(:x => "28 December,1958 (60 years old)"), "December"), 
	IOExample(Dict{Symbol, Any}(:x => "23 November,1954 (64 years old)"), "November"), 
	IOExample(Dict{Symbol, Any}(:x => "26 October,1998 (20 years old)"), "October"), 
	IOExample(Dict{Symbol, Any}(:x => "21 October,1943 (75 years old)"), "October"), 
	IOExample(Dict{Symbol, Any}(:x => "25 September,1980 (38 years old)"), "September"), 
	IOExample(Dict{Symbol, Any}(:x => "22 July,1983 (35 years old)"), "July"), 
	IOExample(Dict{Symbol, Any}(:x => "2 May,1941 (77 years old)"), "May"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1947 (71 years old)"), "July")])
problem_b183 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2 May,1941 (77 years old)"), "1941"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1947 (71 years old)"), "1947"), 
	IOExample(Dict{Symbol, Any}(:x => "26 October,1998 (20 years old)"), "1998"), 
	IOExample(Dict{Symbol, Any}(:x => "21 October,1943 (75 years old)"), "1943"), 
	IOExample(Dict{Symbol, Any}(:x => "25 September,1980 (38 years old)"), "1980"), 
	IOExample(Dict{Symbol, Any}(:x => "23 November,1954 (64 years old)"), "1954"), 
	IOExample(Dict{Symbol, Any}(:x => "22 July,1983 (35 years old)"), "1983"), 
	IOExample(Dict{Symbol, Any}(:x => "28 December,1958 (60 years old)"), "1958"), 
	IOExample(Dict{Symbol, Any}(:x => "30 October,1955 (63 years old)"), "1955"), 
	IOExample(Dict{Symbol, Any}(:x => "21 April,1965 (53 years old)"), "1965")])
problem_b184 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "21 April,1965 (53 years old)"), "53"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1947 (71 years old)"), "71"), 
	IOExample(Dict{Symbol, Any}(:x => "22 July,1983 (35 years old)"), "35"), 
	IOExample(Dict{Symbol, Any}(:x => "2 May,1941 (77 years old)"), "194"), 
	IOExample(Dict{Symbol, Any}(:x => "28 December,1958 (60 years old)"), "60"), 
	IOExample(Dict{Symbol, Any}(:x => "25 September,1980 (38 years old)"), "38"), 
	IOExample(Dict{Symbol, Any}(:x => "21 October,1943 (75 years old)"), "75"), 
	IOExample(Dict{Symbol, Any}(:x => "26 October,1998 (20 years old)"), "20"), 
	IOExample(Dict{Symbol, Any}(:x => "30 October,1955 (63 years old)"), "63"), 
	IOExample(Dict{Symbol, Any}(:x => "23 November,1954 (64 years old)"), "64")])
problem_b185 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "28 December,1958 (60 years old)"), "28 December,1958"), 
	IOExample(Dict{Symbol, Any}(:x => "23 November,1954 (64 years old)"), "23 November,1954"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1947 (71 years old)"), "11 July,1947"), 
	IOExample(Dict{Symbol, Any}(:x => "25 September,1980 (38 years old)"), "25 September,1980"), 
	IOExample(Dict{Symbol, Any}(:x => "22 July,1983 (35 years old)"), "22 July,1983"), 
	IOExample(Dict{Symbol, Any}(:x => "26 October,1998 (20 years old)"), "26 October,1998"), 
	IOExample(Dict{Symbol, Any}(:x => "30 October,1955 (63 years old)"), "30 October,1955"), 
	IOExample(Dict{Symbol, Any}(:x => "21 October,1943 (75 years old)"), "21 October,1943"), 
	IOExample(Dict{Symbol, Any}(:x => "21 April,1965 (53 years old)"), "21 April,1965"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1950 (74 years old)"), "11 July,1950")])
problem_b186 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Here and There (2010)"), "2010"), 
	IOExample(Dict{Symbol, Any}(:x => "Forbandede barndom (2003)"), "2003"), 
	IOExample(Dict{Symbol, Any}(:x => "Common Law (2012)"), "2012"), 
	IOExample(Dict{Symbol, Any}(:x => "Das Gold der Liebe (1983)"), "1983"), 
	IOExample(Dict{Symbol, Any}(:x => "Rapturious (2007)"), "2007"), 
	IOExample(Dict{Symbol, Any}(:x => "Carnival Lady (1933)"), "1933"), 
	IOExample(Dict{Symbol, Any}(:x => "Beginning at the End (1915)"), "1915"), 
	IOExample(Dict{Symbol, Any}(:x => "Surf Chronicles (2011)"), "2011"), 
	IOExample(Dict{Symbol, Any}(:x => "Lahu Ke Do Rang (1979)"), "1979"), 
	IOExample(Dict{Symbol, Any}(:x => "Homes (1973)"), "1973")])
problem_b187 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "BRO (brother)"), "brother"), 
	IOExample(Dict{Symbol, Any}(:x => "MUNCEL (daughter)"), "daughter"), 
	IOExample(Dict{Symbol, Any}(:x => "MERRIDY (son)"), "son"), 
	IOExample(Dict{Symbol, Any}(:x => "CORONA (son)"), "son"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSTANTIA (son)"), "son"), 
	IOExample(Dict{Symbol, Any}(:x => "AGATHANGELOS (daughter)"), "daughter"), 
	IOExample(Dict{Symbol, Any}(:x => "OMA (daughter)"), "daughter"), 
	IOExample(Dict{Symbol, Any}(:x => "TULLIO (daughter)"), "daughter"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSUELA (son)"), "son"), 
	IOExample(Dict{Symbol, Any}(:x => "BORNA (daughter)"), "daughter")])
problem_b188 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2008 Mazda MAZDA3"), "2008"), 
	IOExample(Dict{Symbol, Any}(:x => "2004 Citroen Evasion"), "2004"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Peugeot Partner"), "2005"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Ford Puma"), "2005"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Infiniti G35"), "2008"), 
	IOExample(Dict{Symbol, Any}(:x => "2007 Ford Capri"), "2007"), 
	IOExample(Dict{Symbol, Any}(:x => "2010 Renault Megane"), "2010"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Subaru Justy"), "2005"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Volkswagen Cabriolet"), "2008")])
problem_b189 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2005 Ford Puma"), "Ford"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Peugeot Partner"), "Peugeot"), 
	IOExample(Dict{Symbol, Any}(:x => "2010 Renault Megane"), "Renault"), 
	IOExample(Dict{Symbol, Any}(:x => "2004 Citroen Evasion"), "Citroen"), 
	IOExample(Dict{Symbol, Any}(:x => "2007 Ford Capri"), "Ford"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Mazda MAZDA3"), "Mazda"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Subaru Justy"), "Subaru"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Infiniti G35"), "Infiniti"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Volkswagen Cabriolet"), "Volkswagen")])
problem_b18 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Inductive Logic Programming"), "Inductive Programming"), 
	IOExample(Dict{Symbol, Any}(:x => "British Machine Vision Conference"), "British Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "Principles Of Programming Languages"), "Principles Languages"), 
	IOExample(Dict{Symbol, Any}(:x => "Very Large Data Bases"), "Very Bases"), 
	IOExample(Dict{Symbol, Any}(:x => "European Conference Artificial Intelligence"), "European Intelligence"), 
	IOExample(Dict{Symbol, Any}(:x => "Computer Aided Verification"), "Computer Verification"), 
	IOExample(Dict{Symbol, Any}(:x => "Design Automation Conference"), "Design Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "Neural Information Processing Systems"), "Neural Systems"), 
	IOExample(Dict{Symbol, Any}(:x => "International Semantic Web Conference"), "International Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "Algorithmic Learning Theory"), "Algorithmic Theory")])
problem_b190 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "2005 Ford Puma"), "Puma"), 
	IOExample(Dict{Symbol, Any}(:x => "2010 Renault Megane"), "Megane"), 
	IOExample(Dict{Symbol, Any}(:x => "2004 Citroen Evasion"), "Evasion"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Subaru Justy"), "Justy"), 
	IOExample(Dict{Symbol, Any}(:x => "2005 Peugeot Partner"), "Partner"), 
	IOExample(Dict{Symbol, Any}(:x => "2007 Ford Capri"), "Capri"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Volkswagen Cabriolet"), "Cabriolet"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Infiniti G35"), "G35"), 
	IOExample(Dict{Symbol, Any}(:x => "2008 Mazda MAZDA3"), "MAZDA3")])
problem_b191 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ScamVenture.co.nz"), ".co.nz"), 
	IOExample(Dict{Symbol, Any}(:x => "InformationAffiliate.si"), ".si"), 
	IOExample(Dict{Symbol, Any}(:x => "UpgradePros.fr"), ".fr"), 
	IOExample(Dict{Symbol, Any}(:x => "BannerVan.co.uk"), ".co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "InternetFraternity.be"), ".be"), 
	IOExample(Dict{Symbol, Any}(:x => "HandbagDealer.co.nz"), ".co.nz"), 
	IOExample(Dict{Symbol, Any}(:x => "HybridDay.com"), ".com"), 
	IOExample(Dict{Symbol, Any}(:x => "BohemianToo.pl"), ".pl"), 
	IOExample(Dict{Symbol, Any}(:x => "PopPath.se"), ".se"), 
	IOExample(Dict{Symbol, Any}(:x => "MedicationProvider.at"), ".at")])
problem_b192 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1Z LT8716 01 90235 08 7"), "1ZLT87160190235087"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 92566P 42 09152 09 4"), "1Z92566P4209152094"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z R71911 A1 79947 07 8"), "1ZR71911A179947078"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 511O48 A1 96827 01 7"), "1Z511O48A196827017"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 9D65A9 41 77947 08 3"), "1Z9D65A94177947083"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 69DW1T 42 96959 06 6"), "1Z69DW1T4296959066"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 8X5779 15 95844 09 4"), "1Z8X57791595844094"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 152945 78 51391 09 3"), "1Z1529457851391093"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 76648Y 33 89112 02 2"), "1Z76648Y3389112022"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 5T616R A1 35796 08 3"), "1Z5T616RA135796083")])
problem_b193 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1Z 152945 78 51391 09 3"), "11529457851391093"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 511O48 A1 96827 01 7"), "1511O48196827017"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 92566P 42 09152 09 4"), "1925664209152094"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 76648Y 33 89112 02 2"), "1766483389112022"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 9D65A9 41 77947 08 3"), "196594177947083"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 8X5779 15 95844 09 4"), "1857791595844094"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 69DW1T 42 96959 06 6"), "16914296959066"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z LT8716 01 90235 08 7"), "187160190235087"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z R71911 A1 79947 07 8"), "171911179947078"), 
	IOExample(Dict{Symbol, Any}(:x => "1Z 5T616R A1 35796 08 3"), "15616135796083")])
problem_b194 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Hertford College @HertfordCollege 17h17 hours ago"), "HertfordCollege"), 
	IOExample(Dict{Symbol, Any}(:x => "Toby Walsh @TobyWalsh Mar 7"), "TobyWalsh"), 
	IOExample(Dict{Symbol, Any}(:x => "Guy Broeck @guyvdb 14h14 hours ago"), "guyvdb"), 
	IOExample(Dict{Symbol, Any}(:x => "Karthik Balakrishnan @karthikb351 Mar 2"), "karthikb351"), 
	IOExample(Dict{Symbol, Any}(:x => "Denny Britz @dennybritz Mar 7"), "dennybritz"), 
	IOExample(Dict{Symbol, Any}(:x => "Oxford UCU @OxfordUCU Mar 6"), "OxfordUCU"), 
	IOExample(Dict{Symbol, Any}(:x => "Jakob Foerster @j_foerst 16h16 hours ago"), "j_foerst"), 
	IOExample(Dict{Symbol, Any}(:x => "Ari Morcos @arimorcos 17h17 hours ago"), "arimorcos"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Henry @g7vdj 20h20 hours ago"), "g7vdj"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Harris @SamHarrisOrg 16h16 hours ago"), "SamHarrisOrg")])
problem_b195 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "45.018974(latitude), -93.093773(longitude)"), "45.018974 -93.093773"), 
	IOExample(Dict{Symbol, Any}(:x => "40.746647(latitude), -73.454643(longitude)"), "40.746647 -73.454643"), 
	IOExample(Dict{Symbol, Any}(:x => "40.369873(latitude), -74.757622(longitude)"), "40.369873 -74.757622"), 
	IOExample(Dict{Symbol, Any}(:x => "41.966038(latitude), -87.646660(longitude)"), "41.966038 -87.646660"), 
	IOExample(Dict{Symbol, Any}(:x => "36.166019(latitude), -115.065933(longitude)"), "36.166019 -115.065933"), 
	IOExample(Dict{Symbol, Any}(:x => "39.486244(latitude), -87.452957(longitude)"), "39.486244 -87.452957"), 
	IOExample(Dict{Symbol, Any}(:x => "37.780544(latitude), -122.413055(longitude)"), "37.780544 -122.413055"), 
	IOExample(Dict{Symbol, Any}(:x => "38.410809(latitude), -82.378563(longitude)"), "38.410809 -82.378563"), 
	IOExample(Dict{Symbol, Any}(:x => "29.858896(latitude), -95.475952(longitude)"), "29.858896 -95.475952"), 
	IOExample(Dict{Symbol, Any}(:x => "32.995209(latitude), -96.687759(longitude)"), "32.995209 -96.687759")])
problem_b196 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "32.995209(latitude), -96.687759(longitude)"), "32.995209"), 
	IOExample(Dict{Symbol, Any}(:x => "40.369873(latitude), -74.757622(longitude)"), "40.369873"), 
	IOExample(Dict{Symbol, Any}(:x => "29.858896(latitude), -95.475952(longitude)"), "29.858896"), 
	IOExample(Dict{Symbol, Any}(:x => "37.780544(latitude), -122.413055(longitude)"), "37.780544"), 
	IOExample(Dict{Symbol, Any}(:x => "41.966038(latitude), -87.646660(longitude)"), "41.966038"), 
	IOExample(Dict{Symbol, Any}(:x => "45.018974(latitude), -93.093773(longitude)"), "45.018974"), 
	IOExample(Dict{Symbol, Any}(:x => "38.410809(latitude), -82.378563(longitude)"), "38.410809"), 
	IOExample(Dict{Symbol, Any}(:x => "40.746647(latitude), -73.454643(longitude)"), "40.746647"), 
	IOExample(Dict{Symbol, Any}(:x => "36.166019(latitude), -115.065933(longitude)"), "36.166019"), 
	IOExample(Dict{Symbol, Any}(:x => "39.486244(latitude), -87.452957(longitude)"), "39.486244")])
problem_b197 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "37.780544(latitude), -122.413055(longitude)"), "-122.413055"), 
	IOExample(Dict{Symbol, Any}(:x => "29.858896(latitude), -95.475952(longitude)"), "-95.475952"), 
	IOExample(Dict{Symbol, Any}(:x => "45.018974(latitude), -93.093773(longitude)"), "-93.093773"), 
	IOExample(Dict{Symbol, Any}(:x => "40.746647(latitude), -73.454643(longitude)"), "-73.454643"), 
	IOExample(Dict{Symbol, Any}(:x => "36.166019(latitude), -115.065933(longitude)"), "-115.065933"), 
	IOExample(Dict{Symbol, Any}(:x => "41.966038(latitude), -87.646660(longitude)"), "-87.646660"), 
	IOExample(Dict{Symbol, Any}(:x => "38.410809(latitude), -82.378563(longitude)"), "-82.378563"), 
	IOExample(Dict{Symbol, Any}(:x => "40.369873(latitude), -74.757622(longitude)"), "-74.757622"), 
	IOExample(Dict{Symbol, Any}(:x => "39.486244(latitude), -87.452957(longitude)"), "-87.452957"), 
	IOExample(Dict{Symbol, Any}(:x => "32.995209(latitude), -96.687759(longitude)"), "-96.687759")])
problem_b198 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: San Francisco, California(CA), 94143"), "City: San Francisco"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Las Vegas, Nevada(NV), 89109"), "City: Las Vegas"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: North St Paul, Minnesota(MN), 55109"), "City: North St Paul"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Conger, Minnesota(MN), 56020"), "City: Conger"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Houston, Texas(TX), 77587"), "City: Houston"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Chicago, Illinois(IL), 60606"), "City: Chicago"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Huntington, West Virginia(WV), 25701"), "City: Huntington"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Princeton, New Jersey(NJ), 08540"), "City: Princeton"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Bethpage, New York(NY), 11714"), "City: Bethpage"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Terre Haute, Indiana(IN), 47807"), "City: Terre Haute")])
problem_b199 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Chicago, Illinois(IL), 60606"), "State: Illinois"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Conger, Minnesota(MN), 56020"), "State: Minnesota"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Las Vegas, Nevada(NV), 89109"), "State: Nevada"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Huntington, West Virginia(WV), 25701"), "State: West Virginia"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Houston, Texas(TX), 77587"), "State: Texas"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Bethpage, New York(NY), 11714"), "State: New York"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: North St Paul, Minnesota(MN), 55109"), "State: Minnesota"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Terre Haute, Indiana(IN), 47807"), "State: Indiana"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: San Francisco, California(CA), 94143"), "State: California"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Princeton, New Jersey(NJ), 08540"), "State: New Jersey")])
problem_b19 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Computer Aided Verification"), "Aided Verification"), 
	IOExample(Dict{Symbol, Any}(:x => "Neural Information Processing Systems"), "Information Processing Systems"), 
	IOExample(Dict{Symbol, Any}(:x => "European Conference Artificial Intelligence"), "Conference Artificial Intelligence"), 
	IOExample(Dict{Symbol, Any}(:x => "British Machine Vision Conference"), "Machine Vision Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "Algorithmic Learning Theory"), "Learning Theory"), 
	IOExample(Dict{Symbol, Any}(:x => "Inductive Logic Programming"), "Logic Programming"), 
	IOExample(Dict{Symbol, Any}(:x => "Very Large Data Bases"), "Large Data Bases"), 
	IOExample(Dict{Symbol, Any}(:x => "Principles Of Programming Languages"), "Of Programming Languages"), 
	IOExample(Dict{Symbol, Any}(:x => "Design Automation Conference"), "Automation Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "International Semantic Web Conference"), "Semantic Web Conference")])
problem_b1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "@gill"), "gill"), 
	IOExample(Dict{Symbol, Any}(:x => "@harry"), "harry"), 
	IOExample(Dict{Symbol, Any}(:x => "@dave"), "dave"), 
	IOExample(Dict{Symbol, Any}(:x => "@fred"), "fred"), 
	IOExample(Dict{Symbol, Any}(:x => "@alice"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "@bob"), "bob"), 
	IOExample(Dict{Symbol, Any}(:x => "@ingrid"), "ingrid"), 
	IOExample(Dict{Symbol, Any}(:x => "@edith"), "edith"), 
	IOExample(Dict{Symbol, Any}(:x => "@carol"), "carol"), 
	IOExample(Dict{Symbol, Any}(:x => "@jeanne"), "jeanne")])
problem_b200 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Huntington, West Virginia(WV), 25701"), "Zip: 25701"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Terre Haute, Indiana(IN), 47807"), "Zip: 47807"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: North St Paul, Minnesota(MN), 55109"), "Zip: 55109"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Houston, Texas(TX), 77587"), "Zip: 77587"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Las Vegas, Nevada(NV), 89109"), "Zip: 89109"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Chicago, Illinois(IL), 60606"), "Zip: 60606"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Princeton, New Jersey(NJ), 08540"), "Zip: 08540"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Conger, Minnesota(MN), 56020"), "Zip: 56020"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Bethpage, New York(NY), 11714"), "Zip: 11714"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: San Francisco, California(CA), 94143"), "Zip: 94143")])
problem_b201 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Chicago, Illinois(IL), 60606"), "Chicago, Illinois, 60606"), 
	IOExample(Dict{Symbol, Any}(:x => "San Francisco, California(CA), 94143"), "San Francisco, California, 94143"), 
	IOExample(Dict{Symbol, Any}(:x => "Las Vegas, Nevada(NV), 89109"), "Las Vegas, Nevada, 89109"), 
	IOExample(Dict{Symbol, Any}(:x => "Terre Haute, Indiana(IN), 47807"), "Terre Haute, Indiana, 47807"), 
	IOExample(Dict{Symbol, Any}(:x => "Huntington, West Virginia(WV), 25701"), "Huntington, West Virginia, 25701"), 
	IOExample(Dict{Symbol, Any}(:x => "Conger, Minnesota(MN), 56020"), "Conger, Minnesota, 56020"), 
	IOExample(Dict{Symbol, Any}(:x => "Bethpage, New York(NY), 11714"), "Bethpage, New York, 11714"), 
	IOExample(Dict{Symbol, Any}(:x => "Houston, Texas(TX), 77587"), "Houston, Texas, 77587"), 
	IOExample(Dict{Symbol, Any}(:x => "Princeton, New Jersey(NJ), 08540"), "Princeton, New Jersey, 08540"), 
	IOExample(Dict{Symbol, Any}(:x => "North St Paul, Minnesota(MN), 55109"), "North St Paul, Minnesota, 55109")])
problem_b202 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Proj\\'''''''''',,,,,,''''''''"), "Proj"), 
	IOExample(Dict{Symbol, Any}(:x => "/var/db/auth.db"), "/var/db/auth.db"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/bin/ncdu.exe"), "/usr/local/bin/ncdu.exe"), 
	IOExample(Dict{Symbol, Any}(:x => "Company\\''''',,,,,''''''''''"), "Company"), 
	IOExample(Dict{Symbol, Any}(:x => "/Users/jim/Downloads/pdf.pdf"), "/Users/jim/Downloads/pdf.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "Company\\''''',,,,,,,,,,]"), "Company"), 
	IOExample(Dict{Symbol, Any}(:x => "Work\\'''''''''''''',,,,,,,,]"), "Work"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/texlive/2017/doc.html"), "/usr/local/texlive/2017/doc.html"), 
	IOExample(Dict{Symbol, Any}(:x => "Work\\'''''''',,,,,''''''''''''"), "Work"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/Homebrew/CONTRIBUTING.md"), "/usr/local/Homebrew/CONTRIBUTING.md")])
problem_b203 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "7 Physical Review B 48,888 612,377"), "612,377"), 
	IOExample(Dict{Symbol, Any}(:x => "9 New England Journal of Medicine 3,564 568,698"), "568,698"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Applied Physics Letters 36,759 549,224"), "549,224"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Journal of Biological Chemistry 54,695 1,652,432"), "1,652,432"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Nature 10,549 1,242,392"), "1,242,392"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Science 9,369 1,125,022"), "1,125,022"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Proc. Natl. Acad. Sci. USA (PNAS) 30,396 1,376,541"), "1,376,541"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Physical Review Letters 31,112 884,911"), "884,911"), 
	IOExample(Dict{Symbol, Any}(:x => "6 J. American Chemical Society 29,272 881,457"), "881,457"), 
	IOExample(Dict{Symbol, Any}(:x => "8 Astrophysical Journal 26,418 581,299"), "581,299")])
problem_b205 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Stuart Pearce 20 Dec 1996 8 May 1997"), "S Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "Billy Davies 7 Feb 2013 24 Mar 2014"), "B Davies"), 
	IOExample(Dict{Symbol, Any}(:x => "David Platt 1 Jul 1999 12 Jul 2001"), "D Platt"), 
	IOExample(Dict{Symbol, Any}(:x => "Frank Clark 13 May 1993 19 Dec 1996"), "F Clark"), 
	IOExample(Dict{Symbol, Any}(:x => "Micky Adams 5 Jan 1999 11 Jan 1999"), "M Adams"), 
	IOExample(Dict{Symbol, Any}(:x => "Dave Bassett 8 May 1997 5 Jan 1999"), "D Bassett"), 
	IOExample(Dict{Symbol, Any}(:x => "Ron Atkinson 11 Jan 1999 16 May 1999"), "R Atkinson"), 
	IOExample(Dict{Symbol, Any}(:x => "Brian Clough 3 Jan 1975 8 May 1993"), "B Clough"), 
	IOExample(Dict{Symbol, Any}(:x => "Philippe Montanier 27 June 2016 14 Jan 2017"), "P Montanier"), 
	IOExample(Dict{Symbol, Any}(:x => "Paul Hart 12 Jul 2001 7 Feb 2004"), "P Hart")])
problem_b206 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Ron Atkinson 11 Jan 1999 16 May 1999"), "Atkinson"), 
	IOExample(Dict{Symbol, Any}(:x => "Brian Clough 3 Jan 1975 8 May 1993"), "Clough"), 
	IOExample(Dict{Symbol, Any}(:x => "Paul Hart 12 Jul 2001 7 Feb 2004"), "Hart"), 
	IOExample(Dict{Symbol, Any}(:x => "Micky Adams 5 Jan 1999 11 Jan 1999"), "Adams"), 
	IOExample(Dict{Symbol, Any}(:x => "Stuart Pearce 20 Dec 1996 8 May 1997"), "Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "Frank Clark 13 May 1993 19 Dec 1996"), "Clark"), 
	IOExample(Dict{Symbol, Any}(:x => "Billy Davies 7 Feb 2013 24 Mar 2014"), "Davies"), 
	IOExample(Dict{Symbol, Any}(:x => "Philippe Montanier 27 June 2016 14 Jan 2017"), "Montanier"), 
	IOExample(Dict{Symbol, Any}(:x => "David Platt 1 Jul 1999 12 Jul 2001"), "Platt"), 
	IOExample(Dict{Symbol, Any}(:x => "Dave Bassett 8 May 1997 5 Jan 1999"), "Bassett")])
problem_b207 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Philippe Montanier 27 June 2016 14 Jan 2017"), "Philippe Montanier 2016 2017"), 
	IOExample(Dict{Symbol, Any}(:x => "Dave Bassett 8 May 1997 5 Jan 1999"), "Dave Bassett 1997 1999"), 
	IOExample(Dict{Symbol, Any}(:x => "David Platt 1 Jul 1999 12 Jul 2001"), "David Platt 1999 2001"), 
	IOExample(Dict{Symbol, Any}(:x => "Brian Clough 3 Jan 1975 8 May 1993"), "Brian Clough 1975 1994"), 
	IOExample(Dict{Symbol, Any}(:x => "Billy Davies 7 Feb 2013 24 Mar 2014"), "Billy Davies 2013 2014"), 
	IOExample(Dict{Symbol, Any}(:x => "Ron Atkinson 11 Jan 1999 16 May 1999"), "Ron Atkinson 1999 1999"), 
	IOExample(Dict{Symbol, Any}(:x => "Micky Adams 5 Jan 1999 11 Jan 1999"), "Micky Adams 1999 1999"), 
	IOExample(Dict{Symbol, Any}(:x => "Frank Clark 13 May 1993 19 Dec 1996"), "Frank Clark 1993 1996"), 
	IOExample(Dict{Symbol, Any}(:x => "Stuart Pearce 20 Dec 1996 8 May 1997"), "Stuart Pearce 1996 1997"), 
	IOExample(Dict{Symbol, Any}(:x => "Paul Hart 12 Jul 2001 7 Feb 2004"), "Paul Hart 2001 2004")])
problem_b208 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "jim.james@fas.harvard.edu"), "jim.james@FAS.HARVARD.EDU"), 
	IOExample(Dict{Symbol, Any}(:x => "thom.yorke@radiohead.com"), "thom.yorke@RADIOHEAD.COM"), 
	IOExample(Dict{Symbol, Any}(:x => "matthew.rosman@yahoo.com"), "matthew.rosman@YAHOO.COM"), 
	IOExample(Dict{Symbol, Any}(:x => "brent.harold@hotmail.com"), "brent.harold@HOTMAIL.COM"), 
	IOExample(Dict{Symbol, Any}(:x => "alice.cooper@rock.com"), "alice.cooper@ROCK.COM"), 
	IOExample(Dict{Symbol, Any}(:x => "ruby.clinton@mit.edu"), "ruby.clinton@MIT.EDU"), 
	IOExample(Dict{Symbol, Any}(:x => "bob.smith@gmail.com"), "bob.smith@GMAIL.COM"), 
	IOExample(Dict{Symbol, Any}(:x => "lisa.simpson@yahoo.com"), "lisa.simpson@YAHOO.COM"), 
	IOExample(Dict{Symbol, Any}(:x => "jim.smith@gmail.com"), "jim.smith@GMAIL.COM"), 
	IOExample(Dict{Symbol, Any}(:x => "alan.turing@cam.ac.uk"), "alan.turing@CAM.AC.UK")])
problem_b209 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "11 England MF Ben Osborn"), "B Osborn"), 
	IOExample(Dict{Symbol, Any}(:x => "7 Scotland MF Liam Bridcutt"), "L Bridcutt"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Scotland MF Barrie McKay"), "B McKay"), 
	IOExample(Dict{Symbol, Any}(:x => "13 Scotland DF Danny Fox"), "F Fox"), 
	IOExample(Dict{Symbol, Any}(:x => "14 England MF Matty Cash"), "M Cash"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Algeria MF Adlene Guedioura"), "A Guedioura"), 
	IOExample(Dict{Symbol, Any}(:x => "8 England MF Chris Cohen"), "C Cohen"), 
	IOExample(Dict{Symbol, Any}(:x => "17 England FW Ben Brereton"), "B Brereton"), 
	IOExample(Dict{Symbol, Any}(:x => "4 England DF Michael Mancienne"), "M Mancienne"), 
	IOExample(Dict{Symbol, Any}(:x => "19 Wales FW Sam Jones"), "S Jones")])
problem_b20 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "european conference artificial intelligence"), "Intelligence"), 
	IOExample(Dict{Symbol, Any}(:x => "computer aided verification"), "Verification"), 
	IOExample(Dict{Symbol, Any}(:x => "british machine vision conference"), "Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "very large data bases"), "Bases"), 
	IOExample(Dict{Symbol, Any}(:x => "algorithmic learning theory"), "Theory"), 
	IOExample(Dict{Symbol, Any}(:x => "design automation conference"), "Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "neural information processing systems"), "Systems"), 
	IOExample(Dict{Symbol, Any}(:x => "principles of programming languages"), "Languages"), 
	IOExample(Dict{Symbol, Any}(:x => "inductive logic programming"), "Programming"), 
	IOExample(Dict{Symbol, Any}(:x => "international semantic web conference"), "Conference")])
problem_b211 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Huntington, West Virginia(WV), 25701"), "Huntington, West Virginia, 25701"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Bethpage, New York(NY), 11714"), "Bethpage, New York, 11714"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Chicago, Illinois(IL), 60606"), "Chicago, Illinois, 60606"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Terre Haute, Indiana(IN), 47807"), "Terre Haute, Indiana, 47807"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Conger, Minnesota(MN), 56020"), "Conger, Minnesota, 56020"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Houston, Texas(TX), 77587"), "Houston, Texas, 77587"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: San Francisco, California(CA), 94143"), "San Francisco, California, 94143"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: North St Paul, Minnesota(MN), 55109"), "North St Paul, Minnesota, 55109"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Princeton, New Jersey(NJ), 08540"), "Princeton, New Jersey, 08540"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Las Vegas, Nevada(NV), 89109"), "Las Vegas, Nevada, 89109")])
problem_b212 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Princeton, New Jersey(NJ), 08540"), "New Jersey"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Huntington, West Virginia(WV), 25701"), "West Virginia"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Bethpage, New York(NY), 11714"), "New York"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Conger, Minnesota(MN), 56020"), "Minnesota"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: North St Paul, Minnesota(MN), 55109"), "Minnesota"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Las Vegas, Nevada(NV), 89109"), "Nevada"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Terre Haute, Indiana(IN), 47807"), "Indiana"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: San Francisco, California(CA), 94143"), "California"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Chicago, Illinois(IL), 60606"), "Illinois"), 
	IOExample(Dict{Symbol, Any}(:x => "City, State, Zip: Houston, Texas(TX), 77587"), "Texas")])
problem_b213 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "CONSUELA (son)"), "Consuela (son)"), 
	IOExample(Dict{Symbol, Any}(:x => "MERRIDY (son)"), "Merridy (son)"), 
	IOExample(Dict{Symbol, Any}(:x => "MUNCEL (daughter)"), "Muncel (daughter)"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSTANTIA (son)"), "Constantia (son)"), 
	IOExample(Dict{Symbol, Any}(:x => "AGATHANGELOS (daughter)"), "Agathangelos (daughter)"), 
	IOExample(Dict{Symbol, Any}(:x => "CORONA (son)"), "Corona (son)"), 
	IOExample(Dict{Symbol, Any}(:x => "BORNA (daughter)"), "Borna (daughter)"), 
	IOExample(Dict{Symbol, Any}(:x => "JOE (brother)"), "Joe (brother)"), 
	IOExample(Dict{Symbol, Any}(:x => "TULLIO (daughter)"), "Tullio (daughter)"), 
	IOExample(Dict{Symbol, Any}(:x => "OMA (daughter)"), "Oma (daughter)")])
problem_b214 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "TULLIO (daughter)"), "Tullio (DAUGHTER)"), 
	IOExample(Dict{Symbol, Any}(:x => "MERRIDY (son)"), "Merridy (SON)"), 
	IOExample(Dict{Symbol, Any}(:x => "OMA (daughter)"), "Oma (DAUGHTER)"), 
	IOExample(Dict{Symbol, Any}(:x => "BORNA (daughter)"), "Borna (DAUGHTER)"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSUELA (son)"), "Consuela (SON)"), 
	IOExample(Dict{Symbol, Any}(:x => "JOE (brother)"), "Joe (BROTHER)"), 
	IOExample(Dict{Symbol, Any}(:x => "MUNCEL (daughter)"), "Muncel (DAUGHTER)"), 
	IOExample(Dict{Symbol, Any}(:x => "AGATHANGELOS (daughter)"), "Agathangelos (DAUGHTER)"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSTANTIA (son)"), "Constantia (SON)"), 
	IOExample(Dict{Symbol, Any}(:x => "CORONA (son)"), "Corona (SON)")])
problem_b215 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3 Greg LeMond (USA)"), "USA"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Alberto Contador (ESP)"), "ESP"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Chris Froome (GBR)"), "GBR"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Fausto Coppi (ITA)"), "ITA"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Philippe Thys (BEL)"), "BEL"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Jacques Anquetil (FRA)"), "FRA"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Bernard Hinault (FRA)"), "FRA"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Eddy Merckx (BEL)"), "BEL"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Louison Bobet (FRA)"), "FRA"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Miguel Indurain (ESP)"), "ESP")])
problem_b216 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3 Louison Bobet (FRA)"), "L Bobet"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Miguel Indurain (ESP)"), "M Indurain"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Greg LeMond (USA)"), "G LeMond"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Eddy Merckx (BEL)"), "E Merckx"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Fausto Coppi (ITA)"), "F Coppi"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Philippe Thys (BEL)"), "P Thys"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Jacques Anquetil (FRA)"), "J Anquetil"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Bernard Hinault (FRA)"), "B Hinault"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Chris Froome (GBR)"), "C Froome"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Alberto Contador (ESP)"), "A Contador")])
problem_b217 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5 Eddy Merckx (BEL)"), "E Merckx (BEL)"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Philippe Thys (BEL)"), "P Thys (BEL)"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Louison Bobet (FRA)"), "L Bobet (FRA)"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Bernard Hinault (FRA)"), "B Hinault (FRA)"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Greg LeMond (USA)"), "G LeMond (USA)"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Fausto Coppi (ITA)"), "F Coppi (ITA)"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Miguel Indurain (ESP)"), "M Indurain (ESP)"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Alberto Contador (ESP)"), "A Contador (ESP)"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Jacques Anquetil (FRA)"), "J Anquetil (FRA)"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Chris Froome (GBR)"), "C Froome (GBR)")])
problem_b218 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "my name is albert"), "Albert"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is alice"), "Alice"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is john"), "John"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is laura"), "Jeanne"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is josh"), "Josh"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is richard"), "Richard"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is bill"), "Bill"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is bob"), "Bob"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is jeanne"), "Jeanne"), 
	IOExample(Dict{Symbol, Any}(:x => "my name is charlie"), "Charlie")])
problem_b219 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "mary gelman"), "M Gelman"), 
	IOExample(Dict{Symbol, Any}(:x => "AliCe HEEr"), "A Heer"), 
	IOExample(Dict{Symbol, Any}(:x => "IaN RoDny"), "I Rodny"), 
	IOExample(Dict{Symbol, Any}(:x => "miKe dwIGHT"), "M Dwight"), 
	IOExample(Dict{Symbol, Any}(:x => "BoB BAD"), "B Bad"), 
	IOExample(Dict{Symbol, Any}(:x => "MELVIN Julian"), "M Julian"), 
	IOExample(Dict{Symbol, Any}(:x => "CHArlie PEAnuts"), "C Peanuts"), 
	IOExample(Dict{Symbol, Any}(:x => "StaNleY TRAVis"), "S Travis"), 
	IOExample(Dict{Symbol, Any}(:x => "DAVE daviD"), "D David"), 
	IOExample(Dict{Symbol, Any}(:x => "LAUrA Love"), "L Love")])
problem_b21 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Computer Aided Verification"), "Verification"), 
	IOExample(Dict{Symbol, Any}(:x => "Design Automation Conference"), "Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "Inductive Logic Programming"), "Programming"), 
	IOExample(Dict{Symbol, Any}(:x => "British Machine Vision Conference"), "Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "International Semantic Web Conference"), "Conference"), 
	IOExample(Dict{Symbol, Any}(:x => "Principles Of Programming Languages"), "Languages"), 
	IOExample(Dict{Symbol, Any}(:x => "Neural Information Processing Systems"), "Systems"), 
	IOExample(Dict{Symbol, Any}(:x => "European Conference Artificial Intelligence"), "Intelligence"), 
	IOExample(Dict{Symbol, Any}(:x => "Very Large Data Bases"), "Bases"), 
	IOExample(Dict{Symbol, Any}(:x => "Algorithmic Learning Theory"), "Theory")])
problem_b220 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Dr Montgomery Montgomery"), "Dr M Montgomery"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Spongebob Squarepants"), "Mr S Squarepants"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Harry Potter"), "Mr H Potter"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Minerva Mcgonagall"), "Professor M Mcgonagall"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Severus Snape"), "Professor S Snape"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Bernard Rieux"), "Dr B Rieux"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Daenerys Targaryen"), "Ms D Targaryen"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Ray Stantz"), "Dr R Stantz"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Patrick Starfish"), "Mr P Starfish"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Hermione Granger"), "Ms H Granger")])
problem_b221 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Tom Gordon\", \"PHI\", \"Relief Pitcher\""), "Tom Gordon PHI Relief Pitcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jeff Mathis\", \"ANA\", \"Catcher\""), "Jeff Mathis ANA Catcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Mark Buehrle\", \"CWS\", \"Starting Pitcher\""), "Mark Buehrle CWS Starting Pitcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex Rodriguez\", \"NYY\", \"Third Baseman\""), "Alex Rodriguez NYY Third Baseman"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Kenji Johjima\", \"SEA\", \"Catcher\""), "Kenji Johjima SEA Catcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Barry Bonds\", \"SF\", \"Outfielder\""), "Barry Bonds SF Outfielder"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Scott Podsednik\", \"CWS\", \"Outfielder\""), "Scott Podsednik CWS Outfielder"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Vladimir Guerrero\", \"ANA\", \"Outfielder\""), "Vladimir Guerrero ANA Outfielder"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Roberto Novoa\", \"CHC\", \"Relief Pitcher\""), "Roberto Novoa CHC Relief Pitcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Albert Pujols\", \"STL\", \"First Baseman\""), "Albert Pujols STL First Baseman")])
problem_b222 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<country>germany</country>"), "Germany"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>sweden</country>"), "Sweden"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>norway</country>"), "Norway"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>iceland</country>"), "Iceland"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>denmark</country>"), "Denmark"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>finland</country>"), "Finland"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>italy</country>"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>scotland</country>"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>france</country>"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>spain</country>"), "Spain")])
problem_b223 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "IMG134141.jpg"), "img134141.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG1898.JPG"), "img1898.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "DGC1298.JPEG"), "dgc1298.jpeg"), 
	IOExample(Dict{Symbol, Any}(:x => "probs.txt"), "probs.txt"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG0972.mov"), "img0972.mov"), 
	IOExample(Dict{Symbol, Any}(:x => "results.py"), "results.py"), 
	IOExample(Dict{Symbol, Any}(:x => "test.sh"), "test.sh"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG13414.PNG"), "img13414.png"), 
	IOExample(Dict{Symbol, Any}(:x => "stack.txt"), "stack.txt"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG1298.JPEG"), "img1298.jpeg")])
problem_b224 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "21 October,1943 (75 years old)"), "OCT"), 
	IOExample(Dict{Symbol, Any}(:x => "2 May,1941 (77 years old)"), "MAY"), 
	IOExample(Dict{Symbol, Any}(:x => "21 April,1965 (53 years old)"), "APR"), 
	IOExample(Dict{Symbol, Any}(:x => "22 July,1983 (35 years old)"), "JUL"), 
	IOExample(Dict{Symbol, Any}(:x => "25 September,1980 (38 years old)"), "SEP"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1947 (71 years old)"), "JUL"), 
	IOExample(Dict{Symbol, Any}(:x => "23 November,1954 (64 years old)"), "NOV"), 
	IOExample(Dict{Symbol, Any}(:x => "26 October,1998 (20 years old)"), "OCT"), 
	IOExample(Dict{Symbol, Any}(:x => "30 October,1955 (63 years old)"), "OCT"), 
	IOExample(Dict{Symbol, Any}(:x => "28 December,1958 (60 years old)"), "DEC")])
problem_b225 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 8am-5pm"), "8-5"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 9am-10pm"), "9-10"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 8am-7pm"), "8-7"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 9am-6pm"), "9-6"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 9am-5pm"), "9-5"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 10am-1pm"), "10-1"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 10am-11pm"), "10-11"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 10am-10pm"), "10-10")])
problem_b226 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''"), "Theory"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''"), "Framework"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''"), "Background"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''"), "Discussion"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''''"), "Implementation"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''''"), "Conclusions"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''"), "Metagol"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''"), "Introduction"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''''"), "Experiments"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''"), "Related work")])
problem_b227 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ba mathematics"), "Mathematics"), 
	IOExample(Dict{Symbol, Any}(:x => "ba anthropology"), "Anthropology"), 
	IOExample(Dict{Symbol, Any}(:x => "ba philosophy, politics and economics"), "Philosophy, Politics and Economics"), 
	IOExample(Dict{Symbol, Any}(:x => "ba modern history"), "Modern History"), 
	IOExample(Dict{Symbol, Any}(:x => "ba french"), "French"), 
	IOExample(Dict{Symbol, Any}(:x => "ba media studies"), "Media Studies"), 
	IOExample(Dict{Symbol, Any}(:x => "ba geography"), "Geography"), 
	IOExample(Dict{Symbol, Any}(:x => "ba english"), "English"), 
	IOExample(Dict{Symbol, Any}(:x => "ba history"), "History"), 
	IOExample(Dict{Symbol, Any}(:x => "ba computer science"), "Computer Science")])
problem_b228 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ba history"), "BA History"), 
	IOExample(Dict{Symbol, Any}(:x => "ba anthropology"), "Anthropology"), 
	IOExample(Dict{Symbol, Any}(:x => "ba philosophy, politics and economics"), "BA Philosophy, Politics and Economics"), 
	IOExample(Dict{Symbol, Any}(:x => "ba french"), "French"), 
	IOExample(Dict{Symbol, Any}(:x => "ba media studies"), "Media Studies"), 
	IOExample(Dict{Symbol, Any}(:x => "ba modern history"), "BA Modern History"), 
	IOExample(Dict{Symbol, Any}(:x => "ba mathematics"), "BA Mathematics"), 
	IOExample(Dict{Symbol, Any}(:x => "ba english"), "English"), 
	IOExample(Dict{Symbol, Any}(:x => "ba geography"), "BA Geography"), 
	IOExample(Dict{Symbol, Any}(:x => "ba computer science"), "BA Computer Science")])
problem_b229 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "8 Astrophysical Journal 26,418 581,299"), "8 Astrophysical Journal"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Journal of Biological Chemistry 54,695 1,652,432"), "1 Journal of Biological Chemistry"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Science 9,369 1,125,022"), "4 Science"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Applied Physics Letters 36,759 549,224"), "10 Applied Physics Letters"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Physical Review Letters 31,112 884,911"), "5 Physical Review Letters"), 
	IOExample(Dict{Symbol, Any}(:x => "6 J. American Chemical Society 29,272 881,457"), "6 J. American Chemical Society"), 
	IOExample(Dict{Symbol, Any}(:x => "9 New England Journal of Medicine 3,564 568,698"), "9 New England Journal of Medicine"), 
	IOExample(Dict{Symbol, Any}(:x => "7 Physical Review B 48,888 612,377"), "7 Physical Review B"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Nature 10,549 1,242,392"), "3 Nature"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Proc. Natl. Acad. Sci. USA (PNAS) 30,396 1,376,541"), "2 Proc. Natl. Acad. Sci. USA (PNAS)")])
problem_b22 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "european conference artificial intelligence"), "ECAI"), 
	IOExample(Dict{Symbol, Any}(:x => "principles of programming languages"), "POPL"), 
	IOExample(Dict{Symbol, Any}(:x => "very large data bases"), "VLDB"), 
	IOExample(Dict{Symbol, Any}(:x => "international semantic web conference"), "ISWC"), 
	IOExample(Dict{Symbol, Any}(:x => "british machine vision conference"), "BMVC"), 
	IOExample(Dict{Symbol, Any}(:x => "computer aided verification"), "CAV"), 
	IOExample(Dict{Symbol, Any}(:x => "neural information processing systems"), "NIPS"), 
	IOExample(Dict{Symbol, Any}(:x => "design automation conference"), "DAC"), 
	IOExample(Dict{Symbol, Any}(:x => "inductive logic programming"), "ILP"), 
	IOExample(Dict{Symbol, Any}(:x => "algorithmic learning theory"), "ALT")])
problem_b230 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Claude Sammut: Concept Learning by Experiment. IJCAI 1981: 104-105"), "C Sammut"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Michie: Heuristic Search. Comput. J. 14(1): 96-102 (1971)"), "D Michie"), 
	IOExample(Dict{Symbol, Any}(:x => "Ivan Bratko: Machine learning in artificial intelligence. AI in Engineering 8(3): 159-164 (1993)"), "I Bratko"), 
	IOExample(Dict{Symbol, Any}(:x => "Luc De Raedt: Panel: Logic and Learnability. EWSL 1991: 344"), "L De Raedt"), 
	IOExample(Dict{Symbol, Any}(:x => "Stephen Muggleton: Inductive Logic Programming. ALT 1990: 42-62"), "S Muggleton"), 
	IOExample(Dict{Symbol, Any}(:x => "Andrew Cropper: Learning Efficient Logic Programs. IJCAI 2015: 4359-4360"), "A Cropper"), 
	IOExample(Dict{Symbol, Any}(:x => "Ute Schmid: KI und Informatik. KI 26(1): 1-4 (2012)"), "U Schmid"), 
	IOExample(Dict{Symbol, Any}(:x => "Hendrik Blockeel: Top-Down Induction of First Order Logical Decision Trees. AI Commun. 12(1-2): 119-120 (1999)"), "H Blockeel"), 
	IOExample(Dict{Symbol, Any}(:x => "Michael Bain: Experiments in Non-Monotonic Learning. ML 1991: 380-384"), "M Bain"), 
	IOExample(Dict{Symbol, Any}(:x => "Katsumi Inoue: Extended Logic Programs with Default Assumptions. ICLP 1991: 490-504"), "K Inoue")])
problem_b231 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "43 england mark warburton"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "39 scotland dougie freedman"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "71 england nigel clough"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "45 spain aitor karanka"), "Spain"), 
	IOExample(Dict{Symbol, Any}(:x => "42 england gary brazil"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "38 england stuart pearce"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "35 england rob kelly"), "England"), 
	IOExample(Dict{Symbol, Any}(:x => "34 scotland alex mcleish"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "41 france philippe montanier"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "36 scotland billy davies"), "Scotland")])
problem_b232 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "beijing, china: 27.7 million people"), "Beijing, China"), 
	IOExample(Dict{Symbol, Any}(:x => "london, uk: 8.136 million people"), "London, UK"), 
	IOExample(Dict{Symbol, Any}(:x => "shanghai, china: 30.8 million people"), "Shanghai, China"), 
	IOExample(Dict{Symbol, Any}(:x => "delhi, india: 36.1 million people"), "Delhi, India"), 
	IOExample(Dict{Symbol, Any}(:x => "dhaka, bangladesh: 27.4 million people"), "Dhaka, Bangladesh"), 
	IOExample(Dict{Symbol, Any}(:x => "karachi, pakistan: 24.8 million people"), "Karachi, Pakistan"), 
	IOExample(Dict{Symbol, Any}(:x => "new york, usa: 8.26 million people"), "New York, USA"), 
	IOExample(Dict{Symbol, Any}(:x => "tokyo, japan: 37.2 million people"), "Tokyo, Japan"), 
	IOExample(Dict{Symbol, Any}(:x => "cairo, egypt: 24.5 million people"), "Cairo, Egypt"), 
	IOExample(Dict{Symbol, Any}(:x => "mumbai, india: 27.8 million people"), "Mumbai, India")])
problem_b233 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5127 1743 3998 9394, 01/20, 588, Gilbertha Stamey, MasterCard"), "G Stamey"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4136 7761 5496, 05/20, 505, Devell Blaisdell, MasterCard"), "D Blaisdell"), 
	IOExample(Dict{Symbol, Any}(:x => "5121 6409 6639 2751, 11/20, 275, Wioleta Sheffer, MasterCard"), "W Sheffer"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1040 5693 1652, 07/21, 177, Holli Claxton, MasterCard"), "H Claxton"), 
	IOExample(Dict{Symbol, Any}(:x => "5520 7165 1105 8274, 04/22, 705, Emina Burkley, MasterCard"), "E Burkley"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7150 6827 2113, 06/21, 130, Sariel Reale, MasterCard"), "S Reale"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4823 6957 8278, 06/22, 231, Affonso Tousignant, MasterCard"), "A Tousignant"), 
	IOExample(Dict{Symbol, Any}(:x => "5323 5254 7005 2676, 07/23, 627, Simmona Elzey, MasterCard"), "G Elzey"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3677 2397 0897, 12/20, 710, Fulk Sharkey, MasterCard"), "F Sharkey"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7317 7561 0495, 12/23, 207, Deval O'Donnell, MasterCard"), "D O'Donnell")])
problem_b234 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5520 7165 1105 8274, 04/22, 705, Emina Burkley, MasterCard"), "5520 7165 1105 8274"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3677 2397 0897, 12/20, 710, Fulk Sharkey, MasterCard"), "5404 3677 2397 0897"), 
	IOExample(Dict{Symbol, Any}(:x => "5121 6409 6639 2751, 11/20, 275, Wioleta Sheffer, MasterCard"), "5121 6409 6639 2751"), 
	IOExample(Dict{Symbol, Any}(:x => "5127 1743 3998 9394, 01/20, 588, Gilbertha Stamey, MasterCard"), "5127 1743 3998 9394"), 
	IOExample(Dict{Symbol, Any}(:x => "5323 5254 7005 2676, 07/23, 627, Simmona Elzey, MasterCard"), "5323 5254 7005 2676"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1040 5693 1652, 07/21, 177, Holli Claxton, MasterCard"), "5405 1040 5693 1652"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7150 6827 2113, 06/21, 130, Sariel Reale, MasterCard"), "5315 7150 6827 2113"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7317 7561 0495, 12/23, 207, Deval O'Donnell, MasterCard"), "5315 7317 7561 0495"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4823 6957 8278, 06/22, 231, Affonso Tousignant, MasterCard"), "5137 4823 6957 8278"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4136 7761 5496, 05/20, 505, Devell Blaisdell, MasterCard"), "5218 4136 7761 5496")])
problem_b235 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5323 5254 7005 2676, 07/23, 627, Simmona Elzey, MasterCard"), "5323525470052676"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7317 7561 0495, 12/23, 207, Deval O'Donnell, MasterCard"), "5315731775610495"), 
	IOExample(Dict{Symbol, Any}(:x => "5315 7150 6827 2113, 06/21, 130, Sariel Reale, MasterCard"), "5315715068272113"), 
	IOExample(Dict{Symbol, Any}(:x => "5127 1743 3998 9394, 01/20, 588, Gilbertha Stamey, MasterCard"), "5127174339989394"), 
	IOExample(Dict{Symbol, Any}(:x => "5121 6409 6639 2751, 11/20, 275, Wioleta Sheffer, MasterCard"), "5121640966392751"), 
	IOExample(Dict{Symbol, Any}(:x => "5218 4136 7761 5496, 05/20, 505, Devell Blaisdell, MasterCard"), "5218413677615496"), 
	IOExample(Dict{Symbol, Any}(:x => "5520 7165 1105 8274, 04/22, 705, Emina Burkley, MasterCard"), "5520716511058274"), 
	IOExample(Dict{Symbol, Any}(:x => "5405 1040 5693 1652, 07/21, 177, Holli Claxton, MasterCard"), "5405104056931652"), 
	IOExample(Dict{Symbol, Any}(:x => "5137 4823 6957 8278, 06/22, 231, Affonso Tousignant, MasterCard"), "5137482369578278"), 
	IOExample(Dict{Symbol, Any}(:x => "5404 3677 2397 0897, 12/20, 710, Fulk Sharkey, MasterCard"), "5404367723970897")])
problem_b236 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Slow-mo footage of our annual pancake race #pancakeday"), "#pancakeday"), 
	IOExample(Dict{Symbol, Any}(:x => "Sometimes you just can't find anywhere to park #oxfordproblems"), "#oxfordproblems"), 
	IOExample(Dict{Symbol, Any}(:x => "Twilight on a snowy OB quad #BestFromTheEast"), "#BestFromTheEast"), 
	IOExample(Dict{Symbol, Any}(:x => "Things have been getting a little spooky in the Hertford College library today... #Halloween"), "#Halloween"), 
	IOExample(Dict{Symbol, Any}(:x => "This trio of choux nuns found their way into our stunning chapel for Day 4 of #NationalBakingWeek"), "#NationalBakingWeek"), 
	IOExample(Dict{Symbol, Any}(:x => "Thanks to Joel Rabinowitz for the shot #snow #BeastFromTheEast"), "#BeastFromTheEast"), 
	IOExample(Dict{Symbol, Any}(:x => "It was a frosty morning atop the Sheldonian today #advent19"), "#advent19"), 
	IOExample(Dict{Symbol, Any}(:x => "Dydd Gwyl Dewi Hapus to all our Welsh alumni and friends #StDavidsDay"), "#StDavidsDay"), 
	IOExample(Dict{Symbol, Any}(:x => "Hertford looks pretty as a picture in the snow from up here #snow #BeastFromTheEast"), "#BeastFromTheEast"), 
	IOExample(Dict{Symbol, Any}(:x => "Twas the night before Christmas - #day24"), "#day24")])
problem_b237 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Dave Bassett 8 May 1997 5 Jan 1999"), "Dave Bassett"), 
	IOExample(Dict{Symbol, Any}(:x => "Philippe Montanier 27 June 2016 14 Jan 2017"), "Philippe Montanier"), 
	IOExample(Dict{Symbol, Any}(:x => "Stuart Pearce 20 Dec 1996 8 May 1997"), "Stuart Pearce"), 
	IOExample(Dict{Symbol, Any}(:x => "David Platt 1 Jul 1999 12 Jul 2001"), "David Platt"), 
	IOExample(Dict{Symbol, Any}(:x => "Brian Clough 3 Jan 1975 8 May 1993"), "Brian Clough"), 
	IOExample(Dict{Symbol, Any}(:x => "Billy Davies 7 Feb 2013 24 Mar 2014"), "Billy Davies"), 
	IOExample(Dict{Symbol, Any}(:x => "Frank Clark 13 May 1993 19 Dec 1996"), "Frank Clark"), 
	IOExample(Dict{Symbol, Any}(:x => "Micky Adams 5 Jan 1999 11 Jan 1999"), "Micky Adams"), 
	IOExample(Dict{Symbol, Any}(:x => "Paul Hart 12 Jul 2001 7 Feb 2004"), "Paul Hart"), 
	IOExample(Dict{Symbol, Any}(:x => "Ron Atkinson 11 Jan 1999 16 May 1999"), "Ron Atkinson")])
problem_b238 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "MERRIDY (son)"), "Merridy"), 
	IOExample(Dict{Symbol, Any}(:x => "MUNCEL (daughter)"), "Muncel"), 
	IOExample(Dict{Symbol, Any}(:x => "CORONA (son)"), "Corona"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSUELA (son)"), "Consuela"), 
	IOExample(Dict{Symbol, Any}(:x => "TULLIO (daughter)"), "Tullio"), 
	IOExample(Dict{Symbol, Any}(:x => "CONSTANTIA (son)"), "Constantia"), 
	IOExample(Dict{Symbol, Any}(:x => "OMA (daughter)"), "Oma"), 
	IOExample(Dict{Symbol, Any}(:x => "JIM (brother)"), "Jim"), 
	IOExample(Dict{Symbol, Any}(:x => "BORNA (daughter)"), "Borna"), 
	IOExample(Dict{Symbol, Any}(:x => "AGATHANGELOS (daughter)"), "Agathangelos")])
problem_b239 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "data-4.pl"), "data4.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-3.pl"), "data3.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-5.pl"), "data5.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-16.pl"), "data16.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-19.pl"), "data19.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-2.pl"), "data2.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-1.pl"), "data1.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-18.pl"), "data18.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-20.pl"), "data20.pl"), 
	IOExample(Dict{Symbol, Any}(:x => "data-17.pl"), "data17.pl")])
problem_b23 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1/21/2001"), "01"), 
	IOExample(Dict{Symbol, Any}(:x => "1/1/01"), "01"), 
	IOExample(Dict{Symbol, Any}(:x => "27-05-1970"), "70"), 
	IOExample(Dict{Symbol, Any}(:x => "21/1/2001"), "01"), 
	IOExample(Dict{Symbol, Any}(:x => "5/5/1987"), "87"), 
	IOExample(Dict{Symbol, Any}(:x => "1/1/2001"), "01"), 
	IOExample(Dict{Symbol, Any}(:x => "01-01-2000"), "00"), 
	IOExample(Dict{Symbol, Any}(:x => "2003-23-03"), "03"), 
	IOExample(Dict{Symbol, Any}(:x => "22.02.2002"), "02"), 
	IOExample(Dict{Symbol, Any}(:x => "26/6/2006"), "06")])
problem_b240 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5.1K 8 Mar 09:15 03-framework.tex"), "03-framework.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "6.9K 28 Apr 2015 fig1-old.tex"), "fig1-old.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "345K 27 Apr 2015 ourbib15.bib"), "ourbib15.bib"), 
	IOExample(Dict{Symbol, Any}(:x => "6.5K 8 Mar 16:55 05-e1.tex"), "05-e1.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "125K 9 Mar 11:54 metaprob.pdf"), "metaprob.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "13K 31 Aug 2015 ijcai15.sty"), "ijcai15.sty"), 
	IOExample(Dict{Symbol, Any}(:x => "7.4K 7 Mar 11:12 04-imp.tex"), "04-imp.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "6.6K 9 Mar 09:11 02-related.tex"), "02-related.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "4.9K 25 Apr 2015 fig-e4.tex"), "fig-e4.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "32K 9 Mar 11:54 metaprob.log"), "metaprob.log")])
problem_b241 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5.1K 8 Mar 09:15 03-framework.tex"), "5.1K"), 
	IOExample(Dict{Symbol, Any}(:x => "13K 31 Aug 2015 ijcai15.sty"), "13K"), 
	IOExample(Dict{Symbol, Any}(:x => "125K 9 Mar 11:54 metaprob.pdf"), "125K"), 
	IOExample(Dict{Symbol, Any}(:x => "6.9K 28 Apr 2015 fig1-old.tex"), "6.9K"), 
	IOExample(Dict{Symbol, Any}(:x => "32K 9 Mar 11:54 metaprob.log"), "32K"), 
	IOExample(Dict{Symbol, Any}(:x => "7.4K 7 Mar 11:12 04-imp.tex"), "7.4K"), 
	IOExample(Dict{Symbol, Any}(:x => "345K 27 Apr 2015 ourbib15.bib"), "345K"), 
	IOExample(Dict{Symbol, Any}(:x => "6.5K 8 Mar 16:55 05-e1.tex"), "6.5K"), 
	IOExample(Dict{Symbol, Any}(:x => "4.9K 25 Apr 2015 fig-e4.tex"), "4.9K"), 
	IOExample(Dict{Symbol, Any}(:x => "6.6K 9 Mar 09:11 02-related.tex"), "6.6K")])
problem_b242 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "345K 27 Apr 2015 ourbib15.bib"), "345K 27 Apr 2015 ourbib15.bib"), 
	IOExample(Dict{Symbol, Any}(:x => "125K 9 Mar 11:54 metaprob.pdf"), "125K 9 Mar 11:54 metaprob.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "5.1K 8 Mar 09:15 03-framework.tex"), "5.1K 8 Mar 09:15 03-framework.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "4.9K 25 Apr 2015 fig-e4.tex"), "4.9K 25 Apr 2015 fig-e4.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "6.6K 9 Mar 09:11 02-related.tex"), "6.6K 9 Mar 09:11 02-related.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "7.4K 7 Mar 11:12 04-imp.tex"), "7.4K 7 Mar 11:12 04-imp.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "32K 9 Mar 11:54 metaprob.log"), "32K 9 Mar 11:54 metaprob.log"), 
	IOExample(Dict{Symbol, Any}(:x => "13K 31 Aug 2015 ijcai15.sty"), "13K 31 Aug 2015 ijcai15.sty"), 
	IOExample(Dict{Symbol, Any}(:x => "6.9K 28 Apr 2015 fig1-old.tex"), "6.9K 28 Apr 2015 fig1-old.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "6.5K 8 Mar 16:55 05-e1.tex"), "6.5K 8 Mar 16:55 05-e1.tex")])
problem_b243 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "6.5K 8 Mar 16:55 05-e1.tex"), "8 Mar"), 
	IOExample(Dict{Symbol, Any}(:x => "32K 9 Mar 11:54 metaprob.log"), "9 Mar"), 
	IOExample(Dict{Symbol, Any}(:x => "13K 31 Aug 2015 ijcai15.sty"), "31 Aug"), 
	IOExample(Dict{Symbol, Any}(:x => "6.9K 28 Apr 2015 fig1-old.tex"), "28 Apr"), 
	IOExample(Dict{Symbol, Any}(:x => "7.4K 7 Mar 11:12 04-imp.tex"), "7 Mar"), 
	IOExample(Dict{Symbol, Any}(:x => "125K 9 Mar 11:54 metaprob.pdf"), "9 Ma"), 
	IOExample(Dict{Symbol, Any}(:x => "6.6K 9 Mar 09:11 02-related.tex"), "9 Mar"), 
	IOExample(Dict{Symbol, Any}(:x => "5.1K 8 Mar 09:15 03-framework.tex"), "8 Mar"), 
	IOExample(Dict{Symbol, Any}(:x => "345K 27 Apr 2015 ourbib15.bib"), "27 Apr"), 
	IOExample(Dict{Symbol, Any}(:x => "4.9K 25 Apr 2015 fig-e4.tex"), "25 Apr")])
problem_b244 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "345K 27 Apr 2015 ourbib15.bib"), "345K ourbib15.bib"), 
	IOExample(Dict{Symbol, Any}(:x => "6.9K 28 Apr 2015 fig1-old.tex"), "6.9K fig1-old.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "125K 9 Mar 11:54 metaprob.pdf"), "125K metaprob.pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "13K 31 Aug 2015 ijcai15.sty"), "13K ijcai15.sty"), 
	IOExample(Dict{Symbol, Any}(:x => "7.4K 7 Mar 11:12 04-imp.tex"), "7.4K 04-imp.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "32K 9 Mar 11:54 metaprob.log"), "32K metaprob.log"), 
	IOExample(Dict{Symbol, Any}(:x => "6.5K 8 Mar 16:55 05-e1.tex"), "6.5K 05-e1.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "4.9K 25 Apr 2015 fig-e4.tex"), "4.9K fig-e4.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "5.1K 8 Mar 09:15 03-framework.tex"), "5.1K 03-framework.tex"), 
	IOExample(Dict{Symbol, Any}(:x => "6.6K 9 Mar 09:11 02-related.tex"), "6.6K 02-related.tex")])
problem_b245 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "352B 10 Nov 10:58 theses"), "10 Nov 10:58"), 
	IOExample(Dict{Symbol, Any}(:x => "288B 10 Nov 10:59 writing"), "10 Nov 10:59"), 
	IOExample(Dict{Symbol, Any}(:x => "96B 10 Nov 10:58 ir"), "10 Nov 10:58"), 
	IOExample(Dict{Symbol, Any}(:x => "160B 10 Nov 10:58 maths"), "10 Nov 10:58"), 
	IOExample(Dict{Symbol, Any}(:x => "96B 10 Nov 10:58 machine-learning"), "10 Nov 10:58"), 
	IOExample(Dict{Symbol, Any}(:x => "96B 10 Nov 11:00 programming"), "10 Nov 11:00"), 
	IOExample(Dict{Symbol, Any}(:x => "256B 13 Nov 19:16 logic"), "13 Nov 19:16"), 
	IOExample(Dict{Symbol, Any}(:x => "192B 19 Dec 10:57 logic-programming"), "19 Dec 10:57"), 
	IOExample(Dict{Symbol, Any}(:x => "160B 28 Jan 13:18 ilp"), "28 Jan 13:18"), 
	IOExample(Dict{Symbol, Any}(:x => "160B 10 Nov 11:10 computer-science"), "10 Nov 11:10")])
problem_b246 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "y,o,r,k"), "york"), 
	IOExample(Dict{Symbol, Any}(:x => "t,o,k,y,o"), "tokyo"), 
	IOExample(Dict{Symbol, Any}(:x => "p,a,r,i,s"), "paris"), 
	IOExample(Dict{Symbol, Any}(:x => "c,a,m,b,r,i,d,g,e"), "cambridge"), 
	IOExample(Dict{Symbol, Any}(:x => "o,x,f,o,r,d"), "oxford"), 
	IOExample(Dict{Symbol, Any}(:x => "l,o,n,d,o,n"), "london"), 
	IOExample(Dict{Symbol, Any}(:x => "m,a,n,c,h,e,s,t,e,r"), "manchester"), 
	IOExample(Dict{Symbol, Any}(:x => "n,o,t,t,i,n,g,h,a,m"), "nottingham"), 
	IOExample(Dict{Symbol, Any}(:x => "b,o,s,t,o,n"), "boston"), 
	IOExample(Dict{Symbol, Any}(:x => "d,e,r,b,y"), "derby")])
problem_b247 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "b..o..s..t..o..n"), "boston"), 
	IOExample(Dict{Symbol, Any}(:x => "p..a..r..i..s"), "paris"), 
	IOExample(Dict{Symbol, Any}(:x => "o..x..f..o..r..d"), "oxford"), 
	IOExample(Dict{Symbol, Any}(:x => "t..o..k..y..o"), "tokyo"), 
	IOExample(Dict{Symbol, Any}(:x => "d..e..r..b..y"), "derby"), 
	IOExample(Dict{Symbol, Any}(:x => "n..o..t..t..i..n..g..h..a..m"), "nottingham"), 
	IOExample(Dict{Symbol, Any}(:x => "y..o..r..k"), "york"), 
	IOExample(Dict{Symbol, Any}(:x => "c..a..m..b..r..i..d..g..e"), "cambridge"), 
	IOExample(Dict{Symbol, Any}(:x => "l..o..n..d..o..n"), "london")])
problem_b248 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "l.o.n.d.o.n"), "london"), 
	IOExample(Dict{Symbol, Any}(:x => "p..a..r..i..s"), "paris"), 
	IOExample(Dict{Symbol, Any}(:x => "o....x....f....o....r....d"), "oxford"), 
	IOExample(Dict{Symbol, Any}(:x => "t..o..k..y..o"), "tokyo"), 
	IOExample(Dict{Symbol, Any}(:x => "b.....o.....s.....t.....o.....n"), "boston"), 
	IOExample(Dict{Symbol, Any}(:x => "c....a....m....b....r....i....d....g....e"), "cambridge"), 
	IOExample(Dict{Symbol, Any}(:x => "b......o......s......t......o......n"), "boston"), 
	IOExample(Dict{Symbol, Any}(:x => "d.....e.....r.....b.....y"), "derby"), 
	IOExample(Dict{Symbol, Any}(:x => "y......o......r......k"), "york"), 
	IOExample(Dict{Symbol, Any}(:x => "n...o...t...t...i...n...g...h...a...m"), "nottingham")])
problem_b249 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\$11.71"), "11.71"), 
	IOExample(Dict{Symbol, Any}(:x => "\$15.92(\$0.84 / 100 ml)"), "15.92"), 
	IOExample(Dict{Symbol, Any}(:x => "\$43.75(\$62.50 / l)"), "43.75"), 
	IOExample(Dict{Symbol, Any}(:x => "\$40.15(\$6.69 / 75 cl)"), "40.15"), 
	IOExample(Dict{Symbol, Any}(:x => "\$54.30"), "54.30"), 
	IOExample(Dict{Symbol, Any}(:x => "\$46.18(\$65.97 / l)"), "46.18"), 
	IOExample(Dict{Symbol, Any}(:x => "\$37.65(\$53.79 / l)"), "37.65"), 
	IOExample(Dict{Symbol, Any}(:x => "\$22.06(\$16.97 / kg)"), "22.06"), 
	IOExample(Dict{Symbol, Any}(:x => "\$215.84"), "215.84"), 
	IOExample(Dict{Symbol, Any}(:x => "\$29.99"), "29.99")])
problem_b24 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1252010"), "2010"), 
	IOExample(Dict{Symbol, Any}(:x => "11152011"), "2011"), 
	IOExample(Dict{Symbol, Any}(:x => "22021002"), "1002"), 
	IOExample(Dict{Symbol, Any}(:x => "26062006"), "2006"), 
	IOExample(Dict{Symbol, Any}(:x => "1112011"), "2011"), 
	IOExample(Dict{Symbol, Any}(:x => "22022002"), "2002"), 
	IOExample(Dict{Symbol, Any}(:x => "12012011"), "2011"), 
	IOExample(Dict{Symbol, Any}(:x => "27051970"), "1970"), 
	IOExample(Dict{Symbol, Any}(:x => "01012001"), "2001"), 
	IOExample(Dict{Symbol, Any}(:x => "6222005"), "2005")])
problem_b250 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "THOM.YORKE@RADIOHEAD.COM"), "Thom Yorke"), 
	IOExample(Dict{Symbol, Any}(:x => "MATTHEW.ROSMAN@YAHOO.COM"), "Matthew Rosman"), 
	IOExample(Dict{Symbol, Any}(:x => "BOB.SMITH@GMAIL.COM"), "Bob Smith"), 
	IOExample(Dict{Symbol, Any}(:x => "ALAN.TURING@CAM.AC.UK"), "Alan Turing"), 
	IOExample(Dict{Symbol, Any}(:x => "LISA.SIMPSON@YAHOO.COM"), "Lisa Simpson"), 
	IOExample(Dict{Symbol, Any}(:x => "RUBY.CLINTON@MIT.EDU"), "Ruby Clinton"), 
	IOExample(Dict{Symbol, Any}(:x => "BRENT.HAROLD@HOTMAIL.COM"), "Brent Harold"), 
	IOExample(Dict{Symbol, Any}(:x => "JIM.JAMES@FAS.HARVARD.EDU"), "Jim James"), 
	IOExample(Dict{Symbol, Any}(:x => "JIM.SMITH@GMAIL.COM"), "Jim Smith"), 
	IOExample(Dict{Symbol, Any}(:x => "ALICE.COOPER@ROCK.COM"), "Alice Cooper")])
problem_b251 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "BRENT.HAROLD@HOTMAIL.COM"), "hotmail.com"), 
	IOExample(Dict{Symbol, Any}(:x => "ALAN.TURING@CAM.AC.UK"), "cam.ac.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "THOM.YORKE@RADIOHEAD.COM"), "radiohead.com"), 
	IOExample(Dict{Symbol, Any}(:x => "BOB.SMITH@GMAIL.COM"), "gmail.com"), 
	IOExample(Dict{Symbol, Any}(:x => "JIM.JAMES@FAS.HARVARD.EDU"), "fas.harvard.edu"), 
	IOExample(Dict{Symbol, Any}(:x => "MATTHEW.ROSMAN@YAHOO.COM"), "yahoo.com"), 
	IOExample(Dict{Symbol, Any}(:x => "JIM.SMITH@GMAIL.COM"), "gmail.com"), 
	IOExample(Dict{Symbol, Any}(:x => "ALICE.COOPER@ROCK.COM"), "rock.com"), 
	IOExample(Dict{Symbol, Any}(:x => "RUBY.CLINTON@MIT.EDU"), "mit.edu"), 
	IOExample(Dict{Symbol, Any}(:x => "LISA.SIMPSON@YAHOO.COM"), "yahoo.com")])
problem_b252 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "brown4 #8b2323"), "#8b2323"), 
	IOExample(Dict{Symbol, Any}(:x => "SlateGray4 #6c7b8b"), "#6c7b8b"), 
	IOExample(Dict{Symbol, Any}(:x => "chocolate3 #cd661d"), "#cd661d"), 
	IOExample(Dict{Symbol, Any}(:x => "DodgerBlue4 #104e8b"), "#104e8b"), 
	IOExample(Dict{Symbol, Any}(:x => "PaleGreen2 #90ee90"), "#90ee90"), 
	IOExample(Dict{Symbol, Any}(:x => "DarkOliveGreen #556b2f"), "#556b2f"), 
	IOExample(Dict{Symbol, Any}(:x => "OrangeRed1 #ff4500"), "#ff4500"), 
	IOExample(Dict{Symbol, Any}(:x => "LightBlue1 #bfefff"), "#bfefff"), 
	IOExample(Dict{Symbol, Any}(:x => "AntiqueWhite2 #eedfcc"), "#eedfcc"), 
	IOExample(Dict{Symbol, Any}(:x => "DarkSlateGray3 #79cdcd"), "#79cdcd")])
problem_b253 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Macclesfield Town v Barrow, 15:00 GMT (BBC Radio Cumbria)"), "Macclesfield Town v Barrow"), 
	IOExample(Dict{Symbol, Any}(:x => "Maidstone United v Torquay United, 15:00 GMT (BBC Radio Devon)"), "Maidstone United v Torquay United"), 
	IOExample(Dict{Symbol, Any}(:x => "AFC Fylde v Aldershot Town, 15:00 GMT (BBC Surrey)"), "AFC Fylde v Aldershot Town"), 
	IOExample(Dict{Symbol, Any}(:x => "Chelsea v Crystal Palace, 17:30 GMT (BBC Radio London)"), "Chelsea v Crystal Palace"), 
	IOExample(Dict{Symbol, Any}(:x => "West Ham United v Burnley, 15:00 GMT (BBC Radio London)"), "West Ham United v Burnley"), 
	IOExample(Dict{Symbol, Any}(:x => "Gateshead v Maidenhead United, 15:00 GMT (BBC Radio Berkshire)"), "Gateshead v Maidenhead United"), 
	IOExample(Dict{Symbol, Any}(:x => "Woking v FC Halifax Town, 15:00 GMT (BBC Surrey)"), "Woking v FC Halifax Town"), 
	IOExample(Dict{Symbol, Any}(:x => "Newcastle v Southampton, 15:00 GMT, (BBC Radio 5 live)"), "Newcastle v Southampton"), 
	IOExample(Dict{Symbol, Any}(:x => "Hartlepool United v Boreham Wood, 15:00 GMT (BBC Tees)"), "Hartlepool United v Boreham Wood"), 
	IOExample(Dict{Symbol, Any}(:x => "Manchester United v Liverpool, 12:30 GMT (BBC Radio 5 live)"), "Manchester United v Liverpool")])
problem_b254 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "West Ham United v Burnley, 15:00 GMT (BBC Radio London)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Macclesfield Town v Barrow, 15:00 GMT (BBC Radio Cumbria)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Chelsea v Crystal Palace, 17:30 GMT (BBC Radio London)"), "17:30"), 
	IOExample(Dict{Symbol, Any}(:x => "AFC Fylde v Aldershot Town, 15:00 GMT (BBC Surrey)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Newcastle v Southampton, 15:00 GMT, (BBC Radio 5 live)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Hartlepool United v Boreham Wood, 15:00 GMT (BBC Tees)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Maidstone United v Torquay United, 15:00 GMT (BBC Radio Devon)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Gateshead v Maidenhead United, 15:00 GMT (BBC Radio Berkshire)"), "15:00"), 
	IOExample(Dict{Symbol, Any}(:x => "Woking v FC Halifax Town, 15:00 GMT (BBC Surrey)"), "15:00 GMT"), 
	IOExample(Dict{Symbol, Any}(:x => "Manchester United v Liverpool, 12:30 GMT (BBC Radio 5 live)"), "12:30")])
problem_b255 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Newcastle v Southampton, 15:00 GMT, (BBC Radio 5 live)"), "BBC Radio 5 live"), 
	IOExample(Dict{Symbol, Any}(:x => "Manchester United v Liverpool, 12:30 GMT (BBC Radio 5 live)"), "BBC Radio 5 live"), 
	IOExample(Dict{Symbol, Any}(:x => "Woking v FC Halifax Town, 15:00 GMT (BBC Surrey)"), "BBC Surrey"), 
	IOExample(Dict{Symbol, Any}(:x => "Chelsea v Crystal Palace, 17:30 GMT (BBC Radio London)"), "BBC Radio London"), 
	IOExample(Dict{Symbol, Any}(:x => "Macclesfield Town v Barrow, 15:00 GMT (BBC Radio Cumbria)"), "BBC Radio Cumbria"), 
	IOExample(Dict{Symbol, Any}(:x => "Gateshead v Maidenhead United, 15:00 GMT (BBC Radio Berkshire)"), "BBC Radio Berkshire"), 
	IOExample(Dict{Symbol, Any}(:x => "Hartlepool United v Boreham Wood, 15:00 GMT (BBC Tees)"), "BBC Tees"), 
	IOExample(Dict{Symbol, Any}(:x => "West Ham United v Burnley, 15:00 GMT (BBC Radio London)"), "BBC Radio London"), 
	IOExample(Dict{Symbol, Any}(:x => "Maidstone United v Torquay United, 15:00 GMT (BBC Radio Devon)"), "BBC Radio Devon"), 
	IOExample(Dict{Symbol, Any}(:x => "AFC Fylde v Aldershot Town, 15:00 GMT (BBC Surrey)"), "BBC Surrey")])
problem_b256 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Greece Olympic Stadium, Athens 3 1983, 1994, 2007"), "Olympic Stadium"), 
	IOExample(Dict{Symbol, Any}(:x => "Scotland Hampden Park, Glasgow 3 1960, 1976, 2002"), "Hampden Park"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy Stadio Olimpico, Rome 4 1977, 1984, 1996, 2009"), "Stadio Olimpico"), 
	IOExample(Dict{Symbol, Any}(:x => "Austria Ernst-Happel-Stadion, Vienna 4 1964, 1987, 1990, 1995"), "Ernst-Happel-Stadion"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy San Siro, Milan 4 1965, 1970, 2001, 2016"), "San Siro"), 
	IOExample(Dict{Symbol, Any}(:x => "Spain Santiago Bernabeu Stadium, Madrid 4 1957, 1969, 1980, 2010"), "Santiago Bernabeu"), 
	IOExample(Dict{Symbol, Any}(:x => "England Wembley Stadium, London 7 1963, 1968, 1971, 1978, 1992, 2011, 2013"), "Wembley Stadium"), 
	IOExample(Dict{Symbol, Any}(:x => "Belgium King Baudouin Stadium, Brussels 4 1958, 1966, 1974, 1985"), "King Baudouin Stadium"), 
	IOExample(Dict{Symbol, Any}(:x => "France Parc des Princes, Paris 3 1956, 1975, 1981"), "Parc des Princes"), 
	IOExample(Dict{Symbol, Any}(:x => "Germany Olympiastadion, Munich 3 1979, 1993, 1997"), "Olympiastadion")])
problem_b257 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Italy San Siro, Milan 4 1965, 1970, 2001, 2016"), "Milan"), 
	IOExample(Dict{Symbol, Any}(:x => "Spain Santiago Bernabeu Stadium, Madrid 4 1957, 1969, 1980, 2010"), "Madrid"), 
	IOExample(Dict{Symbol, Any}(:x => "France Parc des Princes, Paris 3 1956, 1975, 1981"), "Paris"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy Stadio Olimpico, Rome 4 1977, 1984, 1996, 2009"), "Rome"), 
	IOExample(Dict{Symbol, Any}(:x => "Austria Ernst-Happel-Stadion, Vienna 4 1964, 1987, 1990, 1995"), "Vienna"), 
	IOExample(Dict{Symbol, Any}(:x => "Belgium King Baudouin Stadium, Brussels 4 1958, 1966, 1974, 1985"), "Brussels"), 
	IOExample(Dict{Symbol, Any}(:x => "Germany Olympiastadion, Munich 3 1979, 1993, 1997"), "Munich"), 
	IOExample(Dict{Symbol, Any}(:x => "Scotland Hampden Park, Glasgow 3 1960, 1976, 2002"), "Glasgow"), 
	IOExample(Dict{Symbol, Any}(:x => "England Wembley Stadium, London 7 1963, 1968, 1971, 1978, 1992, 2011, 2013"), "London"), 
	IOExample(Dict{Symbol, Any}(:x => "Greece Olympic Stadium, Athens 3 1983, 1994, 2007"), "Athens")])
problem_b258 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Austria Ernst-Happel-Stadion, Vienna 4 1964, 1987, 1990, 1995"), "Ernst-Happel-Stadion, 4"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy Stadio Olimpico, Rome 4 1977, 1984, 1996, 2009"), "Stadio Olimpico, 4"), 
	IOExample(Dict{Symbol, Any}(:x => "France Parc des Princes, Paris 3 1956, 1975, 1981"), "Parc des Princes, 3"), 
	IOExample(Dict{Symbol, Any}(:x => "Spain Santiago Bernabeu Stadium, Madrid 4 1957, 1969, 1980, 2010"), "Santiago Bernabeu, 4"), 
	IOExample(Dict{Symbol, Any}(:x => "Belgium King Baudouin Stadium, Brussels 4 1958, 1966, 1974, 1985"), "King Baudouin Stadium, 4"), 
	IOExample(Dict{Symbol, Any}(:x => "Greece Olympic Stadium, Athens 3 1983, 1994, 2007"), "Olympic Stadium, 3"), 
	IOExample(Dict{Symbol, Any}(:x => "Scotland Hampden Park, Glasgow 3 1960, 1976, 2002"), "Hampden Park, 3"), 
	IOExample(Dict{Symbol, Any}(:x => "Germany Olympiastadion, Munich 3 1979, 1993, 1997"), "Olympiastadion, 3"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy San Siro, Milan 4 1965, 1970, 2001, 2016"), "San Siro, 4"), 
	IOExample(Dict{Symbol, Any}(:x => "England Wembley Stadium, London 7 1963, 1968, 1971, 1978, 1992, 2011, 2013"), "Wembley Stadium, 7")])
problem_b259 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Italy San Siro, Milan 4 1965, 1970, 2001, 2016"), "1965, 1970, 2001, 2016"), 
	IOExample(Dict{Symbol, Any}(:x => "France Parc des Princes, Paris 3 1956, 1975, 1981"), "1956, 1975, 1981"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy Stadio Olimpico, Rome 4 1977, 1984, 1996, 2009"), "1977, 1984, 1996, 2009"), 
	IOExample(Dict{Symbol, Any}(:x => "Belgium King Baudouin Stadium, Brussels 4 1958, 1966, 1974, 1985"), "1958, 1966, 1974, 1985"), 
	IOExample(Dict{Symbol, Any}(:x => "Spain Santiago Bernabeu Stadium, Madrid 4 1957, 1969, 1980, 2010"), "1957, 1969, 1980, 2010"), 
	IOExample(Dict{Symbol, Any}(:x => "Austria Ernst-Happel-Stadion, Vienna 4 1964, 1987, 1990, 1995"), "1964, 1987, 1990, 1995"), 
	IOExample(Dict{Symbol, Any}(:x => "England Wembley Stadium, London 7 1963, 1968, 1971, 1978, 1992, 2011, 2013"), "1963, 1968, 1971, 1978, 1992, 2011, 2013"), 
	IOExample(Dict{Symbol, Any}(:x => "Scotland Hampden Park, Glasgow 3 1960, 1976, 2002"), "1960, 1976, 2002"), 
	IOExample(Dict{Symbol, Any}(:x => "Greece Olympic Stadium, Athens 3 1983, 1994, 2007"), "1983, 1994, 2007"), 
	IOExample(Dict{Symbol, Any}(:x => "Germany Olympiastadion, Munich 3 1979, 1993, 1997"), "1979, 1993, 1997")])
problem_b25 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "alice5bob3"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "dave4edith5"), "4"), 
	IOExample(Dict{Symbol, Any}(:x => "edith5frank5"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "bob3charlie6"), "3"), 
	IOExample(Dict{Symbol, Any}(:x => "harry5inge4"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "frank5harry"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "inge4jeanne6"), "4"), 
	IOExample(Dict{Symbol, Any}(:x => "kat3laura5"), "3"), 
	IOExample(Dict{Symbol, Any}(:x => "charlie6dave4"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "jeanne6kat3"), "6")])
problem_b260 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Austria Ernst-Happel-Stadion, Vienna 4 1964, 1987, 1990, 1995"), "Austria Ernst-Happel-Stadion, Vienna"), 
	IOExample(Dict{Symbol, Any}(:x => "Spain Santiago Bernabeu Stadium, Madrid 4 1957, 1969, 1980, 2010"), "Santiago Bernabeu Stadium, Madrid"), 
	IOExample(Dict{Symbol, Any}(:x => "England Wembley Stadium, London 7 1963, 1968, 1971, 1978, 1992, 2011, 2013"), "Wembley Stadium, London"), 
	IOExample(Dict{Symbol, Any}(:x => "Scotland Hampden Park, Glasgow 3 1960, 1976, 2002"), "Hampden Park, Glasgow"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy Stadio Olimpico, Rome 4 1977, 1984, 1996, 2009"), "Stadio Olimpico, Rome"), 
	IOExample(Dict{Symbol, Any}(:x => "Greece Olympic Stadium, Athens 3 1983, 1994, 2007"), "Olympic Stadium, Athens"), 
	IOExample(Dict{Symbol, Any}(:x => "Belgium King Baudouin Stadium, Brussels 4 1958, 1966, 1974, 1985"), "King Baudouin Stadium, Brussels"), 
	IOExample(Dict{Symbol, Any}(:x => "Germany Olympiastadion, Munich 3 1979, 1993, 1997"), "Olympiastadion, Munich"), 
	IOExample(Dict{Symbol, Any}(:x => "France Parc des Princes, Paris 3 1956, 1975, 1981"), "Parc des Princes, Paris"), 
	IOExample(Dict{Symbol, Any}(:x => "Italy San Siro, Milan 4 1965, 1970, 2001, 2016"), "San Siro, Milan")])
problem_b262 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "4 Harold Macmillan 1957-1963 Conservative"), "Harold Macmillan Conservative"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Clement Attlee 1945-1951 Labour"), "Clement Attlee Labour"), 
	IOExample(Dict{Symbol, Any}(:x => "7 James Callaghan 1976-1979 Labour"), "James Callaghan Labour"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Tony Blair 1997-2007 Labour"), "Tony Blair Labour"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Margaret Thatcher 1979-1990 Conservative"), "Margaret Thatcher Conservative"), 
	IOExample(Dict{Symbol, Any}(:x => "6 Sir Winston Churchill (1940-1945), 1951-1955 Conservative"), "Sir Winston Churchill Conservative"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Gordon Brown 2007-2010 Labour"), "Gordon Brown Labour"), 
	IOExample(Dict{Symbol, Any}(:x => "8 John Major 1990-1997 Conservative"), "John Major Conservative"), 
	IOExample(Dict{Symbol, Any}(:x => "9 Edward Heath 1970-1974 Conservative"), "Edward Heath Conservative"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Harold Wilson 1964-1970, 1974-1976 Labour"), "Harold Wilson Labour")])
problem_b263 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5 Harold Wilson 1964-1970, 1974-1976 Labour"), "Harold Wilson"), 
	IOExample(Dict{Symbol, Any}(:x => "8 John Major 1990-1997 Conservative"), "John Major"), 
	IOExample(Dict{Symbol, Any}(:x => "9 Edward Heath 1970-1974 Conservative"), "Edward Heath"), 
	IOExample(Dict{Symbol, Any}(:x => "6 Sir Winston Churchill (1940-1945), 1951-1955 Conservative"), "Sir Winston Churchill"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Gordon Brown 2007-2010 Labour"), "Gordon Brown"), 
	IOExample(Dict{Symbol, Any}(:x => "2 Margaret Thatcher 1979-1990 Conservative"), "Margaret Thatcher"), 
	IOExample(Dict{Symbol, Any}(:x => "4 Harold Macmillan 1957-1963 Conservative"), "Harold Macmillan"), 
	IOExample(Dict{Symbol, Any}(:x => "7 James Callaghan 1976-1979 Labour"), "James Callaghan"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Tony Blair 1997-2007 Labour"), "Tony Blair"), 
	IOExample(Dict{Symbol, Any}(:x => "1 Clement Attlee 1945-1951 Labour"), "Clement Attlee")])
problem_b264 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "ILP 2011, UK"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "ILP 2014, France"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "ILP 2013, Brazil"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "ILP 2007, USA"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "ILP 2008, Czech Republic"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "ILP 2016, UK"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "ILP 2009, Belgium"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "ILP 2010, Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "ILP 2015, Japan"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "ILP 2012, Croatia")])
problem_b265 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "September 4-6, 2016"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "September 10-12, 2008"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "August 28-30, 2013"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "August 20-22, 2015"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "June 19-21, 2007"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "September 17-19, 2012"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "July 31 - August 3, 2011"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "June 27-30, 2010"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "July 02-04, 2009"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "September 14-16, 2014")])
problem_b266 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2009\">21. IJCAI 2009: Pasadena, California, USA</h2>"), "IJCAI 2009, USA"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2007\">20. IJCAI 2007: Hyderabad, India</h2>"), "IJCAI 2007, India"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2001\">17. IJCAI 2001: Seattle, USA</h2>"), "IJCAI 2001, USA"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2017\">26. IJCAI 2017: Melbourne, VIC, Australia</h2>"), "IJCAI 2017, Australia"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2005\">19. IJCAI 2005: Edinburgh, Scotland, UK</h2>"), "IJCAI 2005, UK"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2003\">18. IJCAI 2003: Acapulco, Mexico</h2>"), "IJCAI 2003, Mexico"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2016\">25. IJCAI 2016: New York, NY, USA</h2>"), "IJCAI 2016, USA"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2013\">23. IJCAI 2013: Beijing, China</h2>"), "IJCAI 2013, China"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2015\">24. IJCAI 2015: Buenos Aires, Argentina</h2>"), "IJCAI 2015, Argentina"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2011\">22. IJCAI 2011: Barcelona, Catalonia, Spain</h2>"), "IJCAI 2011, Spain")])
problem_b267 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "About 37,400,000 results (0.52 seconds)"), "37,400,000 0.52"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,090,000 results (0.90 seconds)"), "5,090,000 0.90"), 
	IOExample(Dict{Symbol, Any}(:x => "About 299,000 results (0.57 seconds)"), "299,000 0.57"), 
	IOExample(Dict{Symbol, Any}(:x => "About 5,320,000 results (0.63 seconds)"), "5,320,000 0.63"), 
	IOExample(Dict{Symbol, Any}(:x => "About 8,630,000 results (0.50 seconds)"), "8,630,000 0.50"), 
	IOExample(Dict{Symbol, Any}(:x => "About 520,000 results (0.59 seconds)"), "520,000 0.59"), 
	IOExample(Dict{Symbol, Any}(:x => "About 6,240,000 results (0.65 seconds)"), "6,240,000 0.65"), 
	IOExample(Dict{Symbol, Any}(:x => "About 31,900,000 results (0.70 seconds)"), "31,900,000 0.70"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,620,000 results (0.66 seconds)"), "1,620,000 0.66"), 
	IOExample(Dict{Symbol, Any}(:x => "About 1,390,000 results (0.70 seconds)"), "1,390,000 0.70")])
problem_b269 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3,360 km (2,088 mi) 84h 46' 14\""), "2,088"), 
	IOExample(Dict{Symbol, Any}(:x => "3,430 km (2,130 mi) 86h 12' 22\""), "2,130"), 
	IOExample(Dict{Symbol, Any}(:x => "3,496 km (2,172 mi) 87h 34' 47\""), "2,172"), 
	IOExample(Dict{Symbol, Any}(:x => "3,404 km (2,115 mi) 83h 56' 20\""), "2,115"), 
	IOExample(Dict{Symbol, Any}(:x => "3,570 km (2,220 mi) 91h 00' 26\""), "2,220"), 
	IOExample(Dict{Symbol, Any}(:x => "3,529 km (2,193 mi) 89h 04' 48\""), "2,193"), 
	IOExample(Dict{Symbol, Any}(:x => "3,459 km (2,149 mi) 85h 48' 35\""), "2,149"), 
	IOExample(Dict{Symbol, Any}(:x => "3,559 km (2,211 mi) 87h 52' 52\""), "2,211"), 
	IOExample(Dict{Symbol, Any}(:x => "3,660 km (2,274 mi) 89h 59' 06\""), "2,274"), 
	IOExample(Dict{Symbol, Any}(:x => "3,540 km (2,200 mi) 86h 20' 55\""), "2,200")])
problem_b26 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "AliCe"), "Alice"), 
	IOExample(Dict{Symbol, Any}(:x => "lAUrA"), "Laura"), 
	IOExample(Dict{Symbol, Any}(:x => "mary"), "Mary"), 
	IOExample(Dict{Symbol, Any}(:x => "BoB"), "Bob"), 
	IOExample(Dict{Symbol, Any}(:x => "StaNleY"), "Stanley"), 
	IOExample(Dict{Symbol, Any}(:x => "MELVIN"), "Melvin"), 
	IOExample(Dict{Symbol, Any}(:x => "DAVE"), "Dave"), 
	IOExample(Dict{Symbol, Any}(:x => "IaN"), "Ian"), 
	IOExample(Dict{Symbol, Any}(:x => "miKe"), "Mike"), 
	IOExample(Dict{Symbol, Any}(:x => "CHArlie"), "Charlie")])
problem_b270 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "/var/db/auth.db"), "db"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/bin/ncdu.exe"), "exe"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/Homebrew/CONTRIBUTING.md"), "md"), 
	IOExample(Dict{Symbol, Any}(:x => "/Company/Code/index.html"), "html"), 
	IOExample(Dict{Symbol, Any}(:x => "/Users/jim/Downloads/pdf.pdf"), "pdf"), 
	IOExample(Dict{Symbol, Any}(:x => "/Work/Presentations/talk.ppt"), "ppt"), 
	IOExample(Dict{Symbol, Any}(:x => "/Work/Records/2010/January.dat"), "dat"), 
	IOExample(Dict{Symbol, Any}(:x => "/Proj/Numerical/Simulators/NBody/nbody.c"), "c"), 
	IOExample(Dict{Symbol, Any}(:x => "/Company/Docs/Spec/specs.doc"), "doc"), 
	IOExample(Dict{Symbol, Any}(:x => "/usr/local/texlive/2017/doc.html"), "html")])
problem_b273 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "brent.harold@hotmail.com"), "@brentharold"), 
	IOExample(Dict{Symbol, Any}(:x => "bob.smith@gmail.com"), "@bobsmith"), 
	IOExample(Dict{Symbol, Any}(:x => "matthew.rosman@yahoo.com"), "@matthewrosman"), 
	IOExample(Dict{Symbol, Any}(:x => "alice.cooper@rock.com"), "@alicecooper"), 
	IOExample(Dict{Symbol, Any}(:x => "lisa.simpson@yahoo.com"), "@lisasimpson"), 
	IOExample(Dict{Symbol, Any}(:x => "ruby.clinton@mit.edu"), "@rubyclinton"), 
	IOExample(Dict{Symbol, Any}(:x => "jim.james@fas.harvard.edu"), "@jimjames"), 
	IOExample(Dict{Symbol, Any}(:x => "thom.yorke@radiohead.com"), "@thomyorke"), 
	IOExample(Dict{Symbol, Any}(:x => "jim.smith@gmail.com"), "@jimsmith"), 
	IOExample(Dict{Symbol, Any}(:x => "alan.turing@cam.ac.uk"), "@alanturing")])
problem_b274 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Slapstick (1976)"), "Slapstick, 1976"), 
	IOExample(Dict{Symbol, Any}(:x => "Player Piano (1952)"), "Player Piano, 1952"), 
	IOExample(Dict{Symbol, Any}(:x => "Cat's Cradle (1963)"), "Cat's Cradle, 1963"), 
	IOExample(Dict{Symbol, Any}(:x => "Galapagos (1985)"), "Galapagos, 1985"), 
	IOExample(Dict{Symbol, Any}(:x => "Mother Night (1961)"), "Mother Night, 1961"), 
	IOExample(Dict{Symbol, Any}(:x => "Breakfast of Champions (1973)"), "Breakfast of Champions, 1973"), 
	IOExample(Dict{Symbol, Any}(:x => "Deadeye Dick (1982)"), "Deadeye Dick, 1982"), 
	IOExample(Dict{Symbol, Any}(:x => "Jailbird (1979)"), "Jailbird, 1979"), 
	IOExample(Dict{Symbol, Any}(:x => "The Sirens of Titan (1959)"), "The Sirens of Titan, 1959"), 
	IOExample(Dict{Symbol, Any}(:x => "Slaughterhouse-Five (1969)"), "Slaughterhouse-Five, 1969")])
problem_b276 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "17 England FW Ben Brereton"), "17, Brereton"), 
	IOExample(Dict{Symbol, Any}(:x => "7 Scotland MF Liam Bridcutt"), "7, Bridcutt"), 
	IOExample(Dict{Symbol, Any}(:x => "13 Scotland DF Danny Fox"), "13, Fox"), 
	IOExample(Dict{Symbol, Any}(:x => "14 England MF Matty Cash"), "14, Cash"), 
	IOExample(Dict{Symbol, Any}(:x => "4 England DF Michael Mancienne"), "4, Mancienne"), 
	IOExample(Dict{Symbol, Any}(:x => "19 Wales FW Sam Jones"), "19, Jones"), 
	IOExample(Dict{Symbol, Any}(:x => "8 England MF Chris Cohen"), "8, Cohen"), 
	IOExample(Dict{Symbol, Any}(:x => "11 England MF Ben Osborn"), "11, Osborn"), 
	IOExample(Dict{Symbol, Any}(:x => "10 Scotland MF Barrie McKay"), "10, McKay"), 
	IOExample(Dict{Symbol, Any}(:x => "5 Algeria MF Adlene Guedioura"), "5, Guedioura")])
problem_b277 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3,404 km (2,115 mi) 83h 56' 20\""), "3,404, 2,115"), 
	IOExample(Dict{Symbol, Any}(:x => "3,529 km (2,193 mi) 89h 04' 48\""), "3,529, 2,193"), 
	IOExample(Dict{Symbol, Any}(:x => "3,360 km (2,088 mi) 84h 46' 14\""), "3,360, 2,088"), 
	IOExample(Dict{Symbol, Any}(:x => "3,660 km (2,274 mi) 89h 59' 06\""), "3,660, 2,274"), 
	IOExample(Dict{Symbol, Any}(:x => "3,570 km (2,220 mi) 91h 00' 26\""), "3,570, 2,220"), 
	IOExample(Dict{Symbol, Any}(:x => "3,540 km (2,200 mi) 86h 20' 55\""), "3,540, 2,200"), 
	IOExample(Dict{Symbol, Any}(:x => "3,559 km (2,211 mi) 87h 52' 52\""), "3,559, 2,211"), 
	IOExample(Dict{Symbol, Any}(:x => "3,430 km (2,130 mi) 86h 12' 22\""), "3,430, 2,130"), 
	IOExample(Dict{Symbol, Any}(:x => "3,496 km (2,172 mi) 87h 34' 47\""), "3,496, 2,172"), 
	IOExample(Dict{Symbol, Any}(:x => "3,459 km (2,149 mi) 85h 48' 35\""), "3,459, 2,149")])
problem_b279 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "36.166019(latitude), -115.065933(longitude)"), "36.166019, -115.065933"), 
	IOExample(Dict{Symbol, Any}(:x => "45.018974(latitude), -93.093773(longitude)"), "45.018974, -93.093773"), 
	IOExample(Dict{Symbol, Any}(:x => "40.369873(latitude), -74.757622(longitude)"), "40.369873, -74.757622"), 
	IOExample(Dict{Symbol, Any}(:x => "37.780544(latitude), -122.413055(longitude)"), "37.780544, -122.413055"), 
	IOExample(Dict{Symbol, Any}(:x => "40.746647(latitude), -73.454643(longitude)"), "40.746647, -73.454643"), 
	IOExample(Dict{Symbol, Any}(:x => "41.966038(latitude), -87.646660(longitude)"), "41.966038, -87.646660"), 
	IOExample(Dict{Symbol, Any}(:x => "39.486244(latitude), -87.452957(longitude)"), "39.486244, -87.452957"), 
	IOExample(Dict{Symbol, Any}(:x => "38.410809(latitude), -82.378563(longitude)"), "38.410809, -82.378563"), 
	IOExample(Dict{Symbol, Any}(:x => "32.995209(latitude), -96.687759(longitude)"), "32.995209, -96.687759"), 
	IOExample(Dict{Symbol, Any}(:x => "29.858896(latitude), -95.475952(longitude)"), "29.858896, -95.475952")])
problem_b27 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "AliCe"), "aLIcE"), 
	IOExample(Dict{Symbol, Any}(:x => "IaN"), "iAn"), 
	IOExample(Dict{Symbol, Any}(:x => "DAVE"), "dave"), 
	IOExample(Dict{Symbol, Any}(:x => "lAUrA"), "LauRa"), 
	IOExample(Dict{Symbol, Any}(:x => "CHArlie"), "chaRLIE"), 
	IOExample(Dict{Symbol, Any}(:x => "miKe"), "MIkE"), 
	IOExample(Dict{Symbol, Any}(:x => "mary"), "MARY"), 
	IOExample(Dict{Symbol, Any}(:x => "StaNleY"), "sTAnLEy"), 
	IOExample(Dict{Symbol, Any}(:x => "BoB"), "bOb"), 
	IOExample(Dict{Symbol, Any}(:x => "MELVIN"), "melvin")])
problem_b280 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "9l5l2NtcA8b3UIme6h-Y4i"), "-Y4i"), 
	IOExample(Dict{Symbol, Any}(:x => "4df0lgc4934RK17A-pX52jNW17msH"), "-pX52jNW17msH"), 
	IOExample(Dict{Symbol, Any}(:x => "170cTY2nq0v2wPI2R0-9t3LjP457ihb"), "-9t3LjP457ihb"), 
	IOExample(Dict{Symbol, Any}(:x => "Yar70258v92gT25x-k509P8qH4JV"), "-k509P8qH4JV"), 
	IOExample(Dict{Symbol, Any}(:x => "u-XP8c1Iun7"), "-XP8c1Iun7"), 
	IOExample(Dict{Symbol, Any}(:x => "397f25330KQ-laN50KJ16Yc0d"), "-laN50KJ16Yc0d"), 
	IOExample(Dict{Symbol, Any}(:x => "0s36X91SSK470ND4U7-18Y6x85P5xIY"), "-18Y6x85P5xIY"), 
	IOExample(Dict{Symbol, Any}(:x => "541441-34V3g4hYx26"), "-34V3g4hYx26"), 
	IOExample(Dict{Symbol, Any}(:x => "5r2lw9O71G3r90jh-p1971FP656fjI"), "-p1971FP656fjI"), 
	IOExample(Dict{Symbol, Any}(:x => "21973P6Ur426379X6I-924p6353W95Yl3aW05"), "-924p6353W95Yl3aW05")])
problem_b281 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3C-G55CuJ9-808"), "-G55CuJ9-808"), 
	IOExample(Dict{Symbol, Any}(:x => "J8j5-OBB01x-20p60T"), "-OBB01x-20p60T"), 
	IOExample(Dict{Symbol, Any}(:x => "Q87039-Z4989h8H-mO3I"), "-Z4989h8H-mO3I"), 
	IOExample(Dict{Symbol, Any}(:x => "q6h451-26Ercy529-Ynx6yXpj"), "-26Ercy529-Ynx6yXpj"), 
	IOExample(Dict{Symbol, Any}(:x => "Y71L9405-08SEcZ07-r"), "-08SEcZ07-r"), 
	IOExample(Dict{Symbol, Any}(:x => "O84UhplKv-2BJ-D"), "-2BJ-D"), 
	IOExample(Dict{Symbol, Any}(:x => "832n433-J-Ub51UALM0"), "-J-Ub51UALM0"), 
	IOExample(Dict{Symbol, Any}(:x => "5OVC6933z-99-7HD5R6H78"), "-99-7HD5R6H78"), 
	IOExample(Dict{Symbol, Any}(:x => "dKb-71749N-M"), "-71749N-M"), 
	IOExample(Dict{Symbol, Any}(:x => "2030p-q10-06990q99"), "-q10-06990q99")])
problem_b282 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "YTnWfSCC-YCshaWpm-sbFu"), "ytnwfscc-ycshawpm-sbfu"), 
	IOExample(Dict{Symbol, Any}(:x => "BnLjsxJH-EcLe-fAMZ"), "bnljsxjh-ecle-famz"), 
	IOExample(Dict{Symbol, Any}(:x => "iVmmds-VZxouO-sbF"), "ivmmds-vzxouo-sbf"), 
	IOExample(Dict{Symbol, Any}(:x => "bDFJKAiKg-kQejU-kGrvUJ"), "bdfjkaikg-kqeju-kgrvuj"), 
	IOExample(Dict{Symbol, Any}(:x => "BKnpMD-XV-U"), "bknpmd-xv-u"), 
	IOExample(Dict{Symbol, Any}(:x => "pj-vsLMRaYd-ZIuwVEznC"), "pj-vslmrayd-ziuwveznc"), 
	IOExample(Dict{Symbol, Any}(:x => "cqhss-KmDEOMWvi-qjAbAAeYA"), "cqhss-kmdeomwvi-qjabaaeya"), 
	IOExample(Dict{Symbol, Any}(:x => "H-dLtRQaoJ-zxOHOd"), "h-dltrqaoj-zxohod"), 
	IOExample(Dict{Symbol, Any}(:x => "lSgUz-KPEApN-YINGMhgKY"), "lsguz-kpeapn-yingmhgky"), 
	IOExample(Dict{Symbol, Any}(:x => "A-ndgjDCK-d"), "a-ndgjdck-d")])
problem_b283 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "bTd"), "btd"), 
	IOExample(Dict{Symbol, Any}(:x => "jTN"), "jtn"), 
	IOExample(Dict{Symbol, Any}(:x => "RXA"), "rxa"), 
	IOExample(Dict{Symbol, Any}(:x => "yD"), "yd"), 
	IOExample(Dict{Symbol, Any}(:x => "fkBZtzbS"), "fkbztzbs"), 
	IOExample(Dict{Symbol, Any}(:x => "vuudr"), "vuudr"), 
	IOExample(Dict{Symbol, Any}(:x => "qGzZUVfLhjr"), "qgzzuvflhjr"), 
	IOExample(Dict{Symbol, Any}(:x => "jfcrCNNOMGimotpRA"), "jfcrcnnomgimotpra"), 
	IOExample(Dict{Symbol, Any}(:x => "KguBIkfCURtsMy"), "kgubikfcurtsmy"), 
	IOExample(Dict{Symbol, Any}(:x => "mKSQd"), "mksqd")])
problem_b284 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "WNRhYJL"), "WNRHYJL"), 
	IOExample(Dict{Symbol, Any}(:x => "AMGSlP"), "AMGSLP"), 
	IOExample(Dict{Symbol, Any}(:x => "yubyISLqYUOE"), "YUBYISLQYUOE"), 
	IOExample(Dict{Symbol, Any}(:x => "JDbH"), "JDBH"), 
	IOExample(Dict{Symbol, Any}(:x => "HADrKhCZtWDvsR"), "HADRKHCZTWDVSR"), 
	IOExample(Dict{Symbol, Any}(:x => "Llvjxpuu"), "LLVJXPUU"), 
	IOExample(Dict{Symbol, Any}(:x => "WbaMhPAtJX"), "WBAMHPATJX"), 
	IOExample(Dict{Symbol, Any}(:x => "FJCmIPvMOHfzv"), "FJCMIPVMOHFZV"), 
	IOExample(Dict{Symbol, Any}(:x => "bcKmgc"), "BCKMGC"), 
	IOExample(Dict{Symbol, Any}(:x => "Xf"), "XF")])
problem_b285 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1s9aW96t5Vah02y762n"), "1S9AW96T5VAH02Y762N"), 
	IOExample(Dict{Symbol, Any}(:x => "o7rzN1"), "O7RZN1"), 
	IOExample(Dict{Symbol, Any}(:x => "b5T4300612LI70i29"), "B5T4300612LI70I29"), 
	IOExample(Dict{Symbol, Any}(:x => "r1t8Ba7o5A56"), "R1T8BA7O5A56"), 
	IOExample(Dict{Symbol, Any}(:x => "gT5Go6xDd0U9"), "GT5GO6XDD0U9"), 
	IOExample(Dict{Symbol, Any}(:x => "7n3opJpc45wL7"), "7N3OPJPC45WL7"), 
	IOExample(Dict{Symbol, Any}(:x => "L1k9669"), "L1K9669"), 
	IOExample(Dict{Symbol, Any}(:x => "S161c9R613366"), "S161C9R613366"), 
	IOExample(Dict{Symbol, Any}(:x => "y625E"), "Y625E"), 
	IOExample(Dict{Symbol, Any}(:x => "vmJ4JV0eEGp3ckeU"), "VMJ4JV0EEGP3CKEU")])
problem_b286 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Scfx IvfKW ZHIaA Meeh i"), "ScfxIvfKWZHIaA"), 
	IOExample(Dict{Symbol, Any}(:x => "JvL AjSpvMdWi MpW"), "JvLAjSpvMdWiMpW"), 
	IOExample(Dict{Symbol, Any}(:x => "IxzNGvlT HTjydsQ tdnaBa"), "IxzNGvlTHTjydsQtdnaBa"), 
	IOExample(Dict{Symbol, Any}(:x => "F bdQjiOW DRdoIz bPL"), "FbdQjiOWDRdoIz"), 
	IOExample(Dict{Symbol, Any}(:x => "Zw EkPD WTJFf PXHsgOZtK hozThRJ"), "ZwEkPDWTJFf"), 
	IOExample(Dict{Symbol, Any}(:x => "d SwGzS QdUvj xbXMng"), "dSwGzSQdUvj"), 
	IOExample(Dict{Symbol, Any}(:x => "NuMiA IhRdASRG OVKRKj"), "NuMiAIhRdASRGOVKRKj"), 
	IOExample(Dict{Symbol, Any}(:x => "JaPiA XzaHum wZJ"), "JaPiAXzaHumwZJ"), 
	IOExample(Dict{Symbol, Any}(:x => "ocBzCP vHMV nkl X s"), "ocBzCPvHMVnkl"), 
	IOExample(Dict{Symbol, Any}(:x => "kiLAe mqfBo pdag s"), "kiLAemqfBopdag")])
problem_b287 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "pmkHeK sILz orPTSgd"), "pmkheksilzorptsgd"), 
	IOExample(Dict{Symbol, Any}(:x => "HWRZYXKdo bmlDIFpQ"), "hwrzyxkdobmldifpq"), 
	IOExample(Dict{Symbol, Any}(:x => "e Ma pmcOpBZJh Ri MxnyfUqy"), "emapmcopbzjh"), 
	IOExample(Dict{Symbol, Any}(:x => "DyF HAlwXAJG jmcneKFkD zUUf"), "dyfhalwxajgjmcnekfkd"), 
	IOExample(Dict{Symbol, Any}(:x => "ENGIJT"), "engijt"), 
	IOExample(Dict{Symbol, Any}(:x => "kTX YPUqolb atdCCo"), "ktxypuqolbatdcco"), 
	IOExample(Dict{Symbol, Any}(:x => "AU YvBXswI VzxPpux Nk cQW"), "auyvbxswivzxppux"), 
	IOExample(Dict{Symbol, Any}(:x => "AaDHUAZdY hrMhUvYcG GEhoWrAU w"), "aadhuazdyhrmhuvycggehowrau"), 
	IOExample(Dict{Symbol, Any}(:x => "dFqMswgT PeZ"), "dfqmswgtpez"), 
	IOExample(Dict{Symbol, Any}(:x => "LMO pzTgUF"), "lmopztguf")])
problem_b288 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "QrNcTrN iYdwQKrNe"), "QRNCTRNiydwqkrne"), 
	IOExample(Dict{Symbol, Any}(:x => "zfHgZpm SGC"), "ZFHGZPMsgc"), 
	IOExample(Dict{Symbol, Any}(:x => "Tpewr WDzetiYV"), "TPEWRwdzetiyv"), 
	IOExample(Dict{Symbol, Any}(:x => "KEFUFL Jfubczvi"), "KEFUFLjfubczvi"), 
	IOExample(Dict{Symbol, Any}(:x => "bvKoqsU DRndvD"), "BVKOQSUdrndvd"), 
	IOExample(Dict{Symbol, Any}(:x => "zxvsZxJ Ly"), "ZXVSZXJly"), 
	IOExample(Dict{Symbol, Any}(:x => "MYa bgG"), "MYAbgg"), 
	IOExample(Dict{Symbol, Any}(:x => "onyotm eKrNxii"), "ONYOTMekrnxii"), 
	IOExample(Dict{Symbol, Any}(:x => "USesXzut taoWps"), "USESXZUTtaowps"), 
	IOExample(Dict{Symbol, Any}(:x => "osEdR LyvJOEUDB"), "OSEDRlyvjoeudb")])
problem_b289 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "JtHVzX pHVrb"), "jthvzxPHVRB"), 
	IOExample(Dict{Symbol, Any}(:x => "VQhXfFm CywbukdQ"), "vqhxffmCYWBUKDQ"), 
	IOExample(Dict{Symbol, Any}(:x => "Xl AxPxbl"), "xlAXPXBL"), 
	IOExample(Dict{Symbol, Any}(:x => "gWJsx YhDmXFAG"), "gwjsxYHDMXFAG"), 
	IOExample(Dict{Symbol, Any}(:x => "Hembeth yZFRntjO"), "hembethYZFRNTJO"), 
	IOExample(Dict{Symbol, Any}(:x => "CZKed NtNjy"), "czkedNTNJY"), 
	IOExample(Dict{Symbol, Any}(:x => "JsXnZuF whgj"), "jsxnzufWHGJ"), 
	IOExample(Dict{Symbol, Any}(:x => "GYKYaJbM xRspBD"), "gykyajbmXRSPBD"), 
	IOExample(Dict{Symbol, Any}(:x => "giSG HYGixHQsB"), "gisgHYGIXHQSB"), 
	IOExample(Dict{Symbol, Any}(:x => "qJJcoVVc bXfYLNKbM"), "qjjcovvcBXFYLNKBM")])
problem_b28 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "AliCe HEEr"), "Alice Heer"), 
	IOExample(Dict{Symbol, Any}(:x => "MELVIN Julian"), "Melvin Julian"), 
	IOExample(Dict{Symbol, Any}(:x => "lAUrA Love"), "Laura Love"), 
	IOExample(Dict{Symbol, Any}(:x => "mary gelman"), "Mary Gelman"), 
	IOExample(Dict{Symbol, Any}(:x => "miKe dwIGHT"), "Mike Dwight"), 
	IOExample(Dict{Symbol, Any}(:x => "CHArlie PEAnuts"), "Charlie Peanuts"), 
	IOExample(Dict{Symbol, Any}(:x => "IaN RoDny"), "Ian Rodny"), 
	IOExample(Dict{Symbol, Any}(:x => "BoB BAD"), "Bob Bad"), 
	IOExample(Dict{Symbol, Any}(:x => "DAVE daviD"), "Dave David"), 
	IOExample(Dict{Symbol, Any}(:x => "StaNleY TRAVis"), "Stanley Travis")])
problem_b290 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "fUPlDJMOzQpxu"), "flzpxu"), 
	IOExample(Dict{Symbol, Any}(:x => "qiIpilBKOiis"), "qipiliis"), 
	IOExample(Dict{Symbol, Any}(:x => "EcOUU"), "c"), 
	IOExample(Dict{Symbol, Any}(:x => "RzTbGvf"), "zbvf"), 
	IOExample(Dict{Symbol, Any}(:x => "gNlSafY"), "glaf"), 
	IOExample(Dict{Symbol, Any}(:x => "AYUVnnKoVwyzf"), "nnowyzf"), 
	IOExample(Dict{Symbol, Any}(:x => "qcpmZjmgLyPQq"), "qcpmjmgyq"), 
	IOExample(Dict{Symbol, Any}(:x => "CARAH"), ""), 
	IOExample(Dict{Symbol, Any}(:x => "iGgKQRk"), "igk"), 
	IOExample(Dict{Symbol, Any}(:x => "QoGwt"), "owt")])
problem_b291 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "oNAzgf"), "NA"), 
	IOExample(Dict{Symbol, Any}(:x => "NzafvxJoz"), "NJ"), 
	IOExample(Dict{Symbol, Any}(:x => "xuklwfZLRhUt"), "ZLRU"), 
	IOExample(Dict{Symbol, Any}(:x => "LZEiwnGjutafUk"), "LZEGU"), 
	IOExample(Dict{Symbol, Any}(:x => "cUs"), "U"), 
	IOExample(Dict{Symbol, Any}(:x => "FcEQEhcFCq"), "FEQEFC"), 
	IOExample(Dict{Symbol, Any}(:x => "TrgyTP"), "TTP"), 
	IOExample(Dict{Symbol, Any}(:x => "fsgtu"), ""), 
	IOExample(Dict{Symbol, Any}(:x => "zVXkFVpe"), "VXFV"), 
	IOExample(Dict{Symbol, Any}(:x => "cOojjHFMgC"), "OHFMC")])
problem_b292 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "zTnctxgwuwlk"), "z"), 
	IOExample(Dict{Symbol, Any}(:x => "ptocxksAkunehwup"), "ptocxks"), 
	IOExample(Dict{Symbol, Any}(:x => "dcmesxodco"), "dcmesxodco"), 
	IOExample(Dict{Symbol, Any}(:x => "tanctbfwnhay"), "tanctbfwnhay"), 
	IOExample(Dict{Symbol, Any}(:x => "zfxeabVpapncndbhep"), "zfxeab"), 
	IOExample(Dict{Symbol, Any}(:x => "hlcsaHkqwnl"), "hlcsa"), 
	IOExample(Dict{Symbol, Any}(:x => "otzotttrajw"), "otzotttrajw"), 
	IOExample(Dict{Symbol, Any}(:x => "pcptjrsnrpfMphnVxi"), "pcptjrsnrpf"), 
	IOExample(Dict{Symbol, Any}(:x => "moognkwkdqjtvnabu"), "moognkwkdqjtvnabu"), 
	IOExample(Dict{Symbol, Any}(:x => "smyztumwvllsy"), "smyztumwvllsy")])
problem_b293 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "dFqzrsinpyurusbuahd"), "d"), 
	IOExample(Dict{Symbol, Any}(:x => "cgiwuzwtawcwcfIslkylp"), "cgiwuzwtawcwcf"), 
	IOExample(Dict{Symbol, Any}(:x => "anhhisoctlzn"), "anhhisoctlzn"), 
	IOExample(Dict{Symbol, Any}(:x => "dmlzkyvtwkwqwhpfwoussfigm"), "dmlzkyvtwkwqwhpfwoussfigm"), 
	IOExample(Dict{Symbol, Any}(:x => "uvwmukqqlPjuhuaCLIfk"), "uvwmukqql"), 
	IOExample(Dict{Symbol, Any}(:x => "jxpdHoqgtzeiVpyhtgqwagyaviws"), "jxpd"), 
	IOExample(Dict{Symbol, Any}(:x => "htvpAsgrwbsoeigjvtryhtfp"), "htvp"), 
	IOExample(Dict{Symbol, Any}(:x => "hmjuuhqf"), "hmjuuhqf"), 
	IOExample(Dict{Symbol, Any}(:x => "wegwqxpvmeltswcmuzojaNalkY"), "wegwqxpvmeltswcmuzoja"), 
	IOExample(Dict{Symbol, Any}(:x => "worCiqshrbrgrplzaaBirqvwic"), "wor")])
problem_b294 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "GMFXUZVGCE"), "GMFXUZVGCE"), 
	IOExample(Dict{Symbol, Any}(:x => "GKODMOLEOHXUAAQKU"), "GKODMOLEOHXUAAQKU"), 
	IOExample(Dict{Symbol, Any}(:x => "MOSWORXePDAYFQPRXbNLNW"), "MOSWORX"), 
	IOExample(Dict{Symbol, Any}(:x => "OOWTFWHMuSnNKOUQJUS"), "OOWTFWHM"), 
	IOExample(Dict{Symbol, Any}(:x => "FGYKTZLWAH"), "FGYKTZLWAH"), 
	IOExample(Dict{Symbol, Any}(:x => "VJQXXZVGZYECLKLKVlIUAkFVRU"), "VJQXXZVGZYECLKLKV"), 
	IOExample(Dict{Symbol, Any}(:x => "HRghPPIuJZGOrUR"), "HR"), 
	IOExample(Dict{Symbol, Any}(:x => "GQnBEFCKTUIkJAGD"), "GQ"), 
	IOExample(Dict{Symbol, Any}(:x => "KPWNYXBLZHMGT"), "KPWNYXBLZHMGT"), 
	IOExample(Dict{Symbol, Any}(:x => "IBSYXGGJKH"), "IBSYXGGJKH")])
problem_b295 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "RCVXXOQZoWYSPN"), "oWYSPN"), 
	IOExample(Dict{Symbol, Any}(:x => "NHMPEIxIQBJXWMCWU"), "xIQBJXWMCWU"), 
	IOExample(Dict{Symbol, Any}(:x => "uTTLYoWYMQKSFDSJDlKONA"), "uTTLYoWYMQKSFDSJDlKONA"), 
	IOExample(Dict{Symbol, Any}(:x => "DVGURUPJAYVNDAFuNQKX"), "uNQKX"), 
	IOExample(Dict{Symbol, Any}(:x => "ALWOAWPSLNXAhPZZGH"), "hPZZGH"), 
	IOExample(Dict{Symbol, Any}(:x => "ROISVIcBZPKTXADzPZCE"), "cBZPKTXADzPZCE"), 
	IOExample(Dict{Symbol, Any}(:x => "RWNZPJLXqLOSGL"), "qLOSGL"), 
	IOExample(Dict{Symbol, Any}(:x => "HSIHFPWSnUM"), "nUM"), 
	IOExample(Dict{Symbol, Any}(:x => "EQLUFJPWLIRZLRlWHDRAOnMaVAGG"), "lWHDRAOnMaVAGG"), 
	IOExample(Dict{Symbol, Any}(:x => "KQrNGADLMOPPNBUGODmYVRMULPV"), "rNGADLMOPPNBUGODmYVRMULPV")])
problem_b296 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "QLnQIDJZSSELLBVUHZmIKHCC"), "QIDJZSSELLBVUHZmIKHCC"), 
	IOExample(Dict{Symbol, Any}(:x => "YbOVNCHEJNuMFMOEQAFXCLHBHKNCI"), "OVNCHEJNuMFMOEQAFXCLHBHKNCI"), 
	IOExample(Dict{Symbol, Any}(:x => "JVXSBHUPGBXOZXLtYLXqGM"), "YLXqGM"), 
	IOExample(Dict{Symbol, Any}(:x => "TWHQEJHJTTBZDTBNrNTD"), "NTD"), 
	IOExample(Dict{Symbol, Any}(:x => "IMUXKAAxCHASLA"), "CHASLA"), 
	IOExample(Dict{Symbol, Any}(:x => "TWJUMDlQNFWXbLIIy"), "QNFWXbLIIy"), 
	IOExample(Dict{Symbol, Any}(:x => "RMGBDWQCFhFLEYEHTQYHGCJEY"), "FLEYEHTQYHGCJEY"), 
	IOExample(Dict{Symbol, Any}(:x => "FDHSMLTMOKOMIgBIYJHOMT"), "BIYJHOMT"), 
	IOExample(Dict{Symbol, Any}(:x => "NJFLTFCTrGBbOAFPKPNLUCYJZ"), "GBbOAFPKPNLUCYJZ"), 
	IOExample(Dict{Symbol, Any}(:x => "TNZQKWRDFCCcYKRQW"), "YKRQW")])
problem_b297 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "cIwcmniyfbfeCvtfc"), "wcmniyfbfeCvtfc"), 
	IOExample(Dict{Symbol, Any}(:x => "nsjbardneXOhptpxgoJvpstynbs"), "OhptpxgoJvpstynbs"), 
	IOExample(Dict{Symbol, Any}(:x => "hjzwjpuqnxehyotVfllbjthRooyfm"), "fllbjthRooyfm"), 
	IOExample(Dict{Symbol, Any}(:x => "fugbluXkTker"), "kTker"), 
	IOExample(Dict{Symbol, Any}(:x => "khaKemsjuclmjtlpdpy"), "emsjuclmjtlpdpy"), 
	IOExample(Dict{Symbol, Any}(:x => "hlkduxkvXsrhcuo"), "srhcuo"), 
	IOExample(Dict{Symbol, Any}(:x => "SxLgvpofhmrhehbdbemmlxkumq"), "xLgvpofhmrhehbdbemmlxkumq"), 
	IOExample(Dict{Symbol, Any}(:x => "qsfposvkuwdqqWqrq"), "qrq"), 
	IOExample(Dict{Symbol, Any}(:x => "vlqZUxcvgyNnxrqktu"), "UxcvgyNnxrqktu"), 
	IOExample(Dict{Symbol, Any}(:x => "esjcjRChduVkiwsVru"), "ChduVkiwsVru")])
problem_b298 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "qviiddVaqXuwPsjtrgwQOkzbhr"), "VaqXuwPsjtrgwQOkzbhr"), 
	IOExample(Dict{Symbol, Any}(:x => "xaqrqgelhbstFpduxdwdzulqa"), "Fpduxdwdzulqa"), 
	IOExample(Dict{Symbol, Any}(:x => "mUGnvikEyZpxumgbUvlhwcjgsy"), "UGnvikEyZpxumgbUvlhwcjgsy"), 
	IOExample(Dict{Symbol, Any}(:x => "cpudjegnmmqnedolmucvIqfrwjfh"), "Iqfrwjfh"), 
	IOExample(Dict{Symbol, Any}(:x => "goikhqoFem"), "Fem"), 
	IOExample(Dict{Symbol, Any}(:x => "xZDxhiwtcugedsafqtylykmvnfyxf"), "ZDxhiwtcugedsafqtylykmvnfyxf"), 
	IOExample(Dict{Symbol, Any}(:x => "xnndumsmeeXbnpadz"), "Xbnpadz"), 
	IOExample(Dict{Symbol, Any}(:x => "UhzjtjvizjspktqyIqUquboeEXyu"), "UhzjtjvizjspktqyIqUquboeEXyu"), 
	IOExample(Dict{Symbol, Any}(:x => "jpbpmuYzcnqugiAs"), "YzcnqugiAs"), 
	IOExample(Dict{Symbol, Any}(:x => "qkjyhyeAievdgd"), "Aievdgd")])
problem_b299 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Wp1raTviIFPYOaNNGEfgJDG84n"), "1raTviIFPYOaNNGEfgJDG84n"), 
	IOExample(Dict{Symbol, Any}(:x => "kUDG1lTFnHetKkwYiCyXu"), "1lTFnHetKkwYiCyXu"), 
	IOExample(Dict{Symbol, Any}(:x => "jDle1KKAyfwjdbKOZHzS"), "1KKAyfwjdbKOZHzS"), 
	IOExample(Dict{Symbol, Any}(:x => "VkfZ9mySrBJDHijpWT2CtWsvYY"), "9mySrBJDHijpWT2CtWsvYY"), 
	IOExample(Dict{Symbol, Any}(:x => "jl3VoFNPv79VTKTECrcdweUGq"), "3VoFNPv79VTKTECrcdweUGq"), 
	IOExample(Dict{Symbol, Any}(:x => "ZH1xNlF51i"), "1xNlF51i"), 
	IOExample(Dict{Symbol, Any}(:x => "onIptoRSijeZtlreKSEDfNR4c7M"), "4c7M"), 
	IOExample(Dict{Symbol, Any}(:x => "qYFDwMU3HQfZSSSz6NfhMP"), "3HQfZSSSz6NfhMP"), 
	IOExample(Dict{Symbol, Any}(:x => "kHTFEVhPVavKJlXilYTSVcNo1sCm"), "1sCm"), 
	IOExample(Dict{Symbol, Any}(:x => "m6MHcqMTquNXGJCDC2cwiNXDtGJSL"), "6MHcqMTquNXGJCDC2cwiNXDtGJSL")])
problem_b29 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "June 20 - 2002"), "June"), 
	IOExample(Dict{Symbol, Any}(:x => "January 8"), "January"), 
	IOExample(Dict{Symbol, Any}(:x => "August 12, 1993"), "August"), 
	IOExample(Dict{Symbol, Any}(:x => "July 4, 2015"), "July"), 
	IOExample(Dict{Symbol, Any}(:x => "May 27 1950"), "May"), 
	IOExample(Dict{Symbol, Any}(:x => "May 21"), "May"), 
	IOExample(Dict{Symbol, Any}(:x => "December 1990"), "December"), 
	IOExample(Dict{Symbol, Any}(:x => "November, 27, 2011"), "November"), 
	IOExample(Dict{Symbol, Any}(:x => "2007 (September)"), "September"), 
	IOExample(Dict{Symbol, Any}(:x => "July 15, 20011"), "July")])
problem_b2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "My name is Alice"), "Alice"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Jeanne"), "Jeanne"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Bob"), "Bob"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Bill"), "Bill"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Josh"), "Josh"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Richard"), "Richard"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Albert"), "Albert"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Laura"), "Laura"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is Charlie"), "Charlie"), 
	IOExample(Dict{Symbol, Any}(:x => "My name is John"), "John")])
problem_b300 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "6XfjSRJnbXTkqTMTeyLxrs8gojHDx"), ""), 
	IOExample(Dict{Symbol, Any}(:x => "ySYH7XjIgqkm"), "ySYH"), 
	IOExample(Dict{Symbol, Any}(:x => "NC2x8CZPvyU15Ysa"), "NC"), 
	IOExample(Dict{Symbol, Any}(:x => "QUqkHN2oNWkwGlYrKahoB"), "QUqkHN"), 
	IOExample(Dict{Symbol, Any}(:x => "AWhURyhlFkEkpstlfiDT3rtVGGX"), "AWhURyhlFkEkpstlfiDT"), 
	IOExample(Dict{Symbol, Any}(:x => "rYSMvYruUxoOBaDJt4aGafRV"), "rYSMvYruUxoOBaDJt"), 
	IOExample(Dict{Symbol, Any}(:x => "mb3lfJbglnVZ"), "mb"), 
	IOExample(Dict{Symbol, Any}(:x => "bn3FIO1VLb1hVvTwea1PyvC8I"), "bn"), 
	IOExample(Dict{Symbol, Any}(:x => "YsWDXezsI7xhDF"), "YsWDXezsI"), 
	IOExample(Dict{Symbol, Any}(:x => "kAaCyBkKcrLmI8mYlqJMcH"), "kAaCyBkKcrLmI")])
problem_b301 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "NGwsfLyix51HFWsp"), "ngwsflyix51hfwsp"), 
	IOExample(Dict{Symbol, Any}(:x => "P7IeFgqjFmYvSe"), "p7iefgqjfmyvse"), 
	IOExample(Dict{Symbol, Any}(:x => "gCQCDSQqECQLhVy0NsEWUs4FDQwWJ"), "gcqcdsqqecqlhvy0nsewus4fdqwwj"), 
	IOExample(Dict{Symbol, Any}(:x => "VjA6FxarSFBBOhIdJ5mvYOSF"), "vja6fxarsfbbohidj5mvyosf"), 
	IOExample(Dict{Symbol, Any}(:x => "MmID4DvGSDjskx"), "mmid4dvgsdjskx"), 
	IOExample(Dict{Symbol, Any}(:x => "lLGfvWo3AtfGDG5npPL"), "llgfvwo3atfgdg5nppl"), 
	IOExample(Dict{Symbol, Any}(:x => "erjNiEd5zFzwocVyzO"), "erjnied5zfzwocvyzo"), 
	IOExample(Dict{Symbol, Any}(:x => "tJ1AdGMDw36kPXYpDEIq2kHU"), "tj1adgmdw36kpxypdeiq2khu"), 
	IOExample(Dict{Symbol, Any}(:x => "PldSac78PtEonlymdaLlY5r9m"), "pldsac78pteonlymdally5r9m"), 
	IOExample(Dict{Symbol, Any}(:x => "S8crew2vZJsU"), "s8crew2vzjsu")])
problem_b302 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "jiumpe6xithadsdqmerv"), "JIUMPE6xithadsdqmerv"), 
	IOExample(Dict{Symbol, Any}(:x => "atsexbvmctq4bwghlb"), "ATSEXBVMCTQ4bwghlb"), 
	IOExample(Dict{Symbol, Any}(:x => "uqftqowltp6ubivqtexec"), "UQFTQOWLTP6ubivqtexec"), 
	IOExample(Dict{Symbol, Any}(:x => "kafq91vfocw5joz0wzuhrqksklww"), "KAFQ91vfocw5joz0wzuhrqksklww"), 
	IOExample(Dict{Symbol, Any}(:x => "vxbrmtma0rrazvob"), "VXBRMTMA0rrazvob"), 
	IOExample(Dict{Symbol, Any}(:x => "dobujfbtddsrx5kabbebdnl"), "DOBUJFBTDDSRX5kabbebdnl"), 
	IOExample(Dict{Symbol, Any}(:x => "mgjqa8ndwytllxtuxg8ruzaqpf"), "MGJQA8ndwytllxtuxg8ruzaqpf"), 
	IOExample(Dict{Symbol, Any}(:x => "kaetzqew5vcmalerb"), "KAETZQEW5vcmalerb"), 
	IOExample(Dict{Symbol, Any}(:x => "wfbo5doeodnm9x"), "WFBO5doeodnm9x"), 
	IOExample(Dict{Symbol, Any}(:x => "tawppx88hnhokarotf"), "TAWPPX88hnhokarotf")])
problem_b303 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "mifisnrxokepobjwmlk"), "MifIsnRxoKepObjWmlK"), 
	IOExample(Dict{Symbol, Any}(:x => "tttqmg"), "TttQmg"), 
	IOExample(Dict{Symbol, Any}(:x => "ysohbqfeapycwepvgnx"), "YsoHbqFeaPycWepVgnX"), 
	IOExample(Dict{Symbol, Any}(:x => "arpyu"), "ArpYu"), 
	IOExample(Dict{Symbol, Any}(:x => "gmjwqfpyuzpgoguia"), "GmjWqfPyuZpgOguIa"), 
	IOExample(Dict{Symbol, Any}(:x => "smteekpmn"), "SmtEekPmn"), 
	IOExample(Dict{Symbol, Any}(:x => "qkultf"), "QkuLtf"), 
	IOExample(Dict{Symbol, Any}(:x => "jnnlqnrq"), "JnnLqnRq"), 
	IOExample(Dict{Symbol, Any}(:x => "gyzvxgpu"), "GyzVxgPu"), 
	IOExample(Dict{Symbol, Any}(:x => "muxopq"), "MuxOpq")])
problem_b304 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<magbuvlfohfm>"), "MaGbUvLfOhFm"), 
	IOExample(Dict{Symbol, Any}(:x => "<svlidrufpn>"), "SvLiDrUfPn"), 
	IOExample(Dict{Symbol, Any}(:x => "<seccbq>"), "SeCcBq"), 
	IOExample(Dict{Symbol, Any}(:x => "<mgqkkze>"), "MgQkKzE"), 
	IOExample(Dict{Symbol, Any}(:x => "<swnumyw>"), "SwNuMyW"), 
	IOExample(Dict{Symbol, Any}(:x => "<vmkioaovipbdw>"), "VmKiOaOvIpBdW"), 
	IOExample(Dict{Symbol, Any}(:x => "<moimw>"), "MoImW"), 
	IOExample(Dict{Symbol, Any}(:x => "<qgintscnpz>"), "QgInTsCnPz"), 
	IOExample(Dict{Symbol, Any}(:x => "<bgygkgokxhvbjkrlkl>"), "BgYgKgOkXhVbJkRlKl"), 
	IOExample(Dict{Symbol, Any}(:x => "<hjzkxtuf>"), "HjZkXtUf")])
problem_b305 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "n-nd-xe-bl-jl-eh-"), "nndxebljleh"), 
	IOExample(Dict{Symbol, Any}(:x => "h-pw-qu-er-h"), "hpwquerh"), 
	IOExample(Dict{Symbol, Any}(:x => "w-fn-rv-qq-ng-ng-wq-e"), "wfnrvqqngngwqe"), 
	IOExample(Dict{Symbol, Any}(:x => "o-ia-ea-zd-tn-cw-"), "oiaeazdtncw"), 
	IOExample(Dict{Symbol, Any}(:x => "s-jn-jw-nz-zp-hw-oh-c"), "sjnjwnzzphwohc"), 
	IOExample(Dict{Symbol, Any}(:x => "b-bn-no-lr-ps-xl-tp-o"), "bbnnolrpsxltpo"), 
	IOExample(Dict{Symbol, Any}(:x => "g-mx-es-xn-am-nr-so-"), "gmxesxnamnrso"), 
	IOExample(Dict{Symbol, Any}(:x => "o-wf-ck-qn-ip-rq-ax-lx-"), "owfckqniprqaxlx"), 
	IOExample(Dict{Symbol, Any}(:x => "e-nd-iz-hl-in-e"), "endizhline"), 
	IOExample(Dict{Symbol, Any}(:x => "p-jz-vc-oi-g"), "pjzvcoig")])
problem_b306 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "-ge-fb-cs-gh-ag-nz"), "gefbcsghagnz"), 
	IOExample(Dict{Symbol, Any}(:x => "-aw-od-gi-mk-pv"), "awodgimkpv"), 
	IOExample(Dict{Symbol, Any}(:x => "-od-el-er-f"), "odelerf"), 
	IOExample(Dict{Symbol, Any}(:x => "-jj-sk-ut-ox-vj-uq"), "jjskutoxvjuq"), 
	IOExample(Dict{Symbol, Any}(:x => "-fi-mz-un-sg-bp-ky-td-g"), "fimzunsgbpkytdg"), 
	IOExample(Dict{Symbol, Any}(:x => "-bm-hf-vm-lb-xt-wz-my-ba"), "bmhfvmlbxtwzmyba"), 
	IOExample(Dict{Symbol, Any}(:x => "-cu-mp-mq-wm-qz-lx-y"), "cumpmqwmqzlxy"), 
	IOExample(Dict{Symbol, Any}(:x => "-zm-dk-am-b"), "zmdkamb"), 
	IOExample(Dict{Symbol, Any}(:x => "-hn-mj-oe-cw-nk-dj-zy-ui-xk-j"), "hnmjoecwnkdjzyuixkj"), 
	IOExample(Dict{Symbol, Any}(:x => "-tl-ay-qh-xj-dh-ma-bx-p"), "tlayqhxjdhmabxp")])
problem_b307 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "zmtbbvugarnhb"), "mbvgrh"), 
	IOExample(Dict{Symbol, Any}(:x => "mjnvafsuaki"), "jvfuk"), 
	IOExample(Dict{Symbol, Any}(:x => "itdbgpeezmphqayhtz"), "tbpemhahz"), 
	IOExample(Dict{Symbol, Any}(:x => "hhlcgmbgibo"), "hcmgb"), 
	IOExample(Dict{Symbol, Any}(:x => "ttgqbur"), "tqu"), 
	IOExample(Dict{Symbol, Any}(:x => "hvjwvrsvtbchxrfmirb"), "vwrvbhrmr"), 
	IOExample(Dict{Symbol, Any}(:x => "yepafosoqpcehkd"), "eaoopek"), 
	IOExample(Dict{Symbol, Any}(:x => "ucaxjxqm"), "cxxm"), 
	IOExample(Dict{Symbol, Any}(:x => "gwzkopwqrobvi"), "wkpqov"), 
	IOExample(Dict{Symbol, Any}(:x => "csrfsgxaxpazwp"), "sfgapzp")])
problem_b308 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "yokhigixkyyik"), "okhgixyyi"), 
	IOExample(Dict{Symbol, Any}(:x => "vuqwyducyql"), "uqwducql"), 
	IOExample(Dict{Symbol, Any}(:x => "ueieauttikclgvnhkbh"), "eieuttkclvnhbh"), 
	IOExample(Dict{Symbol, Any}(:x => "diipifebwtepfjnixdt"), "iipfebtepjnidt"), 
	IOExample(Dict{Symbol, Any}(:x => "rgjtsrwuqvkrrlxcuvwrlaz"), "gjtrwuvkrlxcvwraz"), 
	IOExample(Dict{Symbol, Any}(:x => "vgtkbjljwfrlsftgvkapnvyou"), "gtkjljfrlftgkapvyo"), 
	IOExample(Dict{Symbol, Any}(:x => "mkajankpvvajfqpjnx"), "kajnkpvajqpjx"), 
	IOExample(Dict{Symbol, Any}(:x => "uasdntcmvtmhvthhtiwpiyakaaj"), "asdtcmtmhthhiwpyakaj"), 
	IOExample(Dict{Symbol, Any}(:x => "wuqxyeuazupaisx"), "uqxeuaupasx"), 
	IOExample(Dict{Symbol, Any}(:x => "faufqzshowogczzcwfrbtx"), "aufzshwogzzcfrbx")])
problem_b309 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "vpiclmujkk"), "vpiclm"), 
	IOExample(Dict{Symbol, Any}(:x => "ltgxtpsyfctwfypox"), "ltgxtp"), 
	IOExample(Dict{Symbol, Any}(:x => "rnklkflrwntytmeuairnubckobsl"), "rnklkf"), 
	IOExample(Dict{Symbol, Any}(:x => "gscjtjnzyafizcxauwse"), "gscjtj"), 
	IOExample(Dict{Symbol, Any}(:x => "xgrmwzhcibanllaysffoadhmscbjp"), "xgrmwz"), 
	IOExample(Dict{Symbol, Any}(:x => "kcitxjvdhvhbdjonh"), "kcitxj"), 
	IOExample(Dict{Symbol, Any}(:x => "tdtmzubhixmrjjms"), "tdtmzu"), 
	IOExample(Dict{Symbol, Any}(:x => "irveqavgvqmyzcltqfoqbntplagi"), "irveqa"), 
	IOExample(Dict{Symbol, Any}(:x => "fdeslliwhwkxpnmozniaimxmoxk"), "fdesll"), 
	IOExample(Dict{Symbol, Any}(:x => "azrrgrzjywteyqmcto"), "azrrgr")])
problem_b30 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3 Ames St., Portland, OR 02142"), "3"), 
	IOExample(Dict{Symbol, Any}(:x => "5000 Forbes Ave, Pittsburgh, PA 15213"), "5000"), 
	IOExample(Dict{Symbol, Any}(:x => "77 Massachusetts Ave, Cambridge, MA 02139"), "77"), 
	IOExample(Dict{Symbol, Any}(:x => "3113 Greenfield Ave., Los Angeles, CA 90034"), "3113"), 
	IOExample(Dict{Symbol, Any}(:x => "262 Washington Rd, Princeton, NJ 08540"), "262"), 
	IOExample(Dict{Symbol, Any}(:x => "450 Serra Mall, Stanford, CA 94305"), "450"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Vassar St. 46-4053, Cambridge, MA 02139"), "43"), 
	IOExample(Dict{Symbol, Any}(:x => "47 Foskett St. #2, Cambridge, MA 02144"), "47"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Margaret St. #1, Dorchester, MA 02125"), "43"), 
	IOExample(Dict{Symbol, Any}(:x => "253 Cory Hall, Berkeley, CA 94720"), "253")])
problem_b310 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "yewjw.xbcmpvu.xabuh."), "yewjw.xbcmpvu"), 
	IOExample(Dict{Symbol, Any}(:x => "ximcze.nqldoth.ec."), "ximcze.nqldoth"), 
	IOExample(Dict{Symbol, Any}(:x => "otdomcw.kwza.tul.ejvqlf.q."), "otdomcw.kwza"), 
	IOExample(Dict{Symbol, Any}(:x => "kltxdiq.pllgox.o."), "kltxdiq.pllgox"), 
	IOExample(Dict{Symbol, Any}(:x => "oku.hjc.u.lfmg."), "oku.hjc"), 
	IOExample(Dict{Symbol, Any}(:x => "eozn.fnigxfz.febjce.hkzaexz.q."), "eozn.fnigxfz"), 
	IOExample(Dict{Symbol, Any}(:x => "ewae.e.dmysdox.wbbjscg."), "ewae.e"), 
	IOExample(Dict{Symbol, Any}(:x => "uuvmc.tamamze.sjq.oumbspw.brwdeiu."), "uuvmc.tamamze"), 
	IOExample(Dict{Symbol, Any}(:x => "stghem.smecb.x."), "stghem.smecb"), 
	IOExample(Dict{Symbol, Any}(:x => "xcezlgz.pjjftt.o."), "xcezlgz.pjjftt")])
problem_b311 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "zzi.oqitbwh.gokwqm.qx.jxkx."), "gokwqm.qx.jxkx."), 
	IOExample(Dict{Symbol, Any}(:x => "vuktx.aj.zoeehg."), "zoeehg."), 
	IOExample(Dict{Symbol, Any}(:x => "f.daxrvb.xxuqh."), "xxuqh."), 
	IOExample(Dict{Symbol, Any}(:x => "qjczw.mdi.epmi."), "epmi."), 
	IOExample(Dict{Symbol, Any}(:x => "seysams.k.ebzh."), "ebzh."), 
	IOExample(Dict{Symbol, Any}(:x => "ipwnajf.ricl.exkyjr.md.p."), "exkyjr.md.p."), 
	IOExample(Dict{Symbol, Any}(:x => "vhkjn.d.vyvqs.poacvw."), "vyvqs.poacvw."), 
	IOExample(Dict{Symbol, Any}(:x => "cad.h.jki.uovgo."), "jki.uovgo."), 
	IOExample(Dict{Symbol, Any}(:x => "lajbbsy.wbex.jbkhhvf.gxk.ruaj."), "jbkhhvf.gxk.ruaj."), 
	IOExample(Dict{Symbol, Any}(:x => "on.pt.cvlgz."), "cvlgz.")])
problem_b312 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "xolf.t.hs.glcglsq."), "xolf.T.HS.GLCGLSQ."), 
	IOExample(Dict{Symbol, Any}(:x => "u.xh.wteqiu.qjl."), "u.XH.WTEQIU.QJL."), 
	IOExample(Dict{Symbol, Any}(:x => "g.z."), "g.Z."), 
	IOExample(Dict{Symbol, Any}(:x => "i.kxvo."), "i.KXVO."), 
	IOExample(Dict{Symbol, Any}(:x => "dlqxl.n.v.ocaal."), "dlqxl.N.V.OCAAL."), 
	IOExample(Dict{Symbol, Any}(:x => "eis.t.uqxgue.nc."), "eis.T.UQXGUE.NC."), 
	IOExample(Dict{Symbol, Any}(:x => "atxp.g."), "atxp.G."), 
	IOExample(Dict{Symbol, Any}(:x => "nlyduoe.h.zzezx."), "nlyduoe.H.ZZEZX."), 
	IOExample(Dict{Symbol, Any}(:x => "jctopr.ytvnp.mxwzpaa."), "jctopr.YTVNP.MXWZPAA."), 
	IOExample(Dict{Symbol, Any}(:x => "iidelv.v.jwkgkga."), "iidelv.V.JWKGKGA.")])
problem_b313 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "OCZFQqIzJ"), "OCZFQIJ"), 
	IOExample(Dict{Symbol, Any}(:x => "LuBHrTxxQHP"), "LBHTQHP"), 
	IOExample(Dict{Symbol, Any}(:x => "BFHoHLvmQlx"), "BFHHLQ"), 
	IOExample(Dict{Symbol, Any}(:x => "WzBloJWuK"), "WBJWK"), 
	IOExample(Dict{Symbol, Any}(:x => "RvNujiusziMxu"), "RNM"), 
	IOExample(Dict{Symbol, Any}(:x => "oyZSzJFyPgxx"), "ZSJFP"), 
	IOExample(Dict{Symbol, Any}(:x => "ulbwUPWZgIzwcd"), "UPWZI"), 
	IOExample(Dict{Symbol, Any}(:x => "xctIolovMTt"), "IMT"), 
	IOExample(Dict{Symbol, Any}(:x => "bdSvHKWlOYSJaPAdZIEnIm"), "SHKWOYSJPAZIEI"), 
	IOExample(Dict{Symbol, Any}(:x => "RmOBMqA"), "ROBMA")])
problem_b314 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "qKAmikv"), "ka"), 
	IOExample(Dict{Symbol, Any}(:x => "AIMf"), "aim"), 
	IOExample(Dict{Symbol, Any}(:x => "HgKLCaOejSj"), "hklcos"), 
	IOExample(Dict{Symbol, Any}(:x => "sazjsKqVXLyHy"), "kvxlh"), 
	IOExample(Dict{Symbol, Any}(:x => "etoXMRY"), "xmry"), 
	IOExample(Dict{Symbol, Any}(:x => "WbUSvJwrSkw"), "wusjs"), 
	IOExample(Dict{Symbol, Any}(:x => "IJvOiAwcAzZYy"), "ijoaazy"), 
	IOExample(Dict{Symbol, Any}(:x => "NBxCgGLuo"), "nbcgl"), 
	IOExample(Dict{Symbol, Any}(:x => "uP"), "p"), 
	IOExample(Dict{Symbol, Any}(:x => "sUWqWbaDklSf"), "uwwds")])
problem_b315 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "kBJtUY(KlZojAFG)sj"), "KlZojAFG"), 
	IOExample(Dict{Symbol, Any}(:x => "IeXz(UzVt)Z"), "UzVt"), 
	IOExample(Dict{Symbol, Any}(:x => "OuFCU(rWtGjB)litDFepN"), "rWtGjB"), 
	IOExample(Dict{Symbol, Any}(:x => "pPl(Ffh)kkwSdgd"), "Ffh"), 
	IOExample(Dict{Symbol, Any}(:x => "sSZE(Vwku)YoXoXivD"), "Vwku"), 
	IOExample(Dict{Symbol, Any}(:x => "WwURvy(GBUSPf)Inmu"), "GBUSPf"), 
	IOExample(Dict{Symbol, Any}(:x => "n(qO)rDpzmwKN"), "qO"), 
	IOExample(Dict{Symbol, Any}(:x => "RmAa(UX)vI"), "UX"), 
	IOExample(Dict{Symbol, Any}(:x => "xH(cEiqL)DJFXj"), "cEiqL"), 
	IOExample(Dict{Symbol, Any}(:x => "z(My)ObBA"), "My")])
problem_b316 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "pmmKuq(PhzDY)cDSjrJnr"), "phzdy"), 
	IOExample(Dict{Symbol, Any}(:x => "Bx(gI)Nky"), "gi"), 
	IOExample(Dict{Symbol, Any}(:x => "L(CYQyjL)taS"), "cyqyjl"), 
	IOExample(Dict{Symbol, Any}(:x => "mfGpmfl(Aln)kw"), "aln"), 
	IOExample(Dict{Symbol, Any}(:x => "owAP(kvHgGDCk)NksnMU"), "kvhggdck"), 
	IOExample(Dict{Symbol, Any}(:x => "zDUxyFQ(sYuScose)JHriMPTpq"), "syuscose"), 
	IOExample(Dict{Symbol, Any}(:x => "LDVZpEiS(jHMmCjNs)fbrsv"), "jhmmcjns"), 
	IOExample(Dict{Symbol, Any}(:x => "GMKIFRqua(DFR)vPnn"), "dfr"), 
	IOExample(Dict{Symbol, Any}(:x => "dTlC(ifyH)TWhyxDZ"), "ifyh"), 
	IOExample(Dict{Symbol, Any}(:x => "V(RCBA)rHjrdANU"), "rcba")])
problem_b317 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "z(OtmTx)HlTWQmz"), "OTMTX"), 
	IOExample(Dict{Symbol, Any}(:x => "nMelF(mFL)EboiEJ"), "MFL"), 
	IOExample(Dict{Symbol, Any}(:x => "qxIvr(bxsJthBkb)ch"), "BXSJTHBKB"), 
	IOExample(Dict{Symbol, Any}(:x => "NCorZif(dzOxjp)DgGiKHX"), "DZOXJP"), 
	IOExample(Dict{Symbol, Any}(:x => "faH(kTOKqSWK)AEHz"), "KTOKQSWK"), 
	IOExample(Dict{Symbol, Any}(:x => "z(qAfBaVpj)UA"), "QAFBAVPJ"), 
	IOExample(Dict{Symbol, Any}(:x => "oLIizcWu(qTwS)b"), "QTWS"), 
	IOExample(Dict{Symbol, Any}(:x => "Y(qBnXqfNNu)HdkTDlLZ"), "QBNXQFNNU"), 
	IOExample(Dict{Symbol, Any}(:x => "YG(KmMNLPCe)W"), "KMMNLPCE"), 
	IOExample(Dict{Symbol, Any}(:x => "igBUdS(yLlweY)d"), "YLLWEY")])
problem_b318 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Cj(TPuB)q(Jutt)UT"), "TPuBJutt"), 
	IOExample(Dict{Symbol, Any}(:x => "jRNgR(YlY)Q(tT)K"), "YlYtT"), 
	IOExample(Dict{Symbol, Any}(:x => "Or(AOIhr)Rdo(YYEB)ypLCT"), "AOIhrYYEB"), 
	IOExample(Dict{Symbol, Any}(:x => "J(zdPn)wZ(Lilou)CU"), "zdPnLilou"), 
	IOExample(Dict{Symbol, Any}(:x => "lGK(P)cZg(Sm)n"), "PSm"), 
	IOExample(Dict{Symbol, Any}(:x => "Ty(QtyCw)X(HVu)JT"), "QtyCwHVu"), 
	IOExample(Dict{Symbol, Any}(:x => "OfO(cDGV)NILu(PSyI)LEUr"), "cDGVPSyI"), 
	IOExample(Dict{Symbol, Any}(:x => "Sl(QZsVX)sb(Dq)Kkx"), "QZsVXDq"), 
	IOExample(Dict{Symbol, Any}(:x => "K(suvH)qrA(SEAg)iu"), "suvHSEAg"), 
	IOExample(Dict{Symbol, Any}(:x => "ONv(CkIj)H(snLR)HC"), "CkIjsnLR")])
problem_b319 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "USUI(j)KeJ(Hq)VksiT"), "JHQ"), 
	IOExample(Dict{Symbol, Any}(:x => "Md(OvWn)ycbI(ezX)zUl"), "OVWNEZX"), 
	IOExample(Dict{Symbol, Any}(:x => "YUGOI(OgI)wbq(kuj)zKHl"), "OGIKUJ"), 
	IOExample(Dict{Symbol, Any}(:x => "a(w)zi(nMGNo)AgTjY"), "WNMGNO"), 
	IOExample(Dict{Symbol, Any}(:x => "ZR(rLh)uIthK(ncFU)vQZS"), "RLHNCFU"), 
	IOExample(Dict{Symbol, Any}(:x => "FWNP(ZSB)Vuwj(VQ)sFG"), "ZSBVQ"), 
	IOExample(Dict{Symbol, Any}(:x => "exF(elvwy)MT(r)T"), "ELVWYR"), 
	IOExample(Dict{Symbol, Any}(:x => "ef(a)U(HpQLc)nEN"), "AHPQLC"), 
	IOExample(Dict{Symbol, Any}(:x => "lcMr(GcxKn)zyPjp(S)cpgO"), "GCXKNS"), 
	IOExample(Dict{Symbol, Any}(:x => "SQzhD(l)Lna(dUwK)sEva"), "LDUWK")])
problem_b31 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "3113 Greenfield Ave., Los Angeles, CA 90034"), "Greenfield"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Margaret St. #1, Dorchester, MA 02125"), "Margaret"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Vassar St. 46-4053, Cambridge, MA 02139"), "Vassar"), 
	IOExample(Dict{Symbol, Any}(:x => "262 Washington Rd, Princeton, NJ 08540"), "Washington"), 
	IOExample(Dict{Symbol, Any}(:x => "5000 Forbes Ave, Pittsburgh, PA 15213"), "Forbes"), 
	IOExample(Dict{Symbol, Any}(:x => "77 Massachusetts Ave, Cambridge, MA 02139"), "Massachusetts"), 
	IOExample(Dict{Symbol, Any}(:x => "47 Foskett St. #2, Cambridge, MA 02144"), "Foskett"), 
	IOExample(Dict{Symbol, Any}(:x => "253 Cory Hall, Berkeley, CA 94720"), "Cory"), 
	IOExample(Dict{Symbol, Any}(:x => "450 Serra Mall, Stanford, CA 94305"), "Serra"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Ames St., Portland, OR 02142"), "Ames")])
problem_b320 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "c(Et)tHReC(tQjj)hYv"), "ettqjj"), 
	IOExample(Dict{Symbol, Any}(:x => "OAMzG(wEP)wQx(D)x"), "wepd"), 
	IOExample(Dict{Symbol, Any}(:x => "jFl(EMEb)io(bfGW)MolDn"), "emebbfgw"), 
	IOExample(Dict{Symbol, Any}(:x => "ZpyH(Aqv)tfSTo(QlOX)ZiHEE"), "aqvqlox"), 
	IOExample(Dict{Symbol, Any}(:x => "Kz(u)K(tDfP)afP"), "utdfp"), 
	IOExample(Dict{Symbol, Any}(:x => "RwVg(v)yOTS(w)pG"), "vw"), 
	IOExample(Dict{Symbol, Any}(:x => "PD(Vzq)mR(zCpjw)Lp"), "vzqzcpjw"), 
	IOExample(Dict{Symbol, Any}(:x => "m(h)vsmm(a)zTigV"), "ha"), 
	IOExample(Dict{Symbol, Any}(:x => "IYG(qGSAD)ajeRM(wDsh)CpN"), "qgsadwdsh"), 
	IOExample(Dict{Symbol, Any}(:x => "gHiD(LIkMB)meg(c)xSj"), "likmbc")])
problem_b321 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "qt(tA)ueC(I)S"), "qtueCS"), 
	IOExample(Dict{Symbol, Any}(:x => "y(lc)rzz(oa)hC"), "yrzzhC"), 
	IOExample(Dict{Symbol, Any}(:x => "bQ(Q)ePoL(Tg)gK"), "bQePoLgK"), 
	IOExample(Dict{Symbol, Any}(:x => "V(O)JIIu(DY)Ff"), "VJIIuFf"), 
	IOExample(Dict{Symbol, Any}(:x => "Vw(eP)uYH(Q)ok"), "VwuYHok"), 
	IOExample(Dict{Symbol, Any}(:x => "o(S)tuq(AB)S"), "otuqS"), 
	IOExample(Dict{Symbol, Any}(:x => "p(UM)nS(R)V"), "pnSV"), 
	IOExample(Dict{Symbol, Any}(:x => "K(T)qR(p)aJ"), "KqRaJ"), 
	IOExample(Dict{Symbol, Any}(:x => "Xw(DH)zvi(C)qe"), "Xwzviqe"), 
	IOExample(Dict{Symbol, Any}(:x => "Hy(m)WE(nT)W"), "HyWEW")])
problem_b322 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "p(yE)oVa(I)Co"), "I"), 
	IOExample(Dict{Symbol, Any}(:x => "E(Ds)in(EX)g"), "EX"), 
	IOExample(Dict{Symbol, Any}(:x => "lm(nx)BQU(Ga)H"), "Ga"), 
	IOExample(Dict{Symbol, Any}(:x => "BM(MZ)Kql(Sm)l"), "Sm"), 
	IOExample(Dict{Symbol, Any}(:x => "DJ(fX)EXHs(mb)ng"), "mb"), 
	IOExample(Dict{Symbol, Any}(:x => "v(GN)vIeu(W)a"), "W"), 
	IOExample(Dict{Symbol, Any}(:x => "Tg(G)WVA(GA)j"), "GA"), 
	IOExample(Dict{Symbol, Any}(:x => "mz(iN)glpS(jl)z"), "jl"), 
	IOExample(Dict{Symbol, Any}(:x => "yx(T)YCa(kP)M"), "kP"), 
	IOExample(Dict{Symbol, Any}(:x => "W(t)im(aB)hY"), "aB")])
problem_b323 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "nZB3KUiIUW"), "nZB"), 
	IOExample(Dict{Symbol, Any}(:x => "avfmzxQ3HZDFQJB"), "avfmzxQ"), 
	IOExample(Dict{Symbol, Any}(:x => "VIgHT0PWgasCD"), "VIgHT"), 
	IOExample(Dict{Symbol, Any}(:x => "yWnlQfchU8lLcA"), "yWnlQfchU"), 
	IOExample(Dict{Symbol, Any}(:x => "HgCBXD3csJvqDQV"), "HgCBXD"), 
	IOExample(Dict{Symbol, Any}(:x => "MCCPaN0odY"), "MCCPaN"), 
	IOExample(Dict{Symbol, Any}(:x => "EWC3MPfYf"), "EWC"), 
	IOExample(Dict{Symbol, Any}(:x => "Gus8ahv"), "Gus"), 
	IOExample(Dict{Symbol, Any}(:x => "dkmzSBRaF1uDKd"), "dkmzSBRaF"), 
	IOExample(Dict{Symbol, Any}(:x => "Kiuzs7xpUw"), "Kiuzs")])
problem_b324 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "LmZ4FCQiV"), "FCQiV"), 
	IOExample(Dict{Symbol, Any}(:x => "tHwfnfmzS2iGPQ"), "iGPQ"), 
	IOExample(Dict{Symbol, Any}(:x => "shraAsEG1vavDt"), "vavDt"), 
	IOExample(Dict{Symbol, Any}(:x => "kreJz6pgWG"), "pgWG"), 
	IOExample(Dict{Symbol, Any}(:x => "sWDST1dJZlz"), "dJZlz"), 
	IOExample(Dict{Symbol, Any}(:x => "UOixXm4MaHjUeoH"), "MaHjUeoH"), 
	IOExample(Dict{Symbol, Any}(:x => "zvnEDwJxR8kYvKXq"), "kYvKXq"), 
	IOExample(Dict{Symbol, Any}(:x => "zNm6RngMq"), "RngMq"), 
	IOExample(Dict{Symbol, Any}(:x => "JPghLUBvC4TAzlFEwi"), "TAzlFEwi"), 
	IOExample(Dict{Symbol, Any}(:x => "oUCe3Xub"), "Xub")])
problem_b325 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "rRvuki8rRARN0xXw"), "rRARN"), 
	IOExample(Dict{Symbol, Any}(:x => "qgfQt4hUvW4xQZvWi"), "hUvW"), 
	IOExample(Dict{Symbol, Any}(:x => "lZOIP5aGmlVm3TxXqV"), "aGmlVm"), 
	IOExample(Dict{Symbol, Any}(:x => "nLtOXA2EKnJ1WSBp"), "EKnJ"), 
	IOExample(Dict{Symbol, Any}(:x => "Hasdv5dLh1XOIhzF"), "dLh"), 
	IOExample(Dict{Symbol, Any}(:x => "FAE7dsZji1gKMO"), "dsZji"), 
	IOExample(Dict{Symbol, Any}(:x => "ViZWG9QHSWjr3xgbl"), "QHSWjr"), 
	IOExample(Dict{Symbol, Any}(:x => "YkJM3kXSMN5wqZE"), "kXSMN"), 
	IOExample(Dict{Symbol, Any}(:x => "tZp2YnKS1HKh"), "YnKS"), 
	IOExample(Dict{Symbol, Any}(:x => "TybinS5undWfw3aBb"), "undWfw")])
problem_b326 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "1766ycm7tv"), "1766"), 
	IOExample(Dict{Symbol, Any}(:x => "515788iUeVa"), "515788"), 
	IOExample(Dict{Symbol, Any}(:x => "5772t0VC"), "5772"), 
	IOExample(Dict{Symbol, Any}(:x => "796931CwWPuoP"), "796931"), 
	IOExample(Dict{Symbol, Any}(:x => "25547LplbcfJ"), "25547"), 
	IOExample(Dict{Symbol, Any}(:x => "626OuqMg2c"), "626"), 
	IOExample(Dict{Symbol, Any}(:x => "581509kkEQFJ"), "581509"), 
	IOExample(Dict{Symbol, Any}(:x => "32174R8w5rf"), "32174"), 
	IOExample(Dict{Symbol, Any}(:x => "3944bQK2f"), "3944"), 
	IOExample(Dict{Symbol, Any}(:x => "576Jyk32aQ"), "576")])
problem_b327 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "cAnOQ046885L3JjLu"), "cAnOQ"), 
	IOExample(Dict{Symbol, Any}(:x => "WOGxR914151kdzl"), "WOGxR"), 
	IOExample(Dict{Symbol, Any}(:x => "hlwqEJ275449Tn"), "hlwqEJ"), 
	IOExample(Dict{Symbol, Any}(:x => "HPU955526DPtC"), "HPU"), 
	IOExample(Dict{Symbol, Any}(:x => "cLak966Y65"), "cLak"), 
	IOExample(Dict{Symbol, Any}(:x => "pNxYs521636Zc1Ju"), "pNxYs"), 
	IOExample(Dict{Symbol, Any}(:x => "wtESaN29294hselD3"), "wtESaN"), 
	IOExample(Dict{Symbol, Any}(:x => "eZFF380ny3yg8"), "eZFF"), 
	IOExample(Dict{Symbol, Any}(:x => "bAHds7170qzJW2F"), "bAHds"), 
	IOExample(Dict{Symbol, Any}(:x => "gsQ1140CFNp"), "gsQ")])
problem_b32 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "262 Washington Rd, Princeton, NJ 08540"), "Princeton"), 
	IOExample(Dict{Symbol, Any}(:x => "47 Foskett St. #2, Cambridge, MA 02144"), "Cambridge"), 
	IOExample(Dict{Symbol, Any}(:x => "3113 Greenfield Ave., Los Angeles, CA 90034"), "Los Angeles"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Margaret St. #1, Dorchester, MA 02125"), "Dorchester"), 
	IOExample(Dict{Symbol, Any}(:x => "450 Serra Mall, Stanford, CA 94305"), "Stanford"), 
	IOExample(Dict{Symbol, Any}(:x => "253 Cory Hall, Berkeley, CA 94720"), "Berkeley"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Vassar St. 46-4053, Cambridge, MA 02139"), "Cambridge"), 
	IOExample(Dict{Symbol, Any}(:x => "5000 Forbes Ave, Pittsburgh, PA 15213"), "Pittsburgh"), 
	IOExample(Dict{Symbol, Any}(:x => "77 Massachusetts Ave, Cambridge, MA 02139"), "Cambridge"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Ames St., Portland, OR 02142"), "Portland")])
problem_b33 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "5000 Forbes Ave, Pittsburgh, PA 15213"), "PA"), 
	IOExample(Dict{Symbol, Any}(:x => "77 Massachusetts Ave, Cambridge, MA 02139"), "MA"), 
	IOExample(Dict{Symbol, Any}(:x => "47 Foskett St. #2, Cambridge, MA 02144"), "MA"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Vassar St. 46-4053, Cambridge, MA 02139"), "MA"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Ames St., Portland, OR 02142"), "OR"), 
	IOExample(Dict{Symbol, Any}(:x => "450 Serra Mall, Stanford, CA 94305"), "CA"), 
	IOExample(Dict{Symbol, Any}(:x => "3113 Greenfield Ave., Los Angeles, CA 90034"), "CA"), 
	IOExample(Dict{Symbol, Any}(:x => "253 Cory Hall, Berkeley, CA 94720"), "CA"), 
	IOExample(Dict{Symbol, Any}(:x => "262 Washington Rd, Princeton, NJ 08540"), "NJ"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Margaret St. #1, Dorchester, MA 02125"), "MA")])
problem_b34 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "43 Vassar St. 46-4053, Cambridge, MA 02139"), "02139"), 
	IOExample(Dict{Symbol, Any}(:x => "43 Margaret St. #1, Dorchester, MA 02125"), "02125"), 
	IOExample(Dict{Symbol, Any}(:x => "3113 Greenfield Ave., Los Angeles, CA 90034"), "90034"), 
	IOExample(Dict{Symbol, Any}(:x => "262 Washington Rd, Princeton, NJ 08540"), "08540"), 
	IOExample(Dict{Symbol, Any}(:x => "47 Foskett St. #2, Cambridge, MA 02144"), "02144"), 
	IOExample(Dict{Symbol, Any}(:x => "5000 Forbes Ave, Pittsburgh, PA 15213"), "15213"), 
	IOExample(Dict{Symbol, Any}(:x => "450 Serra Mall, Stanford, CA 94305"), "94305"), 
	IOExample(Dict{Symbol, Any}(:x => "77 Massachusetts Ave, Cambridge, MA 02139"), "02139"), 
	IOExample(Dict{Symbol, Any}(:x => "3 Ames St., Portland, OR 02142"), "02142"), 
	IOExample(Dict{Symbol, Any}(:x => "253 Cory Hall, Berkeley, CA 94720"), "94720")])
problem_b35 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Joanie Faas"), "J Faas"), 
	IOExample(Dict{Symbol, Any}(:x => "Oma Cornelison"), "O Cornelison"), 
	IOExample(Dict{Symbol, Any}(:x => "Yoshua Bengio"), "Y Bengio"), 
	IOExample(Dict{Symbol, Any}(:x => "Annita Nicely"), "A Nicely"), 
	IOExample(Dict{Symbol, Any}(:x => "Ian Goodfellow"), "I Goodfellow"), 
	IOExample(Dict{Symbol, Any}(:x => "Marin Lorentzen"), "M Lorentzen"), 
	IOExample(Dict{Symbol, Any}(:x => "James Brown"), "J Brown"), 
	IOExample(Dict{Symbol, Any}(:x => "David Beckham"), "D Beckham"), 
	IOExample(Dict{Symbol, Any}(:x => "Verlene Ottley"), "V Ottley"), 
	IOExample(Dict{Symbol, Any}(:x => "Daniele Dunetti"), "D Dunetti")])
problem_b36 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Daniele Dunetti"), "DD"), 
	IOExample(Dict{Symbol, Any}(:x => "Yoshua Bengio"), "YB"), 
	IOExample(Dict{Symbol, Any}(:x => "James Brown"), "JB"), 
	IOExample(Dict{Symbol, Any}(:x => "Marin Lorentzen"), "ML"), 
	IOExample(Dict{Symbol, Any}(:x => "David Beckham"), "DB"), 
	IOExample(Dict{Symbol, Any}(:x => "Annita Nicely"), "AN"), 
	IOExample(Dict{Symbol, Any}(:x => "Ian Goodfellow"), "IG"), 
	IOExample(Dict{Symbol, Any}(:x => "Oma Cornelison"), "OC"), 
	IOExample(Dict{Symbol, Any}(:x => "Verlene Ottley"), "VO"), 
	IOExample(Dict{Symbol, Any}(:x => "Joanie Faas"), "JF")])
problem_b37 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<numpy>"), "numpy"), 
	IOExample(Dict{Symbol, Any}(:x => "<stdlib>"), "stdlib"), 
	IOExample(Dict{Symbol, Any}(:x => "<system>"), "system"), 
	IOExample(Dict{Symbol, Any}(:x => "<sys.h>"), "sys"), 
	IOExample(Dict{Symbol, Any}(:x => "<iostream>"), "iostream"), 
	IOExample(Dict{Symbol, Any}(:x => "<stdio.h>"), "stdio"), 
	IOExample(Dict{Symbol, Any}(:x => "<os>"), "os"), 
	IOExample(Dict{Symbol, Any}(:x => "<math>"), "math"), 
	IOExample(Dict{Symbol, Any}(:x => "<malloc.h>"), "malloc"), 
	IOExample(Dict{Symbol, Any}(:x => "<main>"), "main")])
problem_b38 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<iostream>"), "IOSTREAM"), 
	IOExample(Dict{Symbol, Any}(:x => "<numpy>"), "NUMPY"), 
	IOExample(Dict{Symbol, Any}(:x => "<stdlib>"), "STDLIB"), 
	IOExample(Dict{Symbol, Any}(:x => "<system>"), "SYSTEM"), 
	IOExample(Dict{Symbol, Any}(:x => "<os>"), "OS"), 
	IOExample(Dict{Symbol, Any}(:x => "<main>"), "MAIN"), 
	IOExample(Dict{Symbol, Any}(:x => "<stdio.h>"), "STDIO"), 
	IOExample(Dict{Symbol, Any}(:x => "<malloc.h>"), "MALLOC"), 
	IOExample(Dict{Symbol, Any}(:x => "<math>"), "MATH"), 
	IOExample(Dict{Symbol, Any}(:x => "<sys.h>"), "SYS")])
problem_b39 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "#include <system>"), "system"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <sys.h>"), "sys"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <os>"), "os"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <malloc.h>"), "malloc"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <stdlib>"), "stdlib"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <stdio.h>"), "stdio"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <iostream>"), "iostream"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <numpy>"), "numpy"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <main>"), "main"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <math>"), "math")])
problem_b3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "alice"), "A"), 
	IOExample(Dict{Symbol, Any}(:x => "edith"), "E"), 
	IOExample(Dict{Symbol, Any}(:x => "thomas"), "T"), 
	IOExample(Dict{Symbol, Any}(:x => "paul"), "P"), 
	IOExample(Dict{Symbol, Any}(:x => "laura"), "L"), 
	IOExample(Dict{Symbol, Any}(:x => "chris"), "C"), 
	IOExample(Dict{Symbol, Any}(:x => "james"), "J"), 
	IOExample(Dict{Symbol, Any}(:x => "sarah"), "S"), 
	IOExample(Dict{Symbol, Any}(:x => "nigel"), "N"), 
	IOExample(Dict{Symbol, Any}(:x => "charles"), "C")])
problem_b40 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "#include <iostream>"), "IOSTREAM"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <math>"), "MATH"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <numpy>"), "NUMPY"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <malloc.h>"), "MALLOC"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <stdlib>"), "STDLIB"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <stdio.h>"), "STDIO"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <sys.h>"), "SYS"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <main>"), "MAIN"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <os>"), "OS"), 
	IOExample(Dict{Symbol, Any}(:x => "#include <system>"), "SYSTEM")])
problem_b41 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Mr Patrick Starfish"), "Patrick Starfish"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Daenerys Targaryen"), "Daenerys Targaryen"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Severus Snape"), "Severus Snape"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Ray Stantz"), "Ray Stantz"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Spongebob Squarepants"), "Spongebob Squarepants"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Montgomery Montgomery"), "Montgomery Montgomery"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Harry Potter"), "Harry Potter"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Hermione Granger"), "Hermione Granger"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Bernard Rieux"), "Bernard Rieux"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Minerva Mcgonagall"), "Minerva Mcgonagall")])
problem_b42 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Dr Bernard Rieux"), "Dr Rieux"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Ray Stantz"), "Dr Stantz"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Daenerys Targaryen"), "Ms Targaryen"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Severus Snape"), "Professor Snape"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Harry Potter"), "Mr Potter"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Minerva Mcgonagall"), "Professor Mcgonagall"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Montgomery Montgomery"), "Dr Montgomery"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Spongebob Squarepants"), "Mr Squarepants"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Patrick Starfish"), "Mr Starfish"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Hermione Granger"), "Ms Granger")])
problem_b43 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Dr Bernard Rieux"), "Dr"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Daenerys Targaryen"), "Ms"), 
	IOExample(Dict{Symbol, Any}(:x => "Ms Hermione Granger"), "Ms"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Ray Stantz"), "Dr"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Minerva Mcgonagall"), "Professor"), 
	IOExample(Dict{Symbol, Any}(:x => "Professor Severus Snape"), "Professor"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Harry Potter"), "Mr"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Patrick Starfish"), "Mr"), 
	IOExample(Dict{Symbol, Any}(:x => "Mr Spongebob Squarepants"), "Mr"), 
	IOExample(Dict{Symbol, Any}(:x => "Dr Montgomery Montgomery"), "Dr")])
problem_b44 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "MR HARRY POTTER"), "Harry Potter"), 
	IOExample(Dict{Symbol, Any}(:x => "MR PATRICK STARFISH"), "Patrick Starfish"), 
	IOExample(Dict{Symbol, Any}(:x => "MS DAENERYS TARGARYEN"), "Daenerys Targaryen"), 
	IOExample(Dict{Symbol, Any}(:x => "DR BERNARD RIEUX"), "Bernard Rieux"), 
	IOExample(Dict{Symbol, Any}(:x => "PROFESSOR MINERVA MCGONAGALL"), "Minerva McGonagall"), 
	IOExample(Dict{Symbol, Any}(:x => "PROFESSOR SEVERUS SNAPE"), "Severus Snape"), 
	IOExample(Dict{Symbol, Any}(:x => "MR SPONGEBOB SQUAREPANTS"), "Spongebob Squarepants"), 
	IOExample(Dict{Symbol, Any}(:x => "DR RAY STANTZ"), "Ray Stantz"), 
	IOExample(Dict{Symbol, Any}(:x => "DR MONTGOMERY MONTGOMERY"), "Montgomery Montgomery"), 
	IOExample(Dict{Symbol, Any}(:x => "MS HERMIONE GRANGER"), "Hermione Granger")])
problem_b45 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "PROFESSOR MINERVA MCGONAGALL"), "Professor Mcgonagall"), 
	IOExample(Dict{Symbol, Any}(:x => "DR RAY STANTZ"), "Dr Stantz"), 
	IOExample(Dict{Symbol, Any}(:x => "DR BERNARD RIEUX"), "Dr Rieux"), 
	IOExample(Dict{Symbol, Any}(:x => "DR MONTGOMERY MONTGOMERY"), "Dr Montgomery"), 
	IOExample(Dict{Symbol, Any}(:x => "MS HERMIONE GRANGER"), "Ms Granger"), 
	IOExample(Dict{Symbol, Any}(:x => "PROFESSOR SEVERUS SNAPE"), "Professor Snape"), 
	IOExample(Dict{Symbol, Any}(:x => "MR SPONGEBOB SQUAREPANTS"), "Mr Squarepants"), 
	IOExample(Dict{Symbol, Any}(:x => "MR HARRY POTTER"), "Mr Potter"), 
	IOExample(Dict{Symbol, Any}(:x => "MR PATRICK STARFISH"), "Mr Starfish"), 
	IOExample(Dict{Symbol, Any}(:x => "MS DAENERYS TARGARYEN"), "Ms Targaryen")])
problem_b46 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "of which sugars 2.5g 0.6g"), "2.5g"), 
	IOExample(Dict{Symbol, Any}(:x => "Fibre 3.5g 0.9g"), "0.9g"), 
	IOExample(Dict{Symbol, Any}(:x => "Energy kCal 708kCal 177kCal"), "708kCal"), 
	IOExample(Dict{Symbol, Any}(:x => "Salt 0.1g Trace"), "0.1g"), 
	IOExample(Dict{Symbol, Any}(:x => "Sodium N/A N/A"), "N/A"), 
	IOExample(Dict{Symbol, Any}(:x => "of which saturates 5.6g 1.4g"), "5.6g"), 
	IOExample(Dict{Symbol, Any}(:x => "Protein 17.0g 4.3g"), "17.0g"), 
	IOExample(Dict{Symbol, Any}(:x => "Fat 69.0g 17.0g"), "69.0g"), 
	IOExample(Dict{Symbol, Any}(:x => "Energy kJ 2,923kJ 731kJ"), "2,923kJ"), 
	IOExample(Dict{Symbol, Any}(:x => "Carbohydrate 3.1g 0.8g"), "3.1g")])
problem_b47 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "thOMas"), "thomas"), 
	IOExample(Dict{Symbol, Any}(:x => "saRAh"), "sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "niGEl"), "nigel"), 
	IOExample(Dict{Symbol, Any}(:x => "alICe"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "chRIs"), "chris"), 
	IOExample(Dict{Symbol, Any}(:x => "chARleS"), "charles"), 
	IOExample(Dict{Symbol, Any}(:x => "jaMEs"), "james"), 
	IOExample(Dict{Symbol, Any}(:x => "paUL"), "paul"), 
	IOExample(Dict{Symbol, Any}(:x => "laURa"), "laura"), 
	IOExample(Dict{Symbol, Any}(:x => "edITh"), "edith")])
problem_b48 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "alice"), "alICe"), 
	IOExample(Dict{Symbol, Any}(:x => "james"), "jaMEs"), 
	IOExample(Dict{Symbol, Any}(:x => "charles"), "chARleS"), 
	IOExample(Dict{Symbol, Any}(:x => "sarah"), "saRAh"), 
	IOExample(Dict{Symbol, Any}(:x => "chris"), "chRIs"), 
	IOExample(Dict{Symbol, Any}(:x => "nigel"), "niGEl"), 
	IOExample(Dict{Symbol, Any}(:x => "thomas"), "thOMas"), 
	IOExample(Dict{Symbol, Any}(:x => "edith"), "edITh"), 
	IOExample(Dict{Symbol, Any}(:x => "paul"), "paUL"), 
	IOExample(Dict{Symbol, Any}(:x => "laura"), "laURa")])
problem_b49 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "16,079 inferences, 0.003 CPU in 0.003 seconds (95% CPU, 5842660 Lips)"), "16,079"), 
	IOExample(Dict{Symbol, Any}(:x => "39,258 inferences, 0.007 CPU in 0.008 seconds (85% CPU, 5972615 Lips)"), "39,258"), 
	IOExample(Dict{Symbol, Any}(:x => "12,111 inferences, 0.002 CPU in 0.002 seconds (95% CPU, 6255682 Lips)"), "12,111"), 
	IOExample(Dict{Symbol, Any}(:x => "35,695 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6902920 Lips)"), "35,695"), 
	IOExample(Dict{Symbol, Any}(:x => "514,102 inferences, 0.051 CPU in 0.059 seconds (86% CPU, 10154499 Lips)"), "514,102"), 
	IOExample(Dict{Symbol, Any}(:x => "215,282,111 inferences, 23.671 CPU in 24.283 seconds (97% CPU, 9094687 Lips)"), "215,282,111"), 
	IOExample(Dict{Symbol, Any}(:x => "9,675,636 inferences, 0.903 CPU in 0.929 seconds (97% CPU, 10718278 Lips)"), "9,675,636"), 
	IOExample(Dict{Symbol, Any}(:x => "5,860 inferences, 0.001 CPU in 0.001 seconds (98% CPU, 6475138 Lips)"), "5,860"), 
	IOExample(Dict{Symbol, Any}(:x => "35,698 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6854455 Lips)"), "35,698"), 
	IOExample(Dict{Symbol, Any}(:x => "1,085 inferences, 0.000 CPU in 0.000 seconds (91% CPU, 4254902 Lips)"), "1,085")])
problem_b4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "thomas"), "Thomas"), 
	IOExample(Dict{Symbol, Any}(:x => "chris"), "Chris"), 
	IOExample(Dict{Symbol, Any}(:x => "jozie"), "Jozie"), 
	IOExample(Dict{Symbol, Any}(:x => "james"), "James"), 
	IOExample(Dict{Symbol, Any}(:x => "amy"), "Amy"), 
	IOExample(Dict{Symbol, Any}(:x => "charles"), "Charles"), 
	IOExample(Dict{Symbol, Any}(:x => "ben"), "Ben"), 
	IOExample(Dict{Symbol, Any}(:x => "paul"), "Paul"), 
	IOExample(Dict{Symbol, Any}(:x => "frank"), "Frank"), 
	IOExample(Dict{Symbol, Any}(:x => "laura"), "Laura")])
problem_b50 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "215,282,111 inferences, 23.671 CPU in 24.283 seconds (97% CPU, 9094687 Lips)"), "23.671"), 
	IOExample(Dict{Symbol, Any}(:x => "1,085 inferences, 0.000 CPU in 0.000 seconds (91% CPU, 4254902 Lips)"), "0.000"), 
	IOExample(Dict{Symbol, Any}(:x => "5,860 inferences, 0.001 CPU in 0.001 seconds (98% CPU, 6475138 Lips)"), "0.001"), 
	IOExample(Dict{Symbol, Any}(:x => "12,111 inferences, 0.002 CPU in 0.002 seconds (95% CPU, 6255682 Lips)"), "0.002"), 
	IOExample(Dict{Symbol, Any}(:x => "35,698 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6854455 Lips)"), "0.005"), 
	IOExample(Dict{Symbol, Any}(:x => "9,675,636 inferences, 0.903 CPU in 0.929 seconds (97% CPU, 10718278 Lips)"), "0.903"), 
	IOExample(Dict{Symbol, Any}(:x => "35,695 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6902920 Lips)"), "0.005"), 
	IOExample(Dict{Symbol, Any}(:x => "39,258 inferences, 0.007 CPU in 0.008 seconds (85% CPU, 5972615 Lips)"), "0.007"), 
	IOExample(Dict{Symbol, Any}(:x => "514,102 inferences, 0.051 CPU in 0.059 seconds (86% CPU, 10154499 Lips)"), "0.051"), 
	IOExample(Dict{Symbol, Any}(:x => "16,079 inferences, 0.003 CPU in 0.003 seconds (95% CPU, 5842660 Lips)"), "0.003")])
problem_b51 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "514,102 inferences, 0.051 CPU in 0.059 seconds (86% CPU, 10154499 Lips)"), "0.059"), 
	IOExample(Dict{Symbol, Any}(:x => "39,258 inferences, 0.007 CPU in 0.008 seconds (85% CPU, 5972615 Lips)"), "0.008"), 
	IOExample(Dict{Symbol, Any}(:x => "1,085 inferences, 0.000 CPU in 0.000 seconds (91% CPU, 4254902 Lips)"), "0.000"), 
	IOExample(Dict{Symbol, Any}(:x => "35,695 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6902920 Lips)"), "0.006"), 
	IOExample(Dict{Symbol, Any}(:x => "5,860 inferences, 0.001 CPU in 0.001 seconds (98% CPU, 6475138 Lips)"), "0.001"), 
	IOExample(Dict{Symbol, Any}(:x => "12,111 inferences, 0.002 CPU in 0.002 seconds (95% CPU, 6255682 Lips)"), "0.002"), 
	IOExample(Dict{Symbol, Any}(:x => "35,698 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6854455 Lips)"), "0.006"), 
	IOExample(Dict{Symbol, Any}(:x => "215,282,111 inferences, 23.671 CPU in 24.283 seconds (97% CPU, 9094687 Lips)"), "24.283"), 
	IOExample(Dict{Symbol, Any}(:x => "9,675,636 inferences, 0.903 CPU in 0.929 seconds (97% CPU, 10718278 Lips)"), "0.929"), 
	IOExample(Dict{Symbol, Any}(:x => "16,079 inferences, 0.003 CPU in 0.003 seconds (95% CPU, 5842660 Lips)"), "0.003")])
problem_b52 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "12,111 inferences, 0.002 CPU in 0.002 seconds (95% CPU, 6255682 Lips)"), "6255682"), 
	IOExample(Dict{Symbol, Any}(:x => "16,079 inferences, 0.003 CPU in 0.003 seconds (95% CPU, 5842660 Lips)"), "5842660"), 
	IOExample(Dict{Symbol, Any}(:x => "39,258 inferences, 0.007 CPU in 0.008 seconds (85% CPU, 5972615 Lips)"), "5972615"), 
	IOExample(Dict{Symbol, Any}(:x => "35,698 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6854455 Lips)"), "6854455"), 
	IOExample(Dict{Symbol, Any}(:x => "215,282,111 inferences, 23.671 CPU in 24.283 seconds (97% CPU, 9094687 Lips)"), "9094687"), 
	IOExample(Dict{Symbol, Any}(:x => "514,102 inferences, 0.051 CPU in 0.059 seconds (86% CPU, 10154499 Lips)"), "10154499"), 
	IOExample(Dict{Symbol, Any}(:x => "35,695 inferences, 0.005 CPU in 0.006 seconds (82% CPU, 6902920 Lips)"), "6902920"), 
	IOExample(Dict{Symbol, Any}(:x => "1,085 inferences, 0.000 CPU in 0.000 seconds (91% CPU, 4254902 Lips)"), "4254902"), 
	IOExample(Dict{Symbol, Any}(:x => "9,675,636 inferences, 0.903 CPU in 0.929 seconds (97% CPU, 10718278 Lips)"), "10718278"), 
	IOExample(Dict{Symbol, Any}(:x => "5,860 inferences, 0.001 CPU in 0.001 seconds (98% CPU, 6475138 Lips)"), "6475138")])
problem_b53 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;1,633,000</strong>"), "1,633,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;3,000</strong>"), "3,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;133,000</strong>"), "133,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;625,000</strong>"), "625,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;635,000</strong>"), "635,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;2,950,000</strong>"), "2,950,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;775,000</strong>"), "775,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;33,000</strong>"), "33,000"), 
	IOExample(Dict{Symbol, Any}(:x => "<strong>&pound;633,000</strong>"), "633,000")])
problem_b54 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"small.jpg\">"), "jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"meme.gif\">"), "gif"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"stoic.jpg\">"), "jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"help.jpg\">"), "jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"flamingo.jpg\">"), "jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"no.png\">"), "png"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"yes.png\">"), "png"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"sad.jpg\">"), "jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"smiley.gif\">"), "gif"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"cow.gif\">"), "gif")])
problem_b55 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"yes.png\">"), "yes.png"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"cow.gif\">"), "cow.gif"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"sad.jpg\">"), "sad.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"stoic.jpg\">"), "stoic.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"flamingo.jpg\">"), "flamingo.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"smiley.gif\">"), "smiley.gif"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"small.jpg\">"), "small.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"no.png\">"), "no.png"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"help.jpg\">"), "help.jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "<img src=\"meme.gif\">"), "meme.gif")])
problem_b56 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "www.independent.co.uk"), "independent.co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "www.corriere.it"), "corriere.it"), 
	IOExample(Dict{Symbol, Any}(:x => "www.bbc.co.uk"), "bbc.co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "www.bild.de"), "bild.de"), 
	IOExample(Dict{Symbol, Any}(:x => "www.telegraph.co.uk"), "telegraph.co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "www.elpais.com"), "elpais.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.washingtonpost.com"), "washingtonpost.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.nytimes.com"), "nytimes.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.theguardian.com"), "theguardian.com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.lemonde.fr"), "lemonde.fr")])
problem_b57 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "www.lemonde.fr"), "fr"), 
	IOExample(Dict{Symbol, Any}(:x => "www.washingtonpost.com"), "com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.theguardian.com"), "com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.elpais.com"), "com"), 
	IOExample(Dict{Symbol, Any}(:x => "www.bbc.co.uk"), "co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "www.corriere.it"), "it"), 
	IOExample(Dict{Symbol, Any}(:x => "www.telegraph.co.uk"), "co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "www.bild.de"), "de"), 
	IOExample(Dict{Symbol, Any}(:x => "www.independent.co.uk"), "co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "www.nytimes.com"), "com")])
problem_b58 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"google.com\">search</a>"), "google.com"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"html_images.asp\">HTML Images</a>"), "html_images.asp"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"url\">text</a>"), "url"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"bbc.co.uk\">bbc</a>"), "bbc.co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"url\">link text</a>"), "url"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"https://www.w3schools.com/\">Visit W3Schools!</a>"), "https://www.w3schools.com/"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"homepage\">link text</a>"), "homepage"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"default.asp\">HTML tutorial</a>"), "default.asp"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"bbc.co.uk\">news</a>"), "bbc.co.uk"), 
	IOExample(Dict{Symbol, Any}(:x => "<a href=\"/html/default.asp\">HTML tutorial</a>"), "/html/default.asp")])
problem_b59 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Gerson Zaverucha, Vitor Santos Costa, Aline Paes:"), "Zaverucha, Santos Costa, Paes"), 
	IOExample(Dict{Symbol, Any}(:x => "Paolo Frasconi, Francesca A. Lisi:"), "Frasconi, Lisi"), 
	IOExample(Dict{Symbol, Any}(:x => "Katsumi Inoue, Hayato Ohwada, Akihiro Yamamoto:"), "Inoue, Ohwada, Yamamoto"), 
	IOExample(Dict{Symbol, Any}(:x => "Luc De Raedt:"), "De Raedt"), 
	IOExample(Dict{Symbol, Any}(:x => "Jesse Davis, Jan Ramon:"), "Davis, Ramon"), 
	IOExample(Dict{Symbol, Any}(:x => "James Cussens, Alessandra Russo:"), "Cussens, Russo"), 
	IOExample(Dict{Symbol, Any}(:x => "Hendrik Blockeel, Jan Ramon, Jude W. Shavlik, Prasad Tadepalli:"), "Blockeel, Ramon, Shavlik, Tadepalli"), 
	IOExample(Dict{Symbol, Any}(:x => "Fabrizio Riguzzi, Filip Zelezny:"), "Riguzzi, Zelezny"), 
	IOExample(Dict{Symbol, Any}(:x => "Stephen Muggleton, Alireza Tamaddoni-Nezhad, Francesca A. Lisi:"), "Muggleton, Tamaddoni-Nezhad, Lisi"), 
	IOExample(Dict{Symbol, Any}(:x => "Filip Zelezny, Nada Lavrac:"), "Zelezny, Lavrac")])
problem_b5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "chris."), "chris"), 
	IOExample(Dict{Symbol, Any}(:x => "james."), "james"), 
	IOExample(Dict{Symbol, Any}(:x => "edward."), "edward"), 
	IOExample(Dict{Symbol, Any}(:x => "edwin."), "edwin"), 
	IOExample(Dict{Symbol, Any}(:x => "amelia."), "amelia"), 
	IOExample(Dict{Symbol, Any}(:x => "charles."), "charles"), 
	IOExample(Dict{Symbol, Any}(:x => "max."), "max"), 
	IOExample(Dict{Symbol, Any}(:x => "thomas."), "thomas"), 
	IOExample(Dict{Symbol, Any}(:x => "tom."), "tom"), 
	IOExample(Dict{Symbol, Any}(:x => "paul."), "paul")])
problem_b60 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Katsumi Inoue, Hayato Ohwada, Akihiro Yamamoto:"), "K Inoue, H Ohwada, A Yamamoto"), 
	IOExample(Dict{Symbol, Any}(:x => "James Cussens, Alessandra Russo:"), "J Cussens, A Russo"), 
	IOExample(Dict{Symbol, Any}(:x => "Hendrik Blockeel, Jan Ramon, Jude W. Shavlik, Prasad Tadepalli:"), "H Blockeel, J Ramon, J Shavlik, P Tadepalli"), 
	IOExample(Dict{Symbol, Any}(:x => "Gerson Zaverucha, Vitor Santos Costa, Aline Paes:"), "G Zaverucha, V Santos Costa, A Paes"), 
	IOExample(Dict{Symbol, Any}(:x => "Filip Zelezny, Nada Lavrac:"), "F Zelezny, N Lavrac"), 
	IOExample(Dict{Symbol, Any}(:x => "Stephen Muggleton, Alireza Tamaddoni-Nezhad, Francesca A. Lisi:"), "S Muggleton, A Tamaddoni-Nezhad, F Lisi"), 
	IOExample(Dict{Symbol, Any}(:x => "Luc De Raedt:"), "L De Raedt"), 
	IOExample(Dict{Symbol, Any}(:x => "Jesse Davis, Jan Ramon:"), "Davis, Ramon"), 
	IOExample(Dict{Symbol, Any}(:x => "Fabrizio Riguzzi, Filip Zelezny:"), "F Riguzzi, F Zelezny"), 
	IOExample(Dict{Symbol, Any}(:x => "Paolo Frasconi, Francesca A. Lisi:"), "P Frasconi, F Lisi")])
problem_b61 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "ILP 2014"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "ILP 2008"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "ILP 2012"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "ILP 2016"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "ILP 2013"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "ILP 2007"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "ILP 2009"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "ILP 2010"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "ILP 2011"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "ILP 2015")])
problem_b62 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "Windsor Great Park"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "Prague"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "Leuven"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "Nancy"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "London"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "Florence"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "Dubrovnik"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "Corvallis"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "Kyoto"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "Rio de Janeiro")])
problem_b63 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "2011"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "2010"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "2007"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "2013"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "2009"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "2012"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "2014"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "2008"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "2015"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "2016")])
problem_b64 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "Belgium"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "UK"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "Croatia"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "Japan"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "Brazil"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "Czech Republic"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "USA"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "UK")])
problem_b65 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "September"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "June"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "September"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "September"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "July"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "August"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "August"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "September"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "June"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "August")])
problem_b66 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "-9-1--345835"), "91345835"), 
	IOExample(Dict{Symbol, Any}(:x => "-4---13-54---82-"), "4135482"), 
	IOExample(Dict{Symbol, Any}(:x => "5----"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "5-79---5--24-"), "579524"), 
	IOExample(Dict{Symbol, Any}(:x => "-3-6--0--270-"), "360270"), 
	IOExample(Dict{Symbol, Any}(:x => "4---5----9"), "459"), 
	IOExample(Dict{Symbol, Any}(:x => "-075--3-474-"), "0753474"), 
	IOExample(Dict{Symbol, Any}(:x => "-9--640019"), "9640019"), 
	IOExample(Dict{Symbol, Any}(:x => "-1---7266"), "17266"), 
	IOExample(Dict{Symbol, Any}(:x => "-1-0"), "10")])
problem_b67 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2015\">24. IJCAI 2015: Buenos Aires, Argentina</h2>"), "2015"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2017\">26. IJCAI 2017: Melbourne, VIC, Australia</h2>"), "2017"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2013\">23. IJCAI 2013: Beijing, China</h2>"), "2013"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2005\">19. IJCAI 2005: Edinburgh, Scotland, UK</h2>"), "2005"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2007\">20. IJCAI 2007: Hyderabad, India</h2>"), "2007"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2009\">21. IJCAI 2009: Pasadena, California, USA</h2>"), "2009"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2001\">17. IJCAI 2001: Seattle, USA</h2>"), "2001"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2003\">18. IJCAI 2003: Acapulco, Mexico</h2>"), "2003"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2011\">22. IJCAI 2011: Barcelona, Catalonia, Spain</h2>"), "2011"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2016\">25. IJCAI 2016: New York, NY, USA</h2>"), "2016")])
problem_b68 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2001\">17. IJCAI 2001: Seattle, USA</h2>"), "Seattle"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2013\">23. IJCAI 2013: Beijing, China</h2>"), "Beijing"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2011\">22. IJCAI 2011: Barcelona, Catalonia, Spain</h2>"), "Barcelona"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2003\">18. IJCAI 2003: Acapulco, Mexico</h2>"), "Acapulco"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2017\">26. IJCAI 2017: Melbourne, VIC, Australia</h2>"), "Melbourne"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2005\">19. IJCAI 2005: Edinburgh, Scotland, UK</h2>"), "Edinburgh"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2009\">21. IJCAI 2009: Pasadena, California, USA</h2>"), "Pasadena"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2015\">24. IJCAI 2015: Buenos Aires, Argentina</h2>"), "Buenos Aires"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2016\">25. IJCAI 2016: New York, NY, USA</h2>"), "New York"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2007\">20. IJCAI 2007: Hyderabad, India</h2>"), "Hyderabad")])
problem_b69 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2007\">20. IJCAI 2007: Hyderabad, India</h2>"), "India"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2005\">19. IJCAI 2005: Edinburgh, Scotland, UK</h2>"), "UK"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2001\">17. IJCAI 2001: Seattle, USA</h2>"), "USA"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2016\">25. IJCAI 2016: New York, NY, USA</h2>"), "USA"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2017\">26. IJCAI 2017: Melbourne, VIC, Australia</h2>"), "Australia"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2013\">23. IJCAI 2013: Beijing, China</h2>"), "China"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2011\">22. IJCAI 2011: Barcelona, Catalonia, Spain</h2>"), "Spain"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2003\">18. IJCAI 2003: Acapulco, Mexico</h2>"), "Mexico"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2009\">21. IJCAI 2009: Pasadena, California, USA</h2>"), "USA"), 
	IOExample(Dict{Symbol, Any}(:x => "<h2 id=\"2015\">24. IJCAI 2015: Buenos Aires, Argentina</h2>"), "Argentina")])
problem_b6 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "David Beckham"), "Beckham"), 
	IOExample(Dict{Symbol, Any}(:x => "Annita Nicely"), "Nicely"), 
	IOExample(Dict{Symbol, Any}(:x => "Tim Howard"), "Howard"), 
	IOExample(Dict{Symbol, Any}(:x => "Oma Cornelison"), "Cornelison"), 
	IOExample(Dict{Symbol, Any}(:x => "Marin Lorentzen"), "Lorentzen"), 
	IOExample(Dict{Symbol, Any}(:x => "James Brown"), "Brown"), 
	IOExample(Dict{Symbol, Any}(:x => "David Batty"), "Batty"), 
	IOExample(Dict{Symbol, Any}(:x => "Micheal Owen"), "Owen"), 
	IOExample(Dict{Symbol, Any}(:x => "Verlene Ottley"), "Ottley"), 
	IOExample(Dict{Symbol, Any}(:x => "Joanie Faas"), "Faas")])
problem_b70 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "ILP 2016, London, UK, September 4-6, 2016"), "September, 2016"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2009, Leuven, Belgium, July 02-04, 2009"), "July, 2009"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2007, Corvallis, OR, USA, June 19-21, 2007"), "June, 2007"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2013, Rio de Janeiro, Brazil, August 28-30, 2013"), "August, 2013"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2011, Windsor Great Park, UK, July 31 - August 3, 2011"), "July-August, 2011"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2014, Nancy, France, September 14-16, 2014"), "September, 2014"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2010, Florence, Italy, June 27-30, 2010"), "June, 2010"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2015, Kyoto, Japan, August 20-22, 2015"), "August, 2015"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2008, Prague, Czech Republic, September 10-12, 2008"), "September, 2008"), 
	IOExample(Dict{Symbol, Any}(:x => "ILP 2012, Dubrovnik, Croatia, September 17-19, 2012"), "September, 2012")])
problem_b71 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:5Wo7vtVNx8Hz2L9CSf7tKd"), "5Wo7vtVNx8Hz2L9CSf7tKd"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:6JYxLv2GGPaZDkyJaHSQJY"), "6JYxLv2GGPaZDkyJaHSQJY"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:6jRAiWrKhURIcFGPEeMnsD"), "6jRAiWrKhURIcFGPEeMnsD"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:2WjkOw9JVbvAdKKUaGs3OK"), "2WjkOw9JVbvAdKKUaGs3OK"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:3BiIPNWmMeJAK9iwEFTeDX"), "3BiIPNWmMeJAK9iwEFTeDX"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:2MWyl7mj5wM75B3t3D5z4E"), "2MWyl7mj5wM75B3t3D5z4E"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:1OxcIUqVmVYxT6427tbhDW"), "1OxcIUqVmVYxT6427tbhDW"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:6wMTeVootJ8RdCLNOZy5Km"), "6wMTeVootJ8RdCLNOZy5Km"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:5An6plSS4zk3mLQyA3IoFr"), "5An6plSS4zk3mLQyA3IoFr"), 
	IOExample(Dict{Symbol, Any}(:x => "spotify:track:6HJujxcjMmVZhd8z5EpPri"), "6HJujxcjMmVZhd8z5EpPri")])
problem_b72 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Alex Rodriguez\", \"NYY\", \"Third Baseman\""), "Alex Rodriguez"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Kenji Johjima\", \"SEA\", \"Catcher\""), "Kenji Johjima"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Barry Bonds\", \"SF\", \"Outfielder\""), "Barry Bonds"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jeff Mathis\", \"ANA\", \"Catcher\""), "Jeff Mathis"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Tom Gordon\", \"PHI\", \"Relief Pitcher\""), "Tom Gordon"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Vladimir Guerrero\", \"ANA\", \"Outfielder\""), "Vladimir Guerrero"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Scott Podsednik\", \"CWS\", \"Outfielder\""), "Scott Podsednik"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Albert Pujols\", \"STL\", \"First Baseman\""), "Albert Pujols"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Roberto Novoa\", \"CHC\", \"Relief Pitcher\""), "Roberto Novoa"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Mark Buehrle\", \"CWS\", \"Starting Pitcher\""), "Mark Buehrle")])
problem_b73 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Albert Pujols\", \"STL\", \"First Baseman\""), "STL"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Scott Podsednik\", \"CWS\", \"Outfielder\""), "CWS"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jeff Mathis\", \"ANA\", \"Catcher\""), "ANA"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Roberto Novoa\", \"CHC\", \"Relief Pitcher\""), "CHC"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Vladimir Guerrero\", \"ANA\", \"Outfielder\""), "ANA"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Mark Buehrle\", \"CWS\", \"Starting Pitcher\""), "CWS"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Tom Gordon\", \"PHI\", \"Relief Pitcher\""), "PHI"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Barry Bonds\", \"SF\", \"Outfielder\""), "SF"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex Rodriguez\", \"NYY\", \"Third Baseman\""), "NYY"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Kenji Johjima\", \"SEA\", \"Catcher\""), "SEA")])
problem_b74 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Tom Gordon\", \"PHI\", \"Relief Pitcher\""), "Relief Pitcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Kenji Johjima\", \"SEA\", \"Catcher\""), "Catcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Vladimir Guerrero\", \"ANA\", \"Outfielder\""), "Outfielder"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Scott Podsednik\", \"CWS\", \"Outfielder\""), "Outfielder"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Albert Pujols\", \"STL\", \"First Baseman\""), "First Baseman"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Mark Buehrle\", \"CWS\", \"Starting Pitcher\""), "Starting Pitcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jeff Mathis\", \"ANA\", \"Catcher\""), "Catcher"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex Rodriguez\", \"NYY\", \"Third Baseman\""), "Third Baseman"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Barry Bonds\", \"SF\", \"Outfielder\""), "Outfielder"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Roberto Novoa\", \"CHC\", \"Relief Pitcher\""), "Relief Pitcher")])
problem_b75 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Jeff Mathis\", \"ANA\", \"Catcher\""), "Jeff Mathis, ANA"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Roberto Novoa\", \"CHC\", \"Relief Pitcher\""), "Roberto Novoa, CHC"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Barry Bonds\", \"SF\", \"Outfielder\""), "Barry Bonds, SF"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Kenji Johjima\", \"SEA\", \"Catcher\""), "Kenji Johjima, SEA"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex Rodriguez\", \"NYY\", \"Third Baseman\""), "Alex Rodriguez, NYY"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Vladimir Guerrero\", \"ANA\", \"Outfielder\""), "Vladimir Guerrero, ANA"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Albert Pujols\", \"STL\", \"First Baseman\""), "Albert Pujols, STL"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Tom Gordon\", \"PHI\", \"Relief Pitcher\""), "Tom Gordon, PHI"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Scott Podsednik\", \"CWS\", \"Outfielder\""), "Scott Podsednik, CWS"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Mark Buehrle\", \"CWS\", \"Starting Pitcher\""), "Mark Buehrle, CWS")])
problem_b76 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Reds\",82.20,97"), "Reds"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Rays\",64.17, 90"), "Rays"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Athletics\",55.37, 94"), "Athletics"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Rangers\",120.51, 93"), "Rangers"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Braves\",83.31,94"), "Braves"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Yankees\",197.96,95"), "Yankees"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Nationals\",81.34,98"), "Nationals"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Orioles\",81.43, 93"), "Orioles"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Giants\",117.62,94"), "Giants"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Angels\",154.49, 89"), "Angels")])
problem_b77 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Nationals\",81.34,98"), "Nationals,81.34,98"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Braves\",83.31,94"), "Braves,83.31,94"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Rays\",64.17,90"), "Rays,90"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Athletics\",55.37,94"), "Athletics,94"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Giants\",117.62,94"), "Giants,117.62,94"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Reds\",82.20,97"), "Reds,82.20,97"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Yankees\",197.96,95"), "Yankees,197.96,95"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Angels\",154.49,89"), "Angels,89"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Rangers\",120.51,93"), "Rangers,93"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Orioles\",81.43,93"), "Orioles,93")])
problem_b78 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Dave\",\"M\",39,72,167"), "Dave,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Bert\",\"M\",42,68,166"), "Bert,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Carl\",\"M\",32,70,155"), "Carl,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Elly\",\"F\",30,66,124"), "Elly,F"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Hank\",\"M\",30,71,158"), "Hank,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jake\",\"M\",32,69,143"), "Jake,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Ivan\",\"M\",53,72,175"), "Ivan,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex\",\"M\",41,74,170"), "Alex,M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Gwen\",\"F\",26,64,121"), "Gwen,F"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Fran\",\"F\",33,66,115"), "Fran,F")])
problem_b79 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Dave\",\"M\",39,72,167"), "Dave,M,39,72,167"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Elly\",\"F\",30,66,124"), "Elly,F,30,66,124"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Ivan\",\"M\",53,72,175"), "Ivan,M,53,72,175"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Fran\",\"F\",33,66,115"), "Fran,F,33,66,115"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex\",\"M\",41,74,170"), "Alex,M,41,74,170"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Hank\",\"M\",30,71,158"), "Hank,M,30,71,158"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Carl\",\"M\",32,70,155"), "Carl,M,32,70,155"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Gwen\",\"F\",26,64,121"), "Gwen,F,26,64,121"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jake\",\"M\",32,69,143"), "Jake,M,32,69,143"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Bert\",\"M\",42,68,166"), "Bert,M,42,68,166")])
problem_b7 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Alice Bob Charlie"), "ABC"), 
	IOExample(Dict{Symbol, Any}(:x => "Jose Larry Scott"), "JLS"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Andy Sid"), "SAS"), 
	IOExample(Dict{Symbol, Any}(:x => "Arthur Joe Juan"), "AJJ"), 
	IOExample(Dict{Symbol, Any}(:x => "David James James"), "DJJ"), 
	IOExample(Dict{Symbol, Any}(:x => "Jeanne Laura Sarah"), "JLS"), 
	IOExample(Dict{Symbol, Any}(:x => "Bob Ben Carol"), "BBC"), 
	IOExample(Dict{Symbol, Any}(:x => "Kevin Jason Matthew"), "KJM"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Steven George"), "DSG"), 
	IOExample(Dict{Symbol, Any}(:x => "Raymond Frank Timothy"), "RFT")])
problem_b80 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Hank\",\"M\",30,71,158"), "Hank"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Dave\",\"M\",39,72,167"), "Dave"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Bert\",\"M\",42,68,166"), "Bert"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Elly\",\"F\",30,66,124"), "Elly"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jake\",\"M\",32,69,143"), "Jake"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Gwen\",\"F\",26,64,121"), "Gwen"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Carly\",\"F\",32,70,155"), "Carly"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Fran\",\"F\",33,66,115"), "Fran"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex\",\"M\",41,74,170"), "Alex"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Ivan\",\"M\",53,72,175"), "Ivan")])
problem_b81 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\"Carly\",\"F\",32,70,155"), "F"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Alex\",\"M\",41,74,170"), "M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Fran\",\"F\",33,66,115"), "F"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Bert\",\"M\",42,68,166"), "M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Gwen\",\"F\",26,64,121"), "F"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Jake\",\"M\",32,69,143"), "M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Ivan\",\"M\",53,72,175"), "M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Dave\",\"M\",39,72,167"), "M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Hank\",\"M\",30,71,158"), "M"), 
	IOExample(Dict{Symbol, Any}(:x => "\"Elly\",\"F\",30,66,124"), "F")])
problem_b82 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<country>Iceland</country>"), "Iceland"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Italy</country>"), "Italy"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Spain</country>"), "Spain"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Denmark</country>"), "Denmark"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Scotland</country>"), "Scotland"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Norway</country>"), "Norway"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Sweden</country>"), "Sweden"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Finland</country>"), "Finland"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>France</country>"), "France"), 
	IOExample(Dict{Symbol, Any}(:x => "<country>Germany</country>"), "Germany")])
problem_b83 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<price>30.66</price>"), "30.66"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>124.00</price>"), "124.00"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>21.21</price>"), "21.21"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>30.21</price>"), "30.21"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>10.00</price>"), "10.00"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>12.00</price>"), "12.00"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>19.90</price>"), "19.90"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>9.90</price>"), "9.90"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>16.66</price>"), "16.66"), 
	IOExample(Dict{Symbol, Any}(:x => "<price>22.20</price>"), "22.20")])
problem_b84 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk108\"><price>12.95</price></book>"), "bk108"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk109\"><price>11.00</price></book>"), "bk109"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk101\"><price>44.95</price></book>"), "bk101"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk105\"><price>5.95</price></book>"), "bk105"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk110\"><price>41.00</price></book>"), "bk110"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk103\"><price>5.95</price></book>"), "bk103"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk106\"><price>1.95</price></book>"), "bk106"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk102\"><price>5.95</price></book>"), "bk102"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk107\"><price>2.95</price></book>"), "bk107"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk104\"><price>5.95</price></book>"), "bk104")])
problem_b85 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk106\"><price>1.95</price></book>"), "1.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk107\"><price>2.95</price></book>"), "2.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk108\"><price>12.95</price></book>"), "12.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk104\"><price>5.95</price></book>"), "5.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk103\"><price>5.95</price></book>"), "5.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk101\"><price>44.95</price></book>"), "44.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk102\"><price>5.95</price></book>"), "5.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk109\"><price>11.00</price></book>"), "11.00"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk105\"><price>5.95</price></book>"), "5.95"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk110\"><price>41.00</price></book>"), "41.00")])
problem_b86 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk109\"><price>11.00</price></book>"), "<price>11.00</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk108\"><price>12.95</price></book>"), "<price>12.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk105\"><price>5.95</price></book>"), "<price>5.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk106\"><price>1.95</price></book>"), "<price>1.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk104\"><price>5.95</price></book>"), "<price>5.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk110\"><price>41.00</price></book>"), "<price>41.00</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk107\"><price>2.95</price></book>"), "<price>2.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk101\"><price>44.95</price></book>"), "<price>44.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk102\"><price>5.95</price></book>"), "<price>5.95</price>"), 
	IOExample(Dict{Symbol, Any}(:x => "<book id=\"bk103\"><price>5.95</price></book>"), "<price>5.95</price>")])
problem_b87 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "IMG1298.JPEG"), "JPEG"), 
	IOExample(Dict{Symbol, Any}(:x => "results.py"), "py"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG0972.mov"), "mov"), 
	IOExample(Dict{Symbol, Any}(:x => "probs.txt"), "txt"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG134141.jpg"), "jpg"), 
	IOExample(Dict{Symbol, Any}(:x => "DGC1298.JPEG"), "JPEG"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG13414.PNG"), "PNG"), 
	IOExample(Dict{Symbol, Any}(:x => "IMG1898.JPG"), "JPG"), 
	IOExample(Dict{Symbol, Any}(:x => "test.sh"), "sh"), 
	IOExample(Dict{Symbol, Any}(:x => "stack.txt"), "txt")])
problem_b88 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "St Cross College, 61 St Giles, Oxford, OX1 3LZ"), "OX1 3LZ"), 
	IOExample(Dict{Symbol, Any}(:x => "Hertford College, Catte St, Oxford OX1 3BW"), "OX1 3BW"), 
	IOExample(Dict{Symbol, Any}(:x => "Exeter College, Turl St, Oxford OX1 3DP"), "OX1 3DP"), 
	IOExample(Dict{Symbol, Any}(:x => "University College, High Street, Oxford OX1 4BH"), "OX1 4BH"), 
	IOExample(Dict{Symbol, Any}(:x => "Merton College, Merton St, Oxford OX1 4JD"), "OX1 4JD"), 
	IOExample(Dict{Symbol, Any}(:x => "Worcester College, 1 Walton St, Oxford OX1 2HB"), "OX1 2HB"), 
	IOExample(Dict{Symbol, Any}(:x => "Jesus College, Turl St, Oxford OX1 3DW"), "OX1 3DW"), 
	IOExample(Dict{Symbol, Any}(:x => "University College, Oxford, OX1 4BH"), "OX1 4BH"), 
	IOExample(Dict{Symbol, Any}(:x => "New College, Holywell St, Oxford OX1 3BN"), "OX1 3BN"), 
	IOExample(Dict{Symbol, Any}(:x => "Trinity College, Broad St, Oxford OX1 3BH"), "OX1 3BH")])
problem_b89 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "New College, Holywell St, Oxford OX1 3BN"), "New College"), 
	IOExample(Dict{Symbol, Any}(:x => "Worcester College, 1 Walton St, Oxford OX1 2HB"), "Worcester College"), 
	IOExample(Dict{Symbol, Any}(:x => "University College, High Street, Oxford OX1 4BH"), "University College"), 
	IOExample(Dict{Symbol, Any}(:x => "University College, Oxford, OX1 4BH"), "University College"), 
	IOExample(Dict{Symbol, Any}(:x => "Trinity College, Broad St, Oxford OX1 3BH"), "Trinity College"), 
	IOExample(Dict{Symbol, Any}(:x => "Exeter College, Turl St, Oxford OX1 3DP"), "Exeter College"), 
	IOExample(Dict{Symbol, Any}(:x => "Jesus College, Turl St, Oxford OX1 3DW"), "Jesus College"), 
	IOExample(Dict{Symbol, Any}(:x => "Hertford College, Catte St, Oxford OX1 3BW"), "Hertford College"), 
	IOExample(Dict{Symbol, Any}(:x => "Merton College, Merton St, Oxford OX1 4JD"), "Merton College"), 
	IOExample(Dict{Symbol, Any}(:x => "St Cross College, 61 St Giles, Oxford, OX1 3LZ"), "St Cross College")])
problem_b8 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Bob Ben Carol"), "Carol"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Steven George"), "George"), 
	IOExample(Dict{Symbol, Any}(:x => "Arthur Joe Juan"), "Juan"), 
	IOExample(Dict{Symbol, Any}(:x => "Jeanne Laura Sarah"), "Sarah"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Andy Sid"), "Sid"), 
	IOExample(Dict{Symbol, Any}(:x => "Kevin Jason Matthew"), "Matthew"), 
	IOExample(Dict{Symbol, Any}(:x => "Jose Larry Scott"), "Scott"), 
	IOExample(Dict{Symbol, Any}(:x => "David James James"), "James"), 
	IOExample(Dict{Symbol, Any}(:x => "Alice Bob Charlie"), "Charlie"), 
	IOExample(Dict{Symbol, Any}(:x => "Raymond Frank Timothy"), "Timothy")])
problem_b90 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "University College, Oxford, OX1 4BH"), "University College, OX1 4BH"), 
	IOExample(Dict{Symbol, Any}(:x => "Worcester College, 1 Walton St, Oxford OX1 2HB"), "Worcester College, OX1 2HB"), 
	IOExample(Dict{Symbol, Any}(:x => "University College, High Street, Oxford OX1 4BH"), "University College, Oxford OX1 4BH"), 
	IOExample(Dict{Symbol, Any}(:x => "St Cross College, 61 St Giles, Oxford, OX1 3LZ"), "St Cross College, OX1 3LZ"), 
	IOExample(Dict{Symbol, Any}(:x => "New College, Holywell St, Oxford OX1 3BN"), "New College, OX1 3BN"), 
	IOExample(Dict{Symbol, Any}(:x => "Hertford College, Catte St, Oxford OX1 3BW"), "Hertford College, OX1 3BW"), 
	IOExample(Dict{Symbol, Any}(:x => "Jesus College, Turl St, Oxford OX1 3DW"), "Jesus College, OX1 3DW"), 
	IOExample(Dict{Symbol, Any}(:x => "Merton College, Merton St, Oxford OX1 4JD"), "Merton College, OX1 4JD"), 
	IOExample(Dict{Symbol, Any}(:x => "Exeter College, Turl St, Oxford OX1 3DP"), "Exeter College, OX1 3DP"), 
	IOExample(Dict{Symbol, Any}(:x => "Trinity College, Broad St, Oxford OX1 3BH"), "Trinity College, OX1 3BH")])
problem_b91 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "james"), "jm"), 
	IOExample(Dict{Symbol, Any}(:x => "alice"), "ai"), 
	IOExample(Dict{Symbol, Any}(:x => "sarah"), "sr"), 
	IOExample(Dict{Symbol, Any}(:x => "chris"), "cr"), 
	IOExample(Dict{Symbol, Any}(:x => "laura"), "lu"), 
	IOExample(Dict{Symbol, Any}(:x => "thomas"), "to"), 
	IOExample(Dict{Symbol, Any}(:x => "paul"), "pu"), 
	IOExample(Dict{Symbol, Any}(:x => "edith"), "ei"), 
	IOExample(Dict{Symbol, Any}(:x => "nigel"), "ng"), 
	IOExample(Dict{Symbol, Any}(:x => "charles"), "ca")])
problem_b92 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "laura"), "la"), 
	IOExample(Dict{Symbol, Any}(:x => "alice"), "ae"), 
	IOExample(Dict{Symbol, Any}(:x => "james"), "js"), 
	IOExample(Dict{Symbol, Any}(:x => "chris"), "cs"), 
	IOExample(Dict{Symbol, Any}(:x => "charles"), "cs"), 
	IOExample(Dict{Symbol, Any}(:x => "nigel"), "nl"), 
	IOExample(Dict{Symbol, Any}(:x => "edith"), "eh"), 
	IOExample(Dict{Symbol, Any}(:x => "sarah"), "sh"), 
	IOExample(Dict{Symbol, Any}(:x => "thomas"), "ts"), 
	IOExample(Dict{Symbol, Any}(:x => "paul"), "pl")])
problem_b93 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "LightBlue1\\''''''''"), "LightBlue1"), 
	IOExample(Dict{Symbol, Any}(:x => "chocolate3\\''''''''"), "chocolate3"), 
	IOExample(Dict{Symbol, Any}(:x => "DodgerBlue4\\''''''''"), "DodgerBlue4"), 
	IOExample(Dict{Symbol, Any}(:x => "OrangeRed1\\''''''''"), "OrangeRed1"), 
	IOExample(Dict{Symbol, Any}(:x => "PaleGreen2\\''''''''"), "PaleGreen2"), 
	IOExample(Dict{Symbol, Any}(:x => "SlateGray4\\''''''''"), "SlateGray4"), 
	IOExample(Dict{Symbol, Any}(:x => "brown4\\''''''''"), "brown4"), 
	IOExample(Dict{Symbol, Any}(:x => "AntiqueWhite2\\''''''''"), "AntiqueWhite2"), 
	IOExample(Dict{Symbol, Any}(:x => "DarkOliveGreen\\''''''''"), "DarkOliveGreen"), 
	IOExample(Dict{Symbol, Any}(:x => "DarkSlateGray3\\''''''''"), "DarkSlateGray3")])
problem_b94 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "h e n r y"), "henry"), 
	IOExample(Dict{Symbol, Any}(:x => "e d i t h"), "edith"), 
	IOExample(Dict{Symbol, Any}(:x => "d a v i d"), "david"), 
	IOExample(Dict{Symbol, Any}(:x => "g e r a d l i n e"), "geradline"), 
	IOExample(Dict{Symbol, Any}(:x => "f r e d"), "fred"), 
	IOExample(Dict{Symbol, Any}(:x => "c a r o l"), "carol"), 
	IOExample(Dict{Symbol, Any}(:x => "a l i c e"), "alice"), 
	IOExample(Dict{Symbol, Any}(:x => "j e a n n e"), "jeanne"), 
	IOExample(Dict{Symbol, Any}(:x => "b o b"), "bob"), 
	IOExample(Dict{Symbol, Any}(:x => "i n g e"), "inge")])
problem_b95 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "22 July,1983 (35 years old)"), "JUL 1983"), 
	IOExample(Dict{Symbol, Any}(:x => "2 May,1941 (77 years old)"), "MAY 1941"), 
	IOExample(Dict{Symbol, Any}(:x => "25 September,1980 (38 years old)"), "SEP 1980"), 
	IOExample(Dict{Symbol, Any}(:x => "28 December,1958 (60 years old)"), "DEC 1958"), 
	IOExample(Dict{Symbol, Any}(:x => "11 July,1947 (71 years old)"), "JUL 1947"), 
	IOExample(Dict{Symbol, Any}(:x => "21 October,1943 (75 years old)"), "OCT 1943"), 
	IOExample(Dict{Symbol, Any}(:x => "26 October,1998 (20 years old)"), "OCT 1998"), 
	IOExample(Dict{Symbol, Any}(:x => "30 October,1955 (63 years old)"), "OCT 1955"), 
	IOExample(Dict{Symbol, Any}(:x => "23 November,1954 (64 years old)"), "NOV 1954"), 
	IOExample(Dict{Symbol, Any}(:x => "21 April,1965 (53 years old)"), "APR 1965")])
problem_b96 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 8am-5pm"), "8am-5pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 9am-10pm"), "9am-10pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 9am-6pm"), "9am-6pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 9am-5pm"), "9am-5pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 8am-7pm"), "8am-7pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 10am-10pm"), "10am-10pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 10am-11pm"), "10am-11pm"), 
	IOExample(Dict{Symbol, Any}(:x => "Boxing Day 10am-1pm"), "10am-1pm")])
problem_b97 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''''"), "Implementation"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''"), "Introduction"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''"), "Framework"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''''"), "Experiments"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''"), "Discussion"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''"), "Theory"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''"), "Metagol"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''''"), "Related work"), 
	IOExample(Dict{Symbol, Any}(:x => "\\'''''''''''''''''''"), "Background"), 
	IOExample(Dict{Symbol, Any}(:x => "\\''''''''''''''''''''"), "Conclusions")])
problem_b98 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "letter('i')."), "i"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('d')."), "d"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('e')."), "e"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('c')."), "c"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('h')."), "h"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('a')."), "a"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('b')."), "b"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('g')."), "g"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('f')."), "f"), 
	IOExample(Dict{Symbol, Any}(:x => "letter('j')."), "i")])
problem_b99 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "number(4)"), "4"), 
	IOExample(Dict{Symbol, Any}(:x => "number(5)"), "5"), 
	IOExample(Dict{Symbol, Any}(:x => "number(10)"), "10"), 
	IOExample(Dict{Symbol, Any}(:x => "number(50)"), "50"), 
	IOExample(Dict{Symbol, Any}(:x => "number(2)"), "2"), 
	IOExample(Dict{Symbol, Any}(:x => "number(40)"), "40"), 
	IOExample(Dict{Symbol, Any}(:x => "number(20)"), "20"), 
	IOExample(Dict{Symbol, Any}(:x => "number(30)"), "30"), 
	IOExample(Dict{Symbol, Any}(:x => "number(3)"), "3"), 
	IOExample(Dict{Symbol, Any}(:x => "number(1)"), "1")])
problem_b9 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:x => "Kevin Jason Matthew"), "Kevin"), 
	IOExample(Dict{Symbol, Any}(:x => "Jeanne Laura Sarah"), "Jeanne"), 
	IOExample(Dict{Symbol, Any}(:x => "Arthur Joe Juan"), "Arthur"), 
	IOExample(Dict{Symbol, Any}(:x => "Alice Bob Charlie"), "Alice"), 
	IOExample(Dict{Symbol, Any}(:x => "David James James"), "David"), 
	IOExample(Dict{Symbol, Any}(:x => "Donald Steven George"), "Donald"), 
	IOExample(Dict{Symbol, Any}(:x => "Bob Ben Carol"), "Bob"), 
	IOExample(Dict{Symbol, Any}(:x => "Jose Larry Scott"), "Jose"), 
	IOExample(Dict{Symbol, Any}(:x => "Raymond Frank Timothy"), "Raymond"), 
	IOExample(Dict{Symbol, Any}(:x => "Sam Andy Sid"), "Sam")])
