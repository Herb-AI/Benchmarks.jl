problem_pop = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), Any[1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 1]), Any[1, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 14]), Any[9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 11, 7]), Any[4, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 4, 14, 13, 8]), Any[5, 11, 4, 14, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 16, 1, 3, 10, 0]), Any[14, 16, 1, 3, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 1, 11, 11, 10]), Any[2, 0, 1, 11, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 1, 3, 0]), Any[6, 8, 1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 11, 13, 10]), Any[1, 7, 11, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 2, 2]), Any[8, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 15, 8]), Any[14, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 3, 2, 16]), Any[0, 3, 2])])
problem_remove_index_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 16, 6, 16, 4, 1]), Any[3, 3, 16, 6, 4, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 12, 15, 12, 1, 5, 15, 15, 2, 10]), Any[3, 12, 15, 12, 5, 15, 15, 2, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 3, 7, 0, 4, 7, 13, 6, 12, 4, 11]), Any[15, 3, 7, 0, 7, 13, 6, 12, 4, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 5, 13, 11, 4, 16, 0, 8, 10, 6]), Any[12, 5, 13, 11, 16, 0, 8, 10, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 16, 6, 6, 11, 5, 9, 14]), Any[16, 16, 6, 6, 5, 9, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 0, 0, 13, 1, 16, 0, 9, 3]), Any[5, 0, 0, 13, 16, 0, 9, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 11, 8, 10]), Any[2, 3, 11, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 10, 8, 4, 16, 7, 10, 5, 13]), Any[8, 10, 8, 4, 7, 10, 5, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 11, 10, 7, 11]), Any[6, 11, 10, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 16, 6, 0, 0, 8, 12]), Any[11, 16, 6, 0, 8, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 8, 6, 6, 11, 3, 4, 1, 4]), Any[3, 8, 6, 6, 3, 4, 1, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 14, 2, 1, 3, 2, 13]), Any[5, 11, 14, 2, 3, 2, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 11, 7, 13, 15, 10, 10, 8]), Any[9, 11, 7, 13, 10, 10, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 13, 12, 5, 8, 13, 0, 13, 3]), Any[1, 3, 13, 12, 8, 13, 0, 13, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 6, 11, 9, 3]), Any[12, 6, 11, 9])])
problem_remove_index_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[4, 8, 11, 0, 8, 11]), Any[8, 11, 0, 8, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 13, 8, 15, 8, 10, 0, 6]), Any[13, 8, 15, 8, 10, 0, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 10, 12, 11, 8, 8]), Any[10, 12, 11, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 12, 7, 13, 9, 1]), Any[4, 12, 7, 13, 9, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 4, 11, 10, 5]), Any[4, 11, 10, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 14, 15, 4, 8, 1, 0, 10]), Any[14, 15, 4, 8, 1, 0, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 10, 4, 11, 14]), Any[10, 4, 11, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 8, 12]), Any[8, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 15, 10, 10, 3, 8, 1]), Any[15, 10, 10, 3, 8, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 10, 8, 14, 2, 12]), Any[10, 8, 14, 2, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), Any[])])
problem_empty = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 1]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 3, 2]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 10, 6, 13, 4]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 7, 16, 11, 10, 3, 15]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 0, 14, 0, 2, 12]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 15]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 16, 2, 5, 15, 6, 7]), false)])
problem_prepend_index_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[15, 12, 9, 14, 7, 9]), Any[9, 15, 12, 9, 14, 7, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 8, 1, 6, 16, 11]), Any[1, 7, 8, 1, 6, 16, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 3, 1, 8, 15, 7, 7, 14, 1]), Any[1, 11, 3, 1, 8, 15, 7, 7, 14, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 11, 15, 2]), Any[15, 9, 11, 15, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 3, 6]), Any[6, 11, 3, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 5, 6, 10, 3]), Any[5, 6, 8, 5, 6, 10, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 8, 13, 2, 12, 6, 9, 1]), Any[8, 4, 3, 8, 13, 2, 12, 6, 9, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 15, 13, 1, 8, 13, 9, 6]), Any[13, 3, 15, 13, 1, 8, 13, 9, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 3, 0, 5, 4, 2]), Any[0, 6, 3, 0, 5, 4, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 10, 15, 8, 14, 3, 4, 16, 1]), Any[15, 6, 10, 15, 8, 14, 3, 4, 16, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 10, 5, 16]), Any[5, 5, 10, 5, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 14, 3, 5, 11]), Any[3, 8, 14, 3, 5, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 10, 3, 14, 0, 5]), Any[3, 11, 10, 3, 14, 0, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 6, 14, 4, 12, 0, 15]), Any[14, 15, 6, 14, 4, 12, 0, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 16, 6, 9, 16, 6, 10]), Any[6, 13, 16, 6, 9, 16, 6, 10])])
problem_count_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[14, 0, 2, 6]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 2, 2, 2, 2]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 15]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 8, 7, 2, 5, 2]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 16, 3, 2, 7, 2]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 10, 9]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 2, 2, 2, 2]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12, 11, 5, 12, 1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 2, 16, 2]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 8, 1]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 2, 2, 2]), 6)])
problem_is_mod_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[4, 7, 16, 11, 10, 3, 15]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 0, 14, 0, 2, 12]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 6, 4, 12, 15]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 16, 2, 5, 15, 6, 7]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 11, 0, 11, 7, 9]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 10, 4]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 13, 10, 13]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 1, 13, 7]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 12, 3]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 13, 3]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 13, 12, 6]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 14, 7]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 14, 7, 1, 0, 11, 0]), true)])
problem_caesar_cipher_k_modulo_n_with_k_0_and_n_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 0, 0]), Any[1, 1, 2, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0]), Any[2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 1, 2, 1, 0, 1]), Any[0, 0, 1, 2, 1, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 2, 1, 0, 0]), Any[1, 0, 2, 1, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 1, 2]), Any[2, 2, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2, 1, 2]), Any[0, 2, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2, 0]), Any[0, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1]), Any[2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2]), Any[1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 1, 1, 1]), Any[2, 2, 1, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2]), Any[2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1]), Any[1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 2, 1]), Any[2, 0, 2, 1])])
problem_caesar_cipher_k_modulo_n_with_k_2_and_n_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 2]), Any[0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 1, 3, 1]), Any[3, 0, 3, 1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 0, 1, 2, 1, 1]), Any[0, 0, 2, 3, 0, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 2]), Any[0, 3, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2, 1, 2]), Any[2, 0, 3, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 0]), Any[3, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 1]), Any[0, 1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 3, 3]), Any[2, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 2, 1, 3, 2]), Any[0, 2, 0, 3, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2]), Any[3, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 1, 2, 3]), Any[2, 3, 3, 0, 1])])
problem_evens = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 4]), Any[2, 0, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 4, 2, 0, 5, 1, 1]), Any[2, 4, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 13]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 7, 3, 1, 9, 9, 5]), Any[14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 7]), Any[6, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 0, 12, 7]), Any[0, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 8, 7]), Any[2, 2, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 11, 8, 16]), Any[10, 8, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 8, 7, 4, 16]), Any[8, 4, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14]), Any[14])])
problem_slice_k_n_with_k_1_and_n_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[14, 13, 13, 2, 12, 5, 15, 3]), Any[14, 13, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 12, 5, 0, 6, 6, 4, 2, 2, 11]), Any[13, 12, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 11, 5, 16]), Any[7, 7, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 1, 7, 13, 11, 2, 5, 16, 10, 9]), Any[8, 1, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 14, 7, 2, 13, 14, 7]), Any[15, 14, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 15, 11, 2, 8, 15, 4, 11, 1, 16, 10, 13]), Any[5, 15, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 13, 2, 4, 6, 5, 3]), Any[13, 13, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 14, 2, 14, 0, 9, 8]), Any[12, 14, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 7, 10, 10, 1, 11, 12, 10, 0, 3, 14]), Any[12, 7, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 13, 3, 14, 6, 3, 8, 9, 10, 7, 9, 1]), Any[6, 13, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 14, 4, 2, 7, 14]), Any[1, 14, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 5, 9, 6, 0, 15, 6, 6, 4, 13, 0, 14]), Any[12, 5, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 5, 5, 7, 6, 16, 4, 2, 7]), Any[3, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 12, 15, 9, 8, 3, 14, 3, 0, 0, 14]), Any[15, 12, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 4, 14, 2, 6, 9, 14]), Any[12, 4, 14])])
problem_bool_identify_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 9, 16]), Any[true, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 8, 4, 13, 12]), Any[false, false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 16]), Any[false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1, 1]), Any[true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 5, 1, 13]), Any[false, false, false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 16, 1]), Any[true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 6, 8, 13, 14]), Any[false, false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1, 4, 1, 1]), Any[true, true, true, false, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 1, 1, 1]), Any[false, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 7]), Any[false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 15]), Any[true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1]), Any[true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[])])
problem_kth_largest_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 15, 14, 6, 4, 5, 5]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 15, 1]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 8, 10, 1, 14, 1, 3]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 8, 1, 9]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 2, 10, 10]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 2]), 13), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 7, 11, 4, 2, 5, 13, 5]), 13), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 0]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 2, 7, 16, 3]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 2, 1, 12, 1, 11, 15]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 9, 15]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 15, 0]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 16, 9]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), 16)])
problem_modulo_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[16, 12]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 4, 8, 1, 0, 10]), Any[3, 0, 0, 1, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 10, 4, 11]), Any[0, 2, 0, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 13, 1, 10, 5, 2, 8]), Any[0, 1, 1, 2, 1, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 13, 12, 15, 10]), Any[0, 1, 1, 0, 3, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 8, 1, 11, 6]), Any[3, 0, 1, 3, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 14, 2, 12]), Any[0, 2, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 14, 11, 13, 0, 3, 2]), Any[1, 2, 3, 1, 0, 3, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 4, 12, 13]), Any[2, 0, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 14]), Any[0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 14, 5, 3, 3]), Any[2, 3, 2, 1, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 1, 1, 6, 8]), Any[0, 1, 1, 2, 0])])
problem_caesar_cipher_k_modulo_n_with_k_3_and_n_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 1, 1]), Any[1, 1, 1, 1, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 0, 1, 0, 0]), Any[0, 1, 1, 0, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1, 1, 0]), Any[0, 0, 0, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 0, 0, 1, 0, 0]), Any[0, 1, 1, 1, 0, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 1, 0, 1]), Any[1, 1, 1, 1, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 1, 0, 1, 1]), Any[1, 0, 0, 1, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0, 0]), Any[0, 0, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 1, 1]), Any[0, 1, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[])])
problem_index_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[12, 14, 15, 4, 8, 1, 0, 10, 8, 0]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 11, 14, 0, 13, 1, 10, 5]), 14), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 12, 0, 1]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 15, 10, 10, 3, 8, 1, 11, 6]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 14, 2, 12, 3, 6, 0]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 1, 14]), 14), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 0, 3, 2, 9, 14, 4, 12]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 12, 14, 13, 2, 3, 14, 5, 3]), 14), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 4, 1, 1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 2, 15, 3, 10, 0]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 6, 0, 9, 6, 7, 15]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 11, 3]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 7, 16, 2, 2, 13, 0, 13, 5]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 2, 6, 12]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 10, 11, 7, 4]), 11)])
problem_kth_largest_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 14, 6, 12, 15]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 12, 12, 2, 16, 1, 3, 4, 16]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 9, 1, 7, 12, 5, 12, 4, 14, 12]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 5, 4, 15, 11, 8, 8]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 0, 5, 14, 1, 12, 1, 12, 5, 4]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 15, 13, 9, 13, 15, 7, 12, 3, 14]), 14), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 1, 11, 2, 3, 15, 2, 0, 12]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 5, 8, 16, 15, 10, 14, 11]), 14), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 12, 13, 4, 0, 13, 6, 9, 1, 9]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 5, 1, 4, 15, 4, 9, 11, 1]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 15, 11, 10, 4, 13]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 11, 12, 8, 15, 1, 9, 2]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 0, 5, 8, 5, 8, 13]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 14, 8, 8]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 0, 7, 11, 10, 0, 5, 2]), 10)])
problem_product = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 1]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 15]), 105), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 7]), 105), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 9, 9]), 891), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 1, 6, 2]), 84), 
	IOExample(Dict{Symbol, Any}(:i => Any[6]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 6, 8, 11, 11, 16]), 743424), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 6, 8, 4, 6, 6, 7]), 483840), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 1, 14, 0, 12]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 4, 11, 12, 15, 5, 2]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5, 6, 11, 6, 13, 14]), 3243240), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1, 5, 9, 13]), 1755), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 10, 8, 13, 11]), 34320)])
problem_add_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 14, 9]), Any[12, 17, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 11, 6, 14, 4]), Any[10, 14, 9, 17, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 11, 1, 7, 8, 4, 5]), Any[15, 14, 4, 10, 11, 7, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 6, 10]), Any[11, 9, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 9, 7, 8]), Any[4, 12, 10, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 14, 1]), Any[10, 17, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 14, 7]), Any[14, 17, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 14, 15]), Any[5, 17, 18]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 2, 11, 4, 13, 11]), Any[12, 5, 14, 7, 16, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 8]), Any[11, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 4, 6, 9, 13]), Any[5, 7, 9, 12, 16])])
problem_index_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 12, 4, 0, 0, 14, 14, 14]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 7, 3, 15, 11, 1, 16]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12, 11, 14, 15, 9, 8]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 13, 1]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 6, 12, 0, 8, 1, 16]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 1, 4, 12, 12, 0]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 16, 9, 12, 15, 0, 2, 7]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 14, 7, 10, 9, 7]), 13), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 1, 10, 4, 3]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 4, 16, 1]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 15, 8, 10, 13, 12, 7, 0]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 12]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 10, 16, 8, 7, 2]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 1, 12, 0, 9, 12]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 3, 1, 6]), 0)])
problem_reverse = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 4]), Any[4, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 4, 2, 0, 5, 1, 1]), Any[1, 1, 5, 0, 2, 4, 5, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 12]), Any[12, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 13, 5, 7, 6]), Any[6, 7, 5, 13, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 7, 11]), Any[11, 7, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 7, 11, 7, 15, 11]), Any[11, 15, 7, 11, 7, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 10, 5, 8, 3]), Any[3, 8, 5, 10, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 6, 9]), Any[9, 6, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 11]), Any[11, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 15, 11, 5, 3]), Any[3, 5, 11, 15, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 5, 5, 6]), Any[6, 5, 5, 11])])
problem_has_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[6, 0, 3, 16]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 5, 3]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 8, 1, 1, 1, 1]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 14, 4]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 1, 7, 8, 4, 5, 6]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1, 7]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 4, 6, 9]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 10, 7, 12, 13, 3]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 8, 7, 1, 1, 2, 3]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 7, 6, 15, 7]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1, 1]), true)])
problem_bool_identify_is_mod_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[8, 7, 5, 10]), Any[false, false, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 5, 5, 8]), Any[false, true, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 5]), Any[true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 9, 3, 5, 16, 5]), Any[false, false, false, true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 10, 12, 13, 2]), Any[false, true, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 6, 2, 8, 9, 0, 2]), Any[true, false, false, false, false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 0, 1, 3, 16, 9]), Any[true, true, false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 14, 5]), Any[false, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 7, 3, 15, 11, 1]), Any[true, false, false, true, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12, 11, 14, 15, 9, 8]), Any[false, false, false, false, true, false, false])])
problem_slice_k_n_with_k_3_and_n_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 13, 12, 5, 9, 8, 6, 4, 1, 16, 12, 15, 5]), Any[12, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 12, 15, 13, 16, 3, 8, 11, 9, 16, 15, 4]), Any[15, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 12, 7, 13, 16, 3, 9, 15, 1, 0, 3]), Any[7, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 11, 10, 7, 15, 3]), Any[11, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 10, 15, 3, 3, 9, 6, 15]), Any[15, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 4, 10, 9, 16, 0, 6]), Any[10, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 13, 7, 13, 2, 8]), Any[7, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 8, 8, 15, 15, 16]), Any[8, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 0, 13, 11, 9, 7, 7, 10, 9, 2]), Any[13, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 9, 3, 7, 11, 11]), Any[3, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 1, 8, 0, 10]), Any[1, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 6, 7, 8, 14, 7, 11, 14, 8, 16, 1, 8]), Any[7, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 6, 15, 11, 7, 1, 6, 8, 14]), Any[6, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 0, 8, 12, 3, 0, 14, 1]), Any[8, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 5, 13, 9, 7, 10, 14, 16, 1, 7, 16, 14, 13]), Any[13, 9])])
problem_tail = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[5, 9, 1]), Any[9, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 4]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 6, 7]), Any[3, 6, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 2, 2, 13, 4, 3]), Any[2, 2, 13, 4, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 4]), Any[1, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5, 7, 5, 4, 1]), Any[5, 7, 5, 4, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 0, 4, 12]), Any[0, 4, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 6, 3, 14]), Any[6, 3, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 12, 14, 1, 2, 15, 9]), Any[12, 14, 1, 2, 15, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0, 2, 11, 0]), Any[1, 0, 2, 11, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 10, 3, 12]), Any[10, 3, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 9, 14]), Any[9, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 2, 7, 6, 9, 8]), Any[8, 2, 7, 6, 9, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 4, 5, 3]), Any[7, 4, 5, 3])])
problem_keep_mod_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 8, 1, 15, 10]), Any[0, 8, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 6, 14, 11, 4, 15]), Any[6, 8, 6, 14, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 10, 8, 4, 6, 2]), Any[2, 10, 8, 4, 6, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 9, 4, 4]), Any[4, 4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 10, 11]), Any[10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8, 16, 5, 9]), Any[10, 8, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 9, 11, 13]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 0, 16]), Any[10, 0, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12, 2]), Any[2, 12, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 15, 9, 13, 13, 15, 3]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 6, 16]), Any[12, 6, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 4, 1, 5, 8]), Any[4, 8])])
problem_append_index_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[11, 9, 15, 7, 2, 3, 11, 7, 1, 2]), Any[11, 9, 15, 7, 2, 3, 11, 7, 1, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 9, 16, 5, 5, 16, 11, 9]), Any[11, 9, 16, 5, 5, 16, 11, 9, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 12, 3, 2, 14, 15, 10, 11, 4, 11, 15, 2]), Any[12, 12, 3, 2, 14, 15, 10, 11, 4, 11, 15, 2, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 6, 1, 7, 1, 13]), Any[4, 6, 1, 7, 1, 13, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 16, 5, 13, 14, 12, 6, 0]), Any[8, 16, 5, 13, 14, 12, 6, 0, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 11, 8, 0, 7, 8]), Any[9, 11, 8, 0, 7, 8, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 4, 7, 10, 13, 3, 14, 4, 12, 4]), Any[12, 4, 7, 10, 13, 3, 14, 4, 12, 4, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 12, 0, 0, 15, 9, 9, 9, 2]), Any[0, 12, 0, 0, 15, 9, 9, 9, 2, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 5, 6, 5, 15, 2, 10, 7, 7, 2, 13, 10]), Any[12, 5, 6, 5, 15, 2, 10, 7, 7, 2, 13, 10, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 0, 16, 8, 9, 10, 16, 7]), Any[13, 0, 16, 8, 9, 10, 16, 7, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 15, 7, 8, 2, 5, 14, 15, 8, 8]), Any[16, 15, 7, 8, 2, 5, 14, 15, 8, 8, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 5, 15, 2]), Any[7, 7, 5, 15, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 2, 13, 16, 1, 3]), Any[13, 2, 13, 16, 1, 3, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 15, 14, 7, 12, 3, 0, 4, 16]), Any[6, 4, 15, 14, 7, 12, 3, 0, 4, 16, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 15, 9, 4, 2, 2, 14, 13, 5, 4]), Any[15, 15, 9, 4, 2, 2, 14, 13, 5, 4, 2])])
problem_slice_k_n_with_k_1_and_n_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[12, 3, 1, 10, 12, 2, 13, 5, 5]), Any[12, 3, 1, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 8, 11, 0, 0, 13, 3, 11, 1, 2, 12, 15, 5]), Any[5, 8, 11, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 12, 2, 1, 10, 15, 3, 13, 9, 9, 16, 1, 5]), Any[12, 12, 2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 13, 11, 10, 5, 14, 11, 13, 6, 5]), Any[15, 13, 11, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 8, 9, 15, 11, 10, 0, 15, 16, 8, 15, 1]), Any[3, 8, 9, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 3, 5, 6, 0, 14, 6, 4, 11, 8, 11, 11, 10]), Any[14, 3, 5, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 1, 8, 14, 0, 15, 6, 16, 1]), Any[12, 1, 8, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 6, 8, 1, 11, 12, 12, 6, 5, 6]), Any[5, 6, 8, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 10, 11, 14, 12, 12, 14]), Any[15, 10, 11, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 7, 13, 15, 0, 9, 4, 7, 12, 7, 6]), Any[0, 7, 13, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 4, 5, 8, 14, 12, 15, 2, 14, 0, 8, 12, 11]), Any[14, 4, 5, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 13, 1, 16, 9, 5, 16, 16, 4, 1, 8]), Any[2, 13, 1, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 6, 11, 4, 14, 7, 16, 7, 3]), Any[9, 6, 11, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 7, 15, 2, 2, 16, 15, 12, 6, 3, 3, 14, 5]), Any[6, 7, 15, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 10, 14, 0, 14, 0, 16]), Any[8, 10, 14, 0])])
problem_prepend_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 9, 7, 12, 6]), Any[1, 2, 9, 7, 12, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 12, 11, 7, 12]), Any[1, 8, 12, 11, 7, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 15, 15, 12, 8, 12]), Any[1, 15, 15, 15, 12, 8, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 3, 5, 6, 11, 12]), Any[1, 9, 3, 5, 6, 11, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 13, 16, 13, 0, 14, 13]), Any[1, 13, 13, 16, 13, 0, 14, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 15, 2]), Any[1, 9, 15, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 9, 10, 8, 8, 1, 0]), Any[1, 16, 9, 10, 8, 8, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[1, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 3, 3, 9, 11, 6, 0]), Any[1, 16, 3, 3, 9, 11, 6, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 16, 10, 8]), Any[1, 4, 16, 10, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 10, 10, 14, 10, 8, 6]), Any[1, 5, 10, 10, 14, 10, 8, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 3, 5]), Any[1, 15, 3, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 6, 16, 11]), Any[1, 9, 6, 16, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6]), Any[1, 6])])
problem_caesar_cipher_k_modulo_n_with_k_0_and_n_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1, 0, 1, 1]), Any[1, 1, 1, 0, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 1, 1, 0]), Any[1, 0, 1, 1, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0]), Any[1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0]), Any[1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0, 1, 0, 1]), Any[0, 1, 0, 1, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0, 1]), Any[0, 1, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0]), Any[1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0]), Any[0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0, 1, 0]), Any[1, 1, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[])])
problem_remove_index_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[14, 11]), Any[14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 3, 2, 9, 14, 4, 12, 13]), Any[0, 2, 9, 14, 4, 12, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 14, 13, 2]), Any[12, 13, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 5, 3]), Any[14, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 4, 1]), Any[12, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8]), Any[6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 3, 10]), Any[15, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5]), Any[9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 6, 7, 15]), Any[0, 6, 7, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 11]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 3, 7]), Any[13, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 13, 0, 13, 5, 2, 6, 2]), Any[2, 13, 0, 13, 5, 2, 6, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 5, 0, 10]), Any[12, 0, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 0, 1, 11, 0, 11]), Any[7, 0, 1, 11, 0, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 16, 6, 4, 4, 1, 5]), Any[2, 6, 4, 4, 1, 5])])
problem_remove_index_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[10, 5, 9]), Any[10, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 8, 10, 3, 2, 12, 9, 0, 0]), Any[4, 8, 3, 2, 12, 9, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 10, 5, 2, 16]), Any[14, 10, 2, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 9, 16, 8, 11, 16, 13]), Any[1, 9, 8, 11, 16, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 7, 2]), Any[11, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 11, 13, 2, 9]), Any[9, 11, 2, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 2, 10, 13, 9, 13]), Any[5, 11, 10, 13, 9, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 4, 5, 2, 14, 6, 9, 15, 1, 1]), Any[5, 4, 2, 14, 6, 9, 15, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 11, 16, 4, 10, 7]), Any[3, 11, 4, 10, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 1, 2, 14, 10]), Any[7, 1, 14, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 10, 8, 6, 7, 15, 2, 9, 16]), Any[9, 10, 6, 7, 15, 2, 9, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 0, 3, 4, 9, 2, 15, 4, 8, 5]), Any[4, 0, 4, 9, 2, 15, 4, 8, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 16, 5, 11, 11, 14]), Any[6, 4, 5, 11, 11, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 6, 12]), Any[4, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 14, 9, 7, 11, 16]), Any[1, 14, 7, 11, 16])])
problem_drop_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[15, 1]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 8, 10, 1, 14, 1, 3]), Any[8, 10, 1, 14, 1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 8, 1, 9]), Any[8, 8, 1, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 2, 10, 10]), Any[2, 10, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 2]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 7, 11, 4, 2, 5, 13, 5]), Any[7, 11, 4, 2, 5, 13, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 2, 7, 16, 3]), Any[1, 2, 7, 16, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 2, 1, 12, 1, 11, 15]), Any[2, 1, 12, 1, 11, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 9, 15]), Any[9, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 15, 0]), Any[4, 15, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 16, 9]), Any[16, 16, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 13]), Any[13])])
problem_modulo_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[15]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 6, 0, 9]), Any[0, 1, 0, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 15]), Any[2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 13, 0, 13, 5, 2]), Any[2, 2, 3, 0, 3, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 6, 12]), Any[2, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 10]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 0, 1, 11]), Any[2, 4, 0, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 2, 16, 6, 4]), Any[1, 2, 1, 1, 4])])
problem_append_index_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 13, 12, 12]), Any[0, 13, 12, 12, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 2, 6, 7, 14, 9]), Any[6, 8, 2, 6, 7, 14, 9, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 15, 6, 15, 5, 13]), Any[6, 15, 6, 15, 5, 13, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 13, 7, 2, 4, 10]), Any[15, 13, 7, 2, 4, 10, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 1, 7, 12, 15, 12, 13, 11, 4]), Any[1, 2, 1, 7, 12, 15, 12, 13, 11, 4, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5, 2, 15, 8, 1]), Any[9, 5, 2, 15, 8, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 13, 5, 7, 4, 3, 3]), Any[3, 13, 5, 7, 4, 3, 3, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 14, 12, 4, 4, 15, 3, 1, 4]), Any[6, 14, 12, 4, 4, 15, 3, 1, 4, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 2, 10, 6, 7, 9, 14, 2]), Any[14, 2, 10, 6, 7, 9, 14, 2, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 11, 2, 9]), Any[11, 11, 2, 9, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 6, 13, 11, 15, 2]), Any[8, 6, 13, 11, 15, 2, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 0, 13, 10, 7, 1, 14, 5, 10, 10]), Any[15, 0, 13, 10, 7, 1, 14, 5, 10, 10, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 0, 12, 10, 15, 13]), Any[11, 0, 12, 10, 15, 13, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 10, 10, 14, 14, 2, 9]), Any[14, 10, 10, 14, 14, 2, 9, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 7, 16, 14]), Any[12, 7, 16, 14, 16])])
problem_caesar_cipher_k_modulo_n_with_k_5_and_n_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[3, 2, 1, 3, 3]), Any[0, 3, 2, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 1, 1]), Any[3, 1, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 0, 1, 2, 3, 3]), Any[3, 3, 1, 2, 3, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 3, 1, 1, 0]), Any[1, 0, 2, 2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 0, 0]), Any[0, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0]), Any[1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 2, 1, 2]), Any[2, 1, 2, 3, 2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 3, 2, 2, 2]), Any[1, 0, 3, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1, 2, 1, 1]), Any[0, 2, 3, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1, 3]), Any[0, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 2, 2]), Any[1, 1, 1, 1, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 0, 2, 1, 0]), Any[3, 1, 1, 3, 2, 1])])
problem_bool_identify_geq_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 7]), Any[true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 11, 2, 3, 2, 2, 10]), Any[true, true, false, true, false, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[-1]), Any[false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 4, 1, 7]), Any[true, true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 9, 2, 2, 2]), Any[false, true, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 9]), Any[true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 4, 4, 4, 4]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 6, 11, 16, 7, 10, 3]), Any[true, true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 16]), Any[true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 5, 6, 7, 9, 3]), Any[true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5]), Any[true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 0]), Any[false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 0]), Any[true, false])])
problem_bool_identify_is_mod_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 8, 0, 14, 3, 10]), Any[true, true, true, true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 4]), Any[true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 12]), Any[false, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 4, 16]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 7]), Any[true, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 2, 2, 8]), Any[false, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2]), Any[true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 9, 11, 15]), Any[true, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 16, 10]), Any[true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 2, 0, 1, 2]), Any[false, true, true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 6]), Any[true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 15, 16, 15]), Any[true, false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 13, 2]), Any[true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[true])])
problem_prepend_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[16, 9, 3]), Any[4, 16, 9, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 1, 11, 16, 7]), Any[4, 13, 1, 11, 16, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 5, 0, 2, 3]), Any[4, 16, 5, 0, 2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 12]), Any[4, 13, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 15, 12, 4]), Any[4, 12, 15, 12, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 14, 7, 14, 10]), Any[4, 1, 14, 7, 14, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 0, 9, 14, 11]), Any[4, 12, 0, 9, 14, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 16, 9, 16, 9]), Any[4, 7, 16, 9, 16, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 7]), Any[4, 12, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 10, 5, 4]), Any[4, 6, 10, 5, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 11, 5, 7]), Any[4, 11, 11, 5, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 10, 7, 4, 0, 15, 8]), Any[4, 12, 10, 7, 4, 0, 15, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 11, 8, 13]), Any[4, 7, 11, 8, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 5, 3, 16, 7, 16, 5]), Any[4, 6, 5, 3, 16, 7, 16, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 7, 1, 14]), Any[4, 0, 7, 1, 14])])
problem_is_mod_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[8]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 11]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[52, 0, 8]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[24]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[28, 0, 44]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 15, 6, 9, 16, 12]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 6]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[40, 32, 16, 28]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 5, 15, 16, 13]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 12, 40, 48, 16, 20]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[56, 12, 56, 60]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 7, 13, 8, 10]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[24, 20, 0, 28]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 15, 11, 9, 16]), false)])
problem_slice_k_n_with_k_4_and_n_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[6, 2, 5, 14, 9, 7, 6, 8, 5, 6, 9, 3, 10, 3, 0]), Any[14, 9, 7, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 5, 10, 15, 4, 6, 16, 15, 15, 12]), Any[10, 15, 4, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 0, 1, 11, 12, 9, 15, 10, 1, 5, 11, 16, 9]), Any[11, 12, 9, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 7, 15, 4, 8, 9, 13, 1, 7, 6, 1, 2, 7, 10, 14, 8]), Any[4, 8, 9, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 9, 7, 10, 16, 2, 12, 11, 15, 1, 7, 2]), Any[10, 16, 2, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 1, 5, 12, 7, 10, 5, 16, 10, 9, 3, 8, 15]), Any[12, 7, 10, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 5, 1, 4, 11, 7, 8, 15, 3, 1, 7, 1, 3, 8, 4, 14]), Any[4, 11, 7, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 7, 13, 4, 7, 13, 5, 10, 8, 8, 11]), Any[4, 7, 13, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 8, 6, 4, 5, 10, 8, 11, 9, 9, 16]), Any[4, 5, 10, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 14, 1, 1, 9, 14, 13, 2, 11, 3]), Any[1, 9, 14, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 10, 7, 5, 12, 15, 2, 11, 11, 7, 3, 8, 2]), Any[7, 5, 12, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 12, 7, 10, 16, 3, 4, 7, 4, 9, 4, 2]), Any[10, 16, 3, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 0, 15, 15, 10, 0, 11, 14, 4, 15, 10, 5, 7, 10]), Any[15, 10, 0, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 9, 3, 15, 10, 9, 5, 12, 14, 4, 7, 13, 15, 2]), Any[15, 10, 9, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 1, 15, 3, 4, 4, 7, 8, 16, 3, 3, 9, 14, 6, 5, 7]), Any[3, 4, 4, 7])])
problem_add_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 11]), Any[12, 9, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 13, 0, 2]), Any[11, 18, 5, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 6]), Any[8, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 0]), Any[12, 12, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 14, 10, 15, 6]), Any[10, 19, 15, 20, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 12, 15, 7]), Any[21, 17, 20, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 6, 11]), Any[12, 11, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8, 4, 7]), Any[15, 13, 9, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[17]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 13, 9, 13, 0, 3, 10]), Any[21, 18, 14, 18, 5, 8, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 5, 4, 0, 8, 9]), Any[9, 10, 9, 5, 13, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 14, 15, 0, 12, 0]), Any[8, 19, 20, 5, 17, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 8, 10]), Any[18, 13, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 6, 5, 0, 7, 7]), Any[14, 11, 10, 5, 12, 12])])
problem_is_squares = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[25]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 4]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 4, 9]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 4, 9, 15]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[144, 169]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 1]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[196, 49, 9, 1, 81, 81, 25]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 49, 100]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 15, 1]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 10, 11]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[169, 25, 25, 64, 49, 16, 256]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[256, 64, 169, 64, 0, 196]), true)])
problem_has_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3, 3]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 3, 5, 5, 13]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 16, 3]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 6, 8, 13, 14]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3, 4, 3, 3]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 3, 3, 3]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 7]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 15]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 2, 3, 3]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 15]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 6]), true)])
problem_mult_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 8, 1]), Any[0, 8, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 16, 14, 6, 8, 6, 14]), Any[10, 16, 14, 6, 8, 6, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 15, 2, 13, 15]), Any[4, 15, 2, 13, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 1, 10, 8, 6]), Any[11, 1, 10, 8, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 10]), Any[0, 9, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 16, 1, 1, 3]), Any[4, 16, 1, 1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 10, 4, 9]), Any[2, 10, 4, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1, 10]), Any[14, 1, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 11, 10, 10]), Any[0, 0, 11, 10, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 5, 9]), Any[16, 5, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 13, 9, 11]), Any[12, 13, 9, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 9, 10, 0, 16, 3]), Any[7, 9, 10, 0, 16, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 6, 6, 15, 10]), Any[12, 6, 6, 15, 10])])
problem_slice_k_n_with_k_2_and_n_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[9, 13, 15, 7, 10]), Any[13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 7, 12, 11, 14, 6, 9, 14, 0, 5]), Any[7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 13, 3, 4, 8, 16, 5, 1]), Any[13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 15, 0, 9, 9, 15, 15, 3, 4]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 12, 4, 5, 2]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 2, 4, 4, 4, 9]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 15, 15, 13, 6]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 4, 12, 0, 3, 9]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 0, 3, 0, 11, 2, 1, 0, 8, 1, 15]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 1, 14, 11, 16, 4]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 15, 9, 11, 12]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 15, 13, 6, 16, 2]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 10, 1, 9, 6]), Any[10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 6, 5, 5, 2]), Any[6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 0, 16, 9, 10]), Any[0])])
problem_pow_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 12, 7, 0]), Any[0, 6561, 20736, 2401, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 15]), Any[20736, 50625]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9]), Any[6561]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2, 5, 4, 11, 7]), Any[0, 16, 625, 256, 14641, 2401]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 4, 14, 13]), Any[625, 14641, 256, 38416, 28561]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 14, 16]), Any[38416, 38416, 65536]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10]), Any[10000]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 1, 11, 11, 10]), Any[16, 0, 1, 14641, 14641, 10000]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 1, 3]), Any[1296, 4096, 1, 81]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9]), Any[6561]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 11, 13]), Any[1, 2401, 14641, 28561])])
problem_is_odds = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 4]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 4, 2, 0, 5, 1, 1]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 7, 27]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 6, 12, 0, 8, 1]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 3, 9, 25, 25]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[31, 33, 19, 25, 31, 1, 5]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[27, 29, 15, 21, 19]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[17, 3, 21, 9]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[21, 9, 33]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 31, 17, 21, 27, 25, 15]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 33, 21, 33, 17, 15]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 1, 12, 0, 9]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 3]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[31, 7, 19, 29, 1]), true)])
problem_slice_k_n_with_k_2_and_n_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 13, 7, 10, 15]), Any[13, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 2, 10, 14, 4, 0, 4]), Any[2, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 1, 7, 11, 9, 4]), Any[1, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 14, 5, 16, 3, 7, 15, 3]), Any[14, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 11, 16, 5, 0, 0, 5]), Any[11, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 6, 14, 6, 7, 8, 6, 6, 13, 7, 6, 10]), Any[6, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 12, 8, 12, 8]), Any[12, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5, 16, 1, 15, 12, 6, 7]), Any[5, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 16, 10, 16]), Any[9, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 1, 15, 13, 12, 15, 14, 11, 13, 2, 5]), Any[1, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 7, 11, 0, 2, 7, 2, 2, 10, 6, 0]), Any[7, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 16, 14, 2, 4, 13, 11, 11, 12, 4]), Any[16, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 7, 10, 6, 9]), Any[7, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 7, 5, 13, 0, 4, 14, 8, 3, 10]), Any[7, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 3, 9, 11, 15, 7, 13, 4]), Any[3, 9])])
problem_caesar_cipher_k_modulo_n_with_k_2_and_n_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 1, 0]), Any[0, 0, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 1, 0, 1, 0]), Any[0, 0, 1, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 1]), Any[0, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 0, 0, 1, 0]), Any[1, 0, 1, 0, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0]), Any[1, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0, 1, 0]), Any[0, 1, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0]), Any[1, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 1, 1]), Any[1, 0, 1, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0]), Any[1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0, 0, 1, 0]), Any[0, 1, 0, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0]), Any[0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 1]), Any[0, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1])])
problem_slice_k_n_with_k_1_and_n_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 7, 10, 2, 5, 3, 0, 15, 16, 3]), Any[6, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 0, 4, 6, 16, 1, 6]), Any[8, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 2, 13, 8]), Any[6, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 13, 8, 0, 5, 14, 0, 2]), Any[13, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 10, 5, 4, 8, 8, 1, 7, 10, 15, 8]), Any[4, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 14, 1, 6, 5, 13, 3, 13, 11, 15]), Any[12, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 6, 10, 14, 3]), Any[8, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 3, 10, 2, 4]), Any[10, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 3, 6, 11, 12, 6]), Any[11, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 3, 9, 14, 15]), Any[13, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 13, 8, 0, 11, 12, 14, 7, 9, 8]), Any[10, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5, 1, 6, 8, 13, 16]), Any[9, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 8, 5, 4]), Any[13, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 9, 13, 7, 1]), Any[9, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 8, 2, 6, 12, 8]), Any[5, 8])])
problem_caesar_cipher_k_modulo_n_with_k_3_and_n_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1, 1, 4, 1, 2]), Any[1, 4, 4, 2, 4, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 0, 3]), Any[0, 4, 3, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 3, 2, 4]), Any[3, 4, 1, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1]), Any[4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 0]), Any[2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2, 2, 0, 2]), Any[2, 0, 0, 3, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 1, 2, 4, 3]), Any[0, 3, 4, 0, 2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2]), Any[4, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 2, 4]), Any[4, 0, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 0, 3, 4, 3, 3]), Any[1, 3, 1, 2, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[4])])
problem_prepend_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[16, 4, 10, 12, 5, 11]), Any[3, 16, 4, 10, 12, 5, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 8, 9, 4, 0]), Any[3, 13, 8, 9, 4, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 6]), Any[3, 0, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 3, 0, 3, 7]), Any[3, 5, 3, 0, 3, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 0]), Any[3, 6, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 9, 14, 14]), Any[3, 2, 5, 9, 14, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7]), Any[3, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 14, 10, 10, 14, 14]), Any[3, 13, 14, 10, 10, 14, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2, 11, 9, 3]), Any[3, 0, 2, 11, 9, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 14, 7]), Any[3, 11, 14, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 14, 2, 5, 12, 10, 3]), Any[3, 9, 14, 2, 5, 12, 10, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 0, 8, 0]), Any[3, 10, 0, 8, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 11]), Any[3, 14, 11])])
problem_prepend_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[6, 6, 8, 3, 12]), Any[2, 6, 6, 8, 3, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 16, 15, 0]), Any[2, 4, 3, 16, 15, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14]), Any[2, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 1, 0]), Any[2, 13, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 12]), Any[2, 1, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13]), Any[2, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14]), Any[2, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 0]), Any[2, 10, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 12, 1, 10, 5, 1]), Any[2, 15, 12, 1, 10, 5, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 5, 15, 10, 6]), Any[2, 12, 5, 15, 10, 6])])
problem_caesar_cipher_k_modulo_n_with_k_1_and_n_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 2, 3, 3, 1]), Any[0, 4, 3, 4, 4, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 2, 2, 2, 0, 2]), Any[2, 1, 3, 3, 3, 1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 2, 4]), Any[3, 2, 3, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 2, 4, 2]), Any[0, 4, 3, 0, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2, 2]), Any[0, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 2, 4, 0, 1, 0]), Any[1, 1, 3, 0, 1, 2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 3]), Any[3, 4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 0, 2, 1, 0]), Any[4, 4, 1, 3, 2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2]), Any[3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 4, 1, 0]), Any[2, 3, 0, 2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[])])
problem_is_mod_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 4, 9, 6]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[13]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[22, 10, 14, 12, 16]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 9]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[18, 12, 18, 22, 14, 10, 10]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 6, 0, 3]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[22, 0, 0, 10]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[14]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 16, 28, 16, 4, 2]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[7]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[18, 24, 14, 22, 12, 28]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[24, 22, 2, 14, 16, 8, 10]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 10, 9, 1]), false)])
problem_slice_k_n_with_k_1_and_n_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[5, 14, 5, 2, 13, 1, 7, 13, 1, 1]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 0, 1, 9, 3, 14, 6, 10, 12, 5]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 14, 0, 6, 8, 4, 0, 0, 11]), Any[16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 6, 15, 14]), Any[8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 9, 0, 9, 13]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 11, 13, 1, 16, 11, 3, 4, 11, 4]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 0, 13, 16, 10]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 9, 14, 10]), Any[9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 2, 11, 7]), Any[9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 5, 0]), Any[8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 4, 9, 6, 6, 1]), Any[16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 3, 10, 11, 4, 16, 7]), Any[10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 13, 8]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1, 5, 9, 0, 15, 14, 9, 12, 13]), Any[14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 11, 7, 8, 10, 16]), Any[15])])
problem_mult_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[14, 6, 10, 2, 7]), Any[56, 24, 40, 8, 28]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 12, 8, 11, 2, 7]), Any[4, 48, 32, 44, 8, 28]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 14, 6, 5, 8]), Any[20, 56, 24, 20, 32]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14]), Any[16, 56]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 6, 12, 1, 7]), Any[4, 24, 48, 4, 28]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11]), Any[44]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 5, 7, 4, 4, 6]), Any[12, 20, 28, 16, 16, 24]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 11, 4, 11, 1, 6, 12]), Any[0, 44, 16, 44, 4, 24, 48]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15]), Any[60]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 15, 13]), Any[52, 60, 52]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9]), Any[36])])
problem_has_head_in_tail = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 2]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 4]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1, 3, 4, 2]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2, 6, 10, 8, 12]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 11, 11]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 7]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 15, 2, 2, 2, 2]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 6, 16, 6, 2]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 13, 10]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 14, 14, 1, 7, 9, 4]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 3, 14, 11]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 13, 2, 2, 2, 4]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 5, 0]), true)])
problem_add_k_with_k_0 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 1, 10, 1]), Any[1, 7, 1, 10, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 14]), Any[2, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 15]), Any[0, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 14, 15, 7]), Any[10, 14, 15, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6]), Any[6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 12, 1, 6]), Any[13, 12, 1, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 11, 1, 11]), Any[3, 11, 1, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 7, 7, 3, 2]), Any[9, 7, 7, 3, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11]), Any[11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 6, 13, 4, 6]), Any[10, 6, 13, 4, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 7, 16, 11, 10, 3, 15]), Any[4, 7, 16, 11, 10, 3, 15])])
problem_caesar_cipher_k_modulo_n_with_k_4_and_n_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0, 0, 0])])
problem_remove_index_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[15, 1, 4, 12]), Any[15, 1, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 7, 4, 2, 3, 12, 8, 13]), Any[8, 7, 4, 3, 12, 8, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 5, 2, 13, 14, 5, 12, 6, 16, 11, 8]), Any[6, 5, 2, 14, 5, 12, 6, 16, 11, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 6, 2, 15, 9, 1, 6]), Any[5, 6, 2, 9, 1, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14, 15, 6]), Any[4, 14, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 4, 7, 12, 4, 3]), Any[14, 4, 7, 4, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 0, 6, 0]), Any[4, 0, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 12, 15, 1, 7, 3, 16, 10, 12, 14]), Any[13, 12, 15, 7, 3, 16, 10, 12, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 13, 8, 3, 15, 0, 4, 2, 11]), Any[16, 13, 8, 15, 0, 4, 2, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 9, 11, 5, 11, 1]), Any[4, 9, 11, 11, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 12, 15]), Any[2, 1, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 14, 8, 15, 8]), Any[7, 14, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 11, 12, 9, 15, 16, 0, 8]), Any[0, 11, 12, 15, 16, 0, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 7, 13, 8, 13, 16, 7, 10]), Any[6, 7, 13, 13, 16, 7, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 9, 10, 2, 3, 5, 1, 8]), Any[12, 9, 10, 3, 5, 1, 8])])
problem_kth_smallest_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 10, 4, 11, 14]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[13]), 13), 
	IOExample(Dict{Symbol, Any}(:i => Any[10]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 8, 12]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 15, 10, 10, 3, 8, 1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 10, 8, 14, 2, 12]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 0]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[14]), 14), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 0, 3, 2, 9, 14]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 13]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 14, 13]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 14]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 12]), 3)])
problem_range = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => 0), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => 1), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => 2), Any[0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => 3), Any[0, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => 7), Any[0, 1, 2, 3, 4, 5, 6]), 
	IOExample(Dict{Symbol, Any}(:i => 5), Any[0, 1, 2, 3, 4]), 
	IOExample(Dict{Symbol, Any}(:i => 3), Any[0, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => 6), Any[0, 1, 2, 3, 4, 5]), 
	IOExample(Dict{Symbol, Any}(:i => 2), Any[0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => 3), Any[0, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => 5), Any[0, 1, 2, 3, 4]), 
	IOExample(Dict{Symbol, Any}(:i => 2), Any[0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => 1), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => 3), Any[0, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => 5), Any[0, 1, 2, 3, 4])])
problem_bool_identify_is_mod_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 7, 0, 8, 1, 15, 10]), Any[true, true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 6, 14, 11, 4, 15]), Any[true, true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1, 1, 1, 6, 1]), Any[true, true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 0, 1, 1, 1, 1, 1]), Any[true, true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 7, 9, 10]), Any[true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1]), Any[true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 0, 15, 9, 13]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 6, 1, 15, 12, 13]), Any[true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 3, 14]), Any[true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[])])
problem_slice_k_n_with_k_5_and_n_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[4, 6, 13, 1, 3, 8, 5, 4, 16, 8, 6, 15]), Any[3, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 4, 5, 8, 0, 4, 2, 11]), Any[0, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 15, 6, 1, 4, 4, 11, 5, 15, 12]), Any[4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 3, 5, 12, 1, 7, 15, 12, 6, 1, 8, 15, 5, 2, 16]), Any[1, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 13, 3, 6, 5, 1, 1, 7]), Any[5, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 15, 5, 13, 14, 10, 2, 2, 15, 16, 1, 13, 15, 4]), Any[14, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 9, 11, 10, 14, 11, 13, 12, 10, 16]), Any[14, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 10, 14, 9, 4, 7, 1, 7, 1, 1, 5, 8]), Any[4, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 12, 16, 6, 2, 14, 9, 15, 6]), Any[2, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 12, 11, 6, 4, 4, 16, 9, 10, 0, 4]), Any[4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 12, 12, 15, 15, 7, 5, 0, 1, 13, 11, 0]), Any[15, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 13, 14, 5, 13, 15, 16, 5, 8, 3, 15, 2, 0, 12, 6]), Any[13, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 15, 9, 9, 2, 2, 3, 8, 14, 6, 5, 6]), Any[2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 7, 1, 9, 14, 0, 9, 4, 14, 16, 8, 0, 4]), Any[14, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 11, 16, 14, 7, 7, 11, 11, 4, 5, 15, 6]), Any[7, 7])])
problem_bool_identify_geq_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[14, 2, 10, 5, 6]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, -1, -1, -1, 1, -1]), Any[true, false, false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, -1]), Any[false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 4, 1, 13, 9]), Any[false, true, true, false, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[-1, -1, 6, 15]), Any[false, false, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 11, 7, 1]), Any[true, true, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 0, 4, 3, 1, 10, 0]), Any[true, false, true, true, false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 5, 9, 13, 1, 13]), Any[true, true, true, true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 10, 0, 0]), Any[false, true, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 2, 13, 11, 5, 9, 4]), Any[true, true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 13, 10, 11, 11]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[false])])
problem_append_index_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[11, 5, 15, 11]), Any[11, 5, 15, 11, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 15]), Any[3, 15, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 6, 13, 5]), Any[0, 6, 13, 5, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 2, 7, 12, 8, 14, 16, 4, 12]), Any[6, 2, 7, 12, 8, 14, 16, 4, 12, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 6, 10, 13]), Any[4, 6, 10, 13, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 1, 1, 13, 5, 0, 1]), Any[5, 1, 1, 13, 5, 0, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 12, 12, 15, 5, 12, 2, 8, 2]), Any[14, 12, 12, 15, 5, 12, 2, 8, 2, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 4]), Any[11, 4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 8, 8, 1, 5, 15, 6]), Any[1, 7, 8, 8, 1, 5, 15, 6, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 12, 7, 8, 13, 11, 8, 4]), Any[7, 12, 7, 8, 13, 11, 8, 4, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 0, 11, 14]), Any[15, 0, 11, 14, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 12, 1, 2, 5, 1, 14]), Any[13, 12, 1, 2, 5, 1, 14, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 1, 4, 15]), Any[1, 3, 1, 4, 15, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 11, 8, 4, 10, 11, 4]), Any[4, 11, 8, 4, 10, 11, 4, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 14, 9]), Any[12, 14, 9, 14])])
problem_sum = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 1]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[10]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 6]), 20), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 5]), 13), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 6, 12, 1, 7]), 27), 
	IOExample(Dict{Symbol, Any}(:i => Any[11]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 5, 7, 4, 4, 6]), 29), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 11, 4, 11, 1, 6, 12]), 45), 
	IOExample(Dict{Symbol, Any}(:i => Any[15]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 15, 13]), 41)])
problem_count_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 9, 16]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 8, 4, 13, 12]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 16]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1, 1]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 5, 1, 13]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 16, 1]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 6, 8, 13, 14]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1, 4, 1, 1]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 1, 1, 1]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 7]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 15]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), 0)])
problem_slice_k_n_with_k_5_and_n_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[15, 9, 13, 4, 4, 0, 16, 6, 4, 3, 0, 14, 16, 10, 13, 5]), Any[4, 0, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 0, 6, 15, 5, 11, 9, 3, 7, 10]), Any[5, 11, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 14, 14, 10, 8, 3, 15, 3]), Any[10, 8, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 7, 0, 10, 10, 10, 15, 11, 14, 4, 16, 5]), Any[10, 10, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 12, 5, 15, 16, 16, 1, 7, 1, 15]), Any[16, 16, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 6, 1, 2, 7, 9, 11, 10, 5, 8, 2, 16, 4, 0]), Any[7, 9, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 15, 15, 9, 3, 7, 7, 6, 8, 1, 1, 7, 9]), Any[3, 7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 7, 15, 6, 10, 9, 8, 11, 2, 11]), Any[10, 9, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 16, 5, 12, 15, 15, 10, 9, 1, 4, 7, 12, 2, 15, 12, 14]), Any[15, 15, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 6, 6, 11, 8, 5, 11, 3, 16, 6, 14, 15, 5, 2, 15]), Any[8, 5, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 0, 12, 14, 8, 8, 11, 7, 16, 11, 16, 2, 0, 14]), Any[8, 8, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 12, 8, 14, 9, 16, 6, 3, 2, 0, 10, 14, 11, 10]), Any[9, 16, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 0, 11, 0, 13, 2, 10, 5, 10, 8]), Any[13, 2, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 10, 5, 2, 1, 11, 8, 9, 6, 10, 6, 11, 11, 4]), Any[1, 11, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 10, 6, 3, 9, 6, 16, 14, 12, 2, 2]), Any[9, 6, 16])])
problem_caesar_cipher_k_modulo_n_with_k_3_and_n_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0]), Any[1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 1, 1, 1, 2]), Any[3, 0, 0, 0, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 3, 1, 2, 3, 0, 0]), Any[3, 2, 0, 1, 2, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 0, 3, 3, 3]), Any[2, 3, 2, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 2, 2, 1, 2, 1]), Any[2, 1, 1, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 3, 1]), Any[3, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 2, 3, 2]), Any[0, 2, 1, 2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3, 3, 0, 1]), Any[0, 1, 2, 2, 3, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 3, 1]), Any[0, 0, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 0, 1, 2]), Any[1, 2, 3, 0, 1])])
problem_has_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[3, 8, 1]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 5, 5, 5, 5]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 13]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 5, 5, 5, 6, 5]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 0, 5, 5, 5, 5, 5]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 7, 9, 10]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 5]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 0, 15, 9, 13]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 6, 1, 15, 12, 13]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 3, 14]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 8, 0, 14, 3, 10]), false)])
problem_slice_k_n_with_k_2_and_n_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[9, 13, 11, 2, 6, 14, 11, 6, 8, 2, 7]), Any[13, 11, 2, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 6, 9, 1, 2, 13, 16]), Any[6, 9, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1, 5, 0, 2, 11, 8, 11, 1, 1, 0, 3]), Any[1, 5, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 15, 5, 5, 0, 16, 12, 12, 8, 5, 4, 16]), Any[15, 5, 5, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 1, 13, 11, 14, 9, 8, 12, 8, 5, 8, 3]), Any[1, 13, 11, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 16, 14, 9, 16, 13, 10, 3, 13, 9, 11]), Any[16, 14, 9, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 8, 3, 4, 0, 14, 4, 10, 7, 15, 6]), Any[7, 8, 3, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 10, 16, 7, 14, 1, 5, 11, 15, 11, 13, 6, 14, 14]), Any[10, 16, 7, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 8, 11, 6, 7, 6, 4, 4, 7]), Any[9, 8, 11, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 10, 7, 11, 7, 4, 6]), Any[10, 7, 11, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 0, 15, 7, 3, 16, 15, 16, 12, 13]), Any[0, 15, 7, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 16, 7, 11, 3, 14, 9, 16, 8, 12]), Any[16, 7, 11, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 6, 12, 6, 8, 11, 7, 2, 11, 2, 4, 1]), Any[6, 12, 6, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 13, 4, 12, 3, 6, 5, 7, 13]), Any[13, 4, 12, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 0, 1, 12, 11, 4, 8, 0]), Any[0, 1, 12, 11])])
problem_prepend_index_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[16, 0, 8]), Any[16, 16, 0, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 7, 16, 16, 6]), Any[6, 6, 7, 16, 16, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 5, 9, 14]), Any[11, 11, 5, 9, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 0, 0, 13, 1]), Any[5, 5, 0, 0, 13, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 3, 1, 2, 3, 11, 8]), Any[0, 0, 9, 3, 1, 2, 3, 11, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 8, 10, 8, 4]), Any[9, 9, 8, 10, 8, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 10, 5, 13, 1, 6, 11, 10]), Any[7, 7, 10, 5, 13, 1, 6, 11, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 5, 11, 16]), Any[11, 11, 5, 11, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 8, 12]), Any[0, 0, 0, 8, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 8, 6, 6, 11]), Any[3, 3, 8, 6, 6, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 1]), Any[4, 4, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 5, 11]), Any[8, 8, 5, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 3, 2, 13, 7, 9]), Any[2, 2, 1, 3, 2, 13, 7, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 13, 15, 10, 10, 8]), Any[7, 7, 13, 15, 10, 10, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 13, 12, 5, 8]), Any[1, 1, 3, 13, 12, 5, 8])])
problem_caesar_cipher_k_modulo_n_with_k_3_and_n_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 2]), Any[0, 0, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 2]), Any[0, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 1, 0, 2, 1]), Any[2, 0, 1, 0, 2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1]), Any[1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2]), Any[1, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0]), Any[0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 2, 1, 2, 1]), Any[1, 0, 1, 2, 1, 2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0, 1, 1, 1]), Any[0, 1, 0, 1, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2]), Any[2, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 0]), Any[1, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 1, 2]), Any[0, 1, 1, 2])])
problem_modulo_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 1, 3]), Any[0, 2, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 11, 13]), Any[1, 1, 2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 2, 2]), Any[0, 2, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 15]), Any[2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 0, 3]), Any[0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 4, 8, 11, 0, 8, 11]), Any[0, 1, 2, 2, 0, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 13, 8, 15, 8, 10, 0]), Any[2, 1, 2, 0, 2, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8]), Any[1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 11, 8, 8]), Any[0, 2, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 12, 7, 13, 9]), Any[1, 1, 0, 1, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 4, 11, 10]), Any[1, 1, 2, 1])])
problem_is_mod_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 6, 8]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 4, 7, 9]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 11, 14, 5]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[65, 60]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 16, 9, 6]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 8]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[60, 25, 45, 25, 25]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 10, 3, 3, 10, 4]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[40, 5, 15, 15, 25]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[65, 35, 5, 35, 5, 80]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 10, 16, 6, 8, 13]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 12, 12, 15, 2, 4]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), false)])
problem_take_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 16, 3, 16, 0]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 9, 4]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 12, 5, 12, 2, 10]), Any[14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 16]), Any[11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 0, 4, 1]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 9, 0, 12]), Any[10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 0]), Any[8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 5, 4, 11, 4, 4]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 14]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 13, 10, 5]), Any[10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 7, 12, 16]), Any[6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 8, 10, 14, 15, 5, 11]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 12]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 7]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 10, 15, 3, 11]), Any[2])])
problem_bool_identify_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 13]), Any[false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3, 3, 3, 6, 3]), Any[true, true, true, true, true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 0, 3, 3, 3, 3, 3]), Any[false, false, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 7, 9, 10]), Any[false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3]), Any[true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 0, 15, 9, 13]), Any[false, false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 6, 1, 15, 12, 13]), Any[true, false, false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 3, 14]), Any[false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 8, 0, 14, 3, 10]), Any[false, false, false, false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3, 4]), Any[true, true, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 12]), Any[false, false, false])])
problem_rotate_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[16, 2, 16, 6, 8, 12, 12, 3, 6, 8, 5, 5]), Any[5, 5, 16, 2, 16, 6, 8, 12, 12, 3, 6, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12, 6, 9]), Any[6, 9, 2, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 1, 6, 5, 14, 14, 0, 5, 6]), Any[5, 6, 7, 1, 6, 5, 14, 14, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 16, 13, 1, 11, 7, 2, 5, 9, 11, 13, 2, 9, 9, 5, 11]), Any[5, 11, 11, 16, 13, 1, 11, 7, 2, 5, 9, 11, 13, 2, 9, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 9, 7, 10, 8, 8, 6, 12]), Any[6, 12, 8, 9, 7, 10, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 12, 16, 4, 3, 7, 13, 13, 0, 6, 4, 12, 10, 10, 0, 5, 7]), Any[5, 7, 14, 12, 16, 4, 3, 7, 13, 13, 0, 6, 4, 12, 10, 10, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 16, 7, 7, 6, 3, 16, 12]), Any[16, 12, 11, 16, 7, 7, 6, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 0, 12, 11, 3, 15, 14, 13, 13, 4]), Any[13, 4, 6, 0, 12, 11, 3, 15, 14, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 1, 13, 5, 13, 14, 7, 6, 6, 0]), Any[6, 0, 10, 1, 13, 5, 13, 14, 7, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 3, 15, 13]), Any[15, 13, 12, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 13, 14, 13, 1, 14, 12]), Any[14, 12, 0, 13, 14, 13, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 13, 9, 13]), Any[9, 13, 10, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 11, 0, 13, 3, 9, 1, 13, 10, 8, 2, 12, 9, 11]), Any[9, 11, 7, 11, 0, 13, 3, 9, 1, 13, 10, 8, 2, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 7, 8, 16, 10, 0, 10, 8, 9, 8, 1, 9, 3]), Any[9, 3, 2, 7, 8, 16, 10, 0, 10, 8, 9, 8, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 15, 0, 2, 1, 12, 8, 8, 4, 3]), Any[4, 3, 13, 15, 0, 2, 1, 12, 8, 8])])
problem_pow_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 2, 2]), Any[7776, 32768, 32, 32]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 15]), Any[537824, 759375]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 0, 3]), Any[59049, 0, 243]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 4, 8, 11, 0, 8, 11]), Any[248832, 1024, 32768, 161051, 0, 32768, 161051]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 13, 8, 15, 8, 10, 0]), Any[537824, 371293, 32768, 759375, 32768, 100000, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8]), Any[100000, 32768]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 11, 8, 8]), Any[248832, 161051, 32768, 32768]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 12, 7, 13, 9]), Any[1024, 1024, 248832, 16807, 371293, 59049]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 4, 11, 10]), Any[371293, 1024, 161051, 100000]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 12]), Any[1048576, 248832]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 4, 8, 1, 0, 10]), Any[759375, 1024, 32768, 1, 0, 100000]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 10, 4, 11]), Any[0, 100000, 1024, 161051]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 13, 1, 10, 5, 2, 8]), Any[0, 371293, 1, 100000, 3125, 32, 32768])])
problem_slice_k_n_with_k_4_and_n_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[12, 12, 13, 16, 8, 14, 6, 13]), Any[16, 8, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 8, 7, 8, 4, 3, 6, 1, 10, 8, 5, 0, 4, 12, 15]), Any[8, 4, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 15, 12, 16, 13, 5, 6, 2]), Any[16, 13, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 8, 0, 13, 14, 11, 6, 7, 13, 11, 1, 3]), Any[13, 14, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 1, 15, 0, 10, 9, 3, 13, 1, 12, 15, 3, 14, 1, 6]), Any[0, 10, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 4, 3, 7, 1, 10, 14, 7]), Any[7, 1, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 8, 11, 16, 15, 11, 5, 5, 10, 0, 12, 8, 3, 9]), Any[16, 15, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 6, 5, 2, 6, 7, 15, 5, 5, 7]), Any[2, 6, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 5, 13, 3, 15, 5, 12, 5, 4, 2, 2, 3, 16]), Any[3, 15, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 7, 16, 12, 13, 12, 1, 2]), Any[16, 12, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 14, 1, 4, 1, 16, 6, 3, 1, 7, 9]), Any[4, 1, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 15, 0, 16, 4, 11, 2, 13, 7, 5, 8]), Any[16, 4, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 5, 14, 11, 1, 3, 12, 7, 14, 10, 15, 10, 2]), Any[11, 1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 7, 14, 3, 6, 10, 6, 8, 1]), Any[3, 6, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 9, 0, 13, 8, 10, 14, 8, 15, 10, 10, 6, 14]), Any[13, 8, 10])])
problem_caesar_cipher_k_modulo_n_with_k_5_and_n_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 4, 3, 4, 1]), Any[3, 4, 3, 4, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 0, 1, 0, 3, 0, 1]), Any[3, 0, 1, 0, 3, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 2, 2, 3, 1, 2]), Any[2, 1, 2, 2, 3, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 4, 4, 2, 3, 3]), Any[0, 4, 4, 2, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 1, 0]), Any[4, 3, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 0, 4, 4, 2]), Any[3, 0, 4, 4, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 0, 4]), Any[1, 0, 0, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 4]), Any[0, 1, 4])])
problem_count_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[5]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 6]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 5, 5, 5]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 11, 5]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 14]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 12, 3, 15, 5, 5]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 2, 14, 3, 9, 12]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 2, 5, 5, 5]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 12, 7]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[14]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 0]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 1, 16]), 0)])
problem_replace_all_with_index_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[12, 11, 1, 13, 14, 2, 11, 6, 6, 5, 6]), Any[13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 7, 6, 13, 1, 0, 1, 15, 10, 14]), Any[13, 13, 13, 13, 13, 13, 13, 13, 13, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 1, 3, 13, 10, 14]), Any[13, 13, 13, 13, 13, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 4, 3, 7, 13, 13, 0, 6, 4]), Any[7, 7, 7, 7, 7, 7, 7, 7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 10, 0, 5, 7, 16, 2, 7, 8, 16]), Any[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 10, 8, 9, 8, 1, 9, 3]), Any[9, 9, 9, 9, 9, 9, 9, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 16, 4, 8, 4, 0, 0, 16, 14, 7]), Any[8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14, 0, 9, 15, 3, 7, 5, 14, 7]), Any[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 4, 2, 5]), Any[5, 5, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 11, 5, 6, 10, 0, 15, 6]), Any[6, 6, 6, 6, 6, 6, 6, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 15, 16, 5]), Any[5, 5, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 5, 4, 3, 7, 1, 5, 10, 3, 15]), Any[3, 3, 3, 3, 3, 3, 3, 3, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 16, 3, 3, 11, 16, 0]), Any[3, 3, 3, 3, 3, 3, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 4, 13, 3]), Any[3, 3, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 15, 6, 9, 2]), Any[9, 9, 9, 9, 9])])
problem_dup = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 2, 4]), Any[7, 7, 2, 2, 4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 3, 7, 3, 12, 8]), Any[14, 14, 3, 3, 7, 7, 3, 3, 12, 12, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 7]), Any[10, 10, 7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 8, 16]), Any[7, 7, 8, 8, 16, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 9, 2]), Any[4, 4, 9, 9, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15]), Any[15, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 0, 9, 15, 7, 14, 9]), Any[8, 8, 0, 0, 9, 9, 15, 15, 7, 7, 14, 14, 9, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 2, 6, 6, 9]), Any[1, 1, 7, 7, 2, 2, 6, 6, 6, 6, 9, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 15, 13]), Any[16, 16, 15, 15, 13, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 16, 5]), Any[8, 8, 16, 16, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 5, 8, 16]), Any[0, 0, 5, 5, 8, 8, 16, 16])])
problem_remove_mod_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[10, 10, 16, 7, 2]), Any[7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 3, 1, 13, 7, 7, 4]), Any[5, 3, 1, 13, 7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 0]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 1, 3, 2, 14]), Any[13, 1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 7, 15, 10, 13, 3, 12]), Any[15, 7, 15, 13, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 10]), Any[7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 15, 5]), Any[1, 15, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 7, 6, 8]), Any[7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 7, 1, 14]), Any[3, 7, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 2, 6]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 11, 7]), Any[11, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 0, 4, 12]), Any[7])])
problem_take_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[10, 5, 1, 13, 10, 8, 9, 10, 13, 7, 5]), Any[10, 5, 1, 13, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 10, 9, 6, 10, 14, 7, 11, 16, 15]), Any[1, 10, 9, 6, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 12, 15, 13, 10, 16, 8, 4, 6, 7]), Any[7, 12, 15, 13, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 5, 3, 12, 4, 16, 8, 6, 2, 2]), Any[12, 5, 3, 12, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 13, 2, 2, 3, 9, 16, 10, 15]), Any[13, 13, 2, 2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 0, 12, 14, 15, 15]), Any[13, 0, 12, 14, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 12, 11, 11, 0, 15, 1, 4, 6, 11]), Any[1, 0, 12, 11, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 13, 0, 4, 14, 10, 10]), Any[7, 13, 0, 4, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 13, 4, 5, 10, 15, 4, 4, 2, 2]), Any[15, 13, 4, 5, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 12, 4, 9, 7, 10, 8, 15, 10, 15, 0, 15]), Any[7, 12, 4, 9, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 11, 10, 16, 9, 2, 6]), Any[0, 11, 10, 16, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 9, 11, 7, 11, 10, 1, 7, 1, 8, 1, 1]), Any[4, 9, 11, 7, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 12, 9, 13, 16, 6, 1, 9, 10, 14, 9]), Any[7, 12, 9, 13, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 10, 13, 14, 6, 5, 13]), Any[5, 10, 13, 14, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 16, 10, 1, 4, 4, 3, 1, 1, 1]), Any[7, 16, 10, 1, 4])])
problem_replace_all_with_index_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8, 6, 6, 6, 14, 6]), Any[8, 8, 8, 8, 8, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 11, 9, 13]), Any[11, 11, 11, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 7, 10, 11, 7]), Any[7, 7, 7, 7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 15]), Any[15, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 7, 16, 14, 13, 12]), Any[7, 7, 7, 7, 7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 14, 12]), Any[14, 14, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 16, 6, 0, 5, 10]), Any[16, 16, 16, 16, 16, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14, 15, 1, 4, 5, 12]), Any[14, 14, 14, 14, 14, 14, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 0, 11, 6, 14]), Any[5, 5, 5, 5, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 3, 5, 8, 3, 7, 14, 1]), Any[3, 3, 3, 3, 3, 3, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 8]), Any[8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 4, 5]), Any[4, 4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 10, 7]), Any[10, 10, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 5, 7, 5, 3, 3]), Any[3, 3, 3, 3, 3, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 10, 9, 13, 0]), Any[10, 10, 10, 10, 10])])
problem_index_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[15, 3, 9, 14, 0, 2, 5]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 7, 12, 5]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14, 13, 8, 14, 14, 16]), 14), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 10]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 2]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 11]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 10, 6, 8, 1, 3, 0]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 9, 1]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 13, 10, 6, 8]), 13), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 14]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 9, 0, 3, 2, 16, 12, 4, 8]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 8, 11, 16, 14, 13, 8]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 10, 0, 6, 10, 8, 10, 12, 11]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 13, 4, 4, 12, 7]), 13), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 1, 10, 13, 4, 11, 10, 5]), 1)])
problem_caesar_cipher_k_modulo_n_with_k_5_and_n_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0, 0, 1]), Any[0, 0, 1, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1, 1, 0]), Any[0, 0, 0, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0, 1, 1, 0, 0]), Any[0, 0, 1, 0, 0, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0]), Any[1, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 1]), Any[0, 1, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 1, 1]), Any[1, 1, 1, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 1]), Any[1, 1, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 1, 1, 0]), Any[1, 1, 0, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0, 1, 0, 1]), Any[1, 0, 1, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 1, 0, 1, 1, 0]), Any[0, 0, 0, 1, 0, 0, 1])])
problem_caesar_cipher_k_modulo_n_with_k_4_and_n_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 1]), Any[0, 0, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 1, 2, 2, 2]), Any[2, 2, 0, 2, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 0, 2, 0, 1]), Any[2, 1, 1, 0, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 1]), Any[2, 1, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 2, 2]), Any[1, 1, 1, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 1, 1]), Any[2, 1, 2, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 2, 1]), Any[2, 0, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 1]), Any[2, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0]), Any[1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0, 0]), Any[2, 2, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0, 0, 1, 0, 0]), Any[2, 2, 1, 1, 2, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 1, 1, 2, 1, 0]), Any[0, 0, 2, 2, 0, 2, 1])])
problem_caesar_cipher_k_modulo_n_with_k_1_and_n_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 2]), Any[3, 0, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 1, 3, 1]), Any[2, 3, 2, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 0, 1, 2, 1, 1]), Any[3, 3, 1, 2, 3, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 2]), Any[3, 2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2, 1, 2]), Any[1, 3, 2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 0]), Any[2, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 1]), Any[3, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 3, 3]), Any[1, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 2, 1, 3, 2]), Any[3, 1, 3, 2, 0, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2]), Any[2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 1, 2, 3]), Any[1, 2, 2, 3, 0])])
problem_drop_k_with_k_0 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[10]), Any[10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 16, 12, 14]), Any[9, 16, 12, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 10, 6, 7, 5, 6, 14]), Any[14, 10, 6, 7, 5, 6, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 13, 4]), Any[2, 13, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 11, 14]), Any[11, 11, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 8, 12, 8, 14]), Any[15, 8, 12, 8, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 12, 1, 9, 7, 9, 13]), Any[13, 12, 1, 9, 7, 9, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 8, 3, 6]), Any[13, 8, 3, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 12, 10, 11, 0, 10, 2]), Any[10, 12, 10, 11, 0, 10, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 9, 0, 7]), Any[14, 9, 0, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 2, 1, 4]), Any[7, 4, 2, 1, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 2, 4, 9, 9, 1]), Any[5, 2, 4, 9, 9, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 2, 15, 14, 6, 4]), Any[13, 2, 15, 14, 6, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5]), Any[5, 5])])
problem_fibonacci = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => 2), 1), 
	IOExample(Dict{Symbol, Any}(:i => 4), 3), 
	IOExample(Dict{Symbol, Any}(:i => 6), 8), 
	IOExample(Dict{Symbol, Any}(:i => 9), 34), 
	IOExample(Dict{Symbol, Any}(:i => 9), 34), 
	IOExample(Dict{Symbol, Any}(:i => 9), 34), 
	IOExample(Dict{Symbol, Any}(:i => 9), 34), 
	IOExample(Dict{Symbol, Any}(:i => 8), 21), 
	IOExample(Dict{Symbol, Any}(:i => 2), 1), 
	IOExample(Dict{Symbol, Any}(:i => 6), 8), 
	IOExample(Dict{Symbol, Any}(:i => 2), 1), 
	IOExample(Dict{Symbol, Any}(:i => 1), 1), 
	IOExample(Dict{Symbol, Any}(:i => 6), 8), 
	IOExample(Dict{Symbol, Any}(:i => 13), 233), 
	IOExample(Dict{Symbol, Any}(:i => 8), 21)])
problem_drop_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[15, 6, 2, 1, 7, 7, 2, 11, 14, 6, 7, 11]), Any[7, 2, 11, 14, 6, 7, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 1, 12, 11, 6, 11, 15, 11, 2, 7, 8]), Any[11, 15, 11, 2, 7, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 10, 1, 4, 3, 5, 6, 0, 6, 3, 16]), Any[5, 6, 0, 6, 3, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 10, 1, 5, 6, 16, 12, 9, 2, 7, 13]), Any[16, 12, 9, 2, 7, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 8, 14, 3, 14, 3, 15, 11, 11, 14]), Any[3, 15, 11, 11, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 2, 8, 4, 1, 9, 9, 4]), Any[9, 9, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14, 0, 12, 7]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 9, 16, 2, 7, 12]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 8, 7, 16, 13, 3, 8, 0, 13]), Any[3, 8, 0, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 15, 0, 1, 8, 6, 2, 11, 4, 11]), Any[6, 2, 11, 4, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 16, 16, 16, 6, 0, 4, 7]), Any[0, 4, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 7, 3, 14, 4, 9, 1, 13, 4, 8, 6]), Any[9, 1, 13, 4, 8, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 13, 16, 12, 4, 5]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 11, 10, 7, 13, 11, 9]), Any[11, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 15, 3, 15, 7, 7, 11]), Any[7, 11])])
problem_bool_identify_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 6]), Any[false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 5, 5, 5]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 11, 5]), Any[true, false, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), Any[false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 14]), Any[false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 12, 3, 15, 5, 5]), Any[false, false, false, false, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 2, 14, 3, 9, 12]), Any[false, false, false, false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 2, 5, 5, 5]), Any[true, true, false, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 12, 7]), Any[false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14]), Any[false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 0]), Any[true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 1, 16]), Any[false, false, false])])
problem_min = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 5, 8, 12]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 9, 2, 11]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 14, 2]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 15, 14, 3, 5, 15]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 12, 6, 15, 12, 9]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 9, 7, 7, 8, 1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 11, 13]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1, 8, 15, 7]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1, 3]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 15, 2, 0]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 6, 7, 6, 8]), 3)])
problem_caesar_cipher_k_modulo_n_with_k_5_and_n_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0]), Any[0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0]), Any[0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0]), Any[0, 0, 0])])
problem_pow_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[6, 1]), Any[6, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 4, 6, 9]), Any[0, 4, 6, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 16, 6, 12]), Any[1, 16, 6, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 4, 3, 1, 2, 16]), Any[2, 4, 3, 1, 2, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 3, 1, 9, 9, 5]), Any[7, 3, 1, 9, 9, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 7]), Any[6, 4, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 0, 12, 7]), Any[7, 0, 12, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 8, 7]), Any[2, 2, 8, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 11, 8, 16]), Any[10, 11, 8, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 8, 7, 4, 16]), Any[5, 5, 8, 7, 4, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14]), Any[14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 13, 8, 0, 14, 0, 5]), Any[8, 13, 8, 0, 14, 0, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9]), Any[9])])
problem_mult_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 10, 8, 8]), Any[21, 30, 24, 24]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 7, 7]), Any[36, 21, 21]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 13, 3, 9, 1]), Any[0, 39, 9, 27, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8, 2, 12, 9, 11]), Any[30, 24, 6, 36, 27, 33]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 6, 9, 4, 16, 10, 12]), Any[0, 18, 27, 12, 48, 30, 36]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 0, 1, 2, 6, 4]), Any[30, 0, 3, 6, 18, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 6, 10, 10, 8, 15, 16]), Any[6, 18, 30, 30, 24, 45, 48]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 7, 5, 4, 0, 13]), Any[3, 6, 21, 15, 12, 0, 39]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 3]), Any[45, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 14, 13, 5, 8, 8, 9]), Any[36, 42, 39, 15, 24, 24, 27]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 11, 0]), Any[27, 33, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 8, 4, 3, 7]), Any[21, 24, 12, 9, 21])])
problem_drop_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 0, 3, 6, 10, 4]), Any[10, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 13, 0, 6, 13]), Any[13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 5, 2, 14, 9, 3]), Any[9, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 13, 4, 2]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 12, 2, 4, 15, 16]), Any[15, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 5, 6, 7, 1, 3, 9, 14, 8]), Any[7, 1, 3, 9, 14, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 8, 4, 5]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 10, 12, 0, 2, 10, 9, 6]), Any[2, 10, 9, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 8, 1]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 14, 14, 11, 8, 14, 3, 8, 6, 1]), Any[8, 14, 3, 8, 6, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 4, 4, 13, 12]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 16, 6, 13, 16, 4, 7]), Any[16, 4, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 8, 1, 14, 9, 6]), Any[14, 9, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 1, 8, 6, 5, 4, 10, 12, 15, 8]), Any[5, 4, 10, 12, 15, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 2, 7, 14, 6, 0, 2, 14, 2, 16]), Any[6, 0, 2, 14, 2, 16])])
problem_slice_k_n_with_k_3_and_n_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[15, 10, 1, 10, 15, 13, 5, 4, 3, 12, 0, 5, 1, 9, 4]), Any[1, 10, 15, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 11, 15, 0, 16, 16, 1, 2, 16, 11, 2, 13, 14]), Any[15, 0, 16, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 11, 16, 9, 3, 9, 3, 5, 8, 8, 12, 11, 0, 6]), Any[16, 9, 3, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 10, 13, 10, 15, 1, 0, 11, 0, 15, 3, 7, 4, 11]), Any[13, 10, 15, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 8, 16, 9, 14, 9, 12, 1, 1, 0, 13, 0]), Any[16, 9, 14, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 11, 1, 3, 16, 2, 15, 2, 16, 5]), Any[1, 3, 16, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 5, 15, 2, 7, 11, 8, 4, 12, 2, 4]), Any[15, 2, 7, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 9, 3, 3, 4, 8, 9, 6, 6]), Any[3, 3, 4, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 4, 13, 12, 3, 14, 12, 16]), Any[13, 12, 3, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 9, 12, 0, 0, 3, 13, 11, 13]), Any[12, 0, 0, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 7, 16, 2, 13, 8, 14, 14, 15, 9, 8, 9, 1]), Any[16, 2, 13, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 1, 10, 0, 14, 12, 5, 1, 12]), Any[10, 0, 14, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 14, 0, 7, 12, 14, 4, 7, 0, 12, 10]), Any[14, 0, 7, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 0, 6, 6, 12, 7, 3, 13, 8]), Any[6, 6, 12, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 10, 5, 12, 3, 8, 0, 16, 8, 2]), Any[5, 12, 3, 8])])
problem_index_head = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 2]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 4]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1, 3, 4, 2]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2, 6, 10, 8, 12]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 10, 1, 4]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 15, 9, 10, 14]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 2, 6, 2, 15, 10, 13]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 6, 9, 3, 11, 1]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 9, 7, 7, 3, 2]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 11]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 6, 13, 4, 6]), 4)])
problem_caesar_cipher_k_modulo_n_with_k_4_and_n_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 2]), Any[2, 3, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 1, 3, 1]), Any[1, 2, 1, 3, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 0, 1, 2, 1, 1]), Any[2, 2, 0, 1, 2, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 2]), Any[2, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2, 1, 2]), Any[0, 2, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 0]), Any[1, 3, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 1]), Any[2, 3, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 3, 3]), Any[0, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 2, 1, 3, 2]), Any[2, 0, 2, 1, 3, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2]), Any[1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 1, 2, 3]), Any[0, 1, 1, 2, 3])])
problem_kth_largest_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[3, 13, 12]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 10, 8, 15, 9, 15, 14, 2, 12]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 13, 5, 2]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 15, 13, 0, 15]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 16, 7, 6, 3]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12, 7, 12]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 0]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 1, 6, 12, 5, 6, 10, 10]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 3, 2, 8]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 10, 5, 13, 5, 1]), 13), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 11, 4, 15, 14, 16, 2]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 5, 5]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 5, 7, 15, 6]), 12)])
problem_len = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 1]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 9]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 14, 8, 2, 12, 10, 3]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 7]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 11, 10, 12, 13]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[15]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 6, 2, 8, 9]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 14, 11]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 15, 0, 1, 3, 16]), 6)])
problem_remove_mod_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[3, 32, 32, 36]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 14]), Any[10, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[20]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10]), Any[10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[20, 11, 0, 20, 24, 10, 24]), Any[11, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 24, 16, 24]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[28, 6, 20, 16, 5]), Any[6, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 7, 16, 14, 13, 12, 3]), Any[11, 7, 14, 13, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 9, 4, 16, 6]), Any[9, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14, 15, 1]), Any[14, 15, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 12]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 3, 5, 8, 3, 7]), Any[10, 3, 5, 3, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5, 3, 3, 4, 5]), Any[9, 5, 3, 3, 5])])
problem_replace_all_with_index_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[6]), Any[6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2, 6]), Any[4, 4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 15, 10, 14, 4, 15, 10, 14]), Any[16, 16, 16, 16, 16, 16, 16, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 6]), Any[7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8, 1, 12]), Any[10, 10, 10, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 10]), Any[14, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 9, 14, 11, 13, 7, 1, 10]), Any[3, 3, 3, 3, 3, 3, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 11, 15, 14, 15]), Any[1, 1, 1, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), Any[16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 1, 0, 8, 16, 11, 7]), Any[8, 8, 8, 8, 8, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 11, 6, 0, 10]), Any[11, 11, 11, 11, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 14]), Any[14, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 7, 0, 9, 9, 7, 10]), Any[15, 15, 15, 15, 15, 15, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 16, 6, 10]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 15]), Any[0, 0])])
problem_rotate_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[4, 12, 6, 13, 11, 6, 1, 3, 4]), Any[11, 6, 1, 3, 4, 4, 12, 6, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 8, 5, 8, 6, 4, 16, 5, 11, 11, 14, 0, 4, 6]), Any[11, 14, 0, 4, 6, 4, 8, 5, 8, 6, 4, 16, 5, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 6, 9, 11, 0, 1, 11, 7, 8, 4, 3, 7]), Any[7, 8, 4, 3, 7, 4, 6, 9, 11, 0, 1, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 16, 5, 13, 10, 5, 4, 3, 7, 1, 5, 10]), Any[3, 7, 1, 5, 10, 15, 16, 5, 13, 10, 5, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14, 0, 5, 2, 1, 1, 7, 1, 1, 1, 3, 13, 16, 0]), Any[1, 3, 13, 16, 0, 4, 14, 0, 5, 2, 1, 1, 7, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 9, 11, 15, 2]), Any[3, 9, 11, 15, 2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 9, 9, 0, 15, 12, 1, 8, 5, 14, 8, 2, 0]), Any[5, 14, 8, 2, 0, 6, 9, 9, 0, 15, 12, 1, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 15, 6, 14, 4, 12, 0, 15, 8, 13, 16, 6, 9, 16]), Any[13, 16, 6, 9, 16, 10, 15, 6, 14, 4, 12, 0, 15, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 12, 13, 12, 5, 7, 7, 2]), Any[12, 5, 7, 7, 2, 3, 12, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 1, 14, 9, 7, 11, 16, 0, 15, 1, 4, 12, 10]), Any[15, 1, 4, 12, 10, 8, 1, 14, 9, 7, 11, 16, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 6, 10, 2, 7, 12, 1, 12, 8, 11, 2, 7, 3]), Any[8, 11, 2, 7, 3, 14, 6, 10, 2, 7, 12, 1, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 10, 0, 9, 16, 3, 3, 11, 16, 0, 1, 1, 4, 13]), Any[0, 1, 1, 4, 13, 15, 10, 0, 9, 16, 3, 3, 11, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 0, 7, 8, 15, 14, 0, 8, 16, 15, 9, 3, 7, 3, 9]), Any[9, 3, 7, 3, 9, 6, 0, 7, 8, 15, 14, 0, 8, 16, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 3, 6, 7, 6, 8, 5, 6, 10, 3, 14, 4, 3, 8, 13]), Any[14, 4, 3, 8, 13, 11, 3, 6, 7, 6, 8, 5, 6, 10, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 3, 14, 15, 8, 10, 9, 15, 9, 11, 13]), Any[9, 15, 9, 11, 13, 7, 3, 14, 15, 8, 10])])
problem_kth_smallest_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[6, 7, 16, 16, 6, 6, 11, 5, 9]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5, 0, 0, 13, 1, 16, 0, 9, 3, 1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 11, 8, 10, 9, 8]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 4, 16, 7, 10, 5, 13, 1, 6, 11]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 11, 5, 11, 16, 6, 0, 0, 8]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 3, 8, 6, 6, 11, 3, 4, 1, 4, 8]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 14, 2, 1, 3, 2, 13]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 11, 7, 13, 15, 10, 10, 8]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 13, 12, 5, 8, 13, 0, 13, 3]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 6, 11, 9, 3]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 6, 15, 10, 7, 8, 16, 16, 14]), 14), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 2, 6, 9, 12, 3, 13, 5]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 3, 5, 7, 6, 5, 11]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1, 15, 6, 0, 12, 11, 3, 15, 14]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 4, 9, 6, 7, 6, 12, 4, 8, 16, 4]), 6)])
problem_head = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 13, 8, 0, 14, 0, 5]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 3]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 8, 2, 12, 10]), 14), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 5]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 11]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 10, 12, 13, 2, 15]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 6, 2, 8, 9]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 7]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 13, 15, 15, 0, 1, 3]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 7, 8, 1, 9, 14, 16]), 9)])
problem_bool_identify_is_mod_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[5, 8, 8, 9, 4, 4]), Any[false, false, false, true, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 0, 1]), Any[false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 7, 3, 14]), Any[true, true, false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 12, 8]), Any[false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3, 5, 14]), Any[true, true, true, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3]), Any[true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 16]), Any[false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 6]), Any[false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3, 3, 3]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 16, 11, 3]), Any[true, false, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), Any[false])])
problem_has_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 3, 14, 6, 3]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 4, 4, 4, 4, 4]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 14, 7, 8, 7, 1, 3]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 13]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 13]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 9, 16, 4, 4, 4]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 14, 11, 7]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 4, 4, 4]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 4, 3, 4]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 11, 13, 15, 16]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 11, 4, 14, 6, 14, 0]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), false)])
problem_bool_identify_geq_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 14, 7, 0]), Any[true, true, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 10, 16]), Any[true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 16, 15, 13, 8]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 15, 2, 15, 1, 10, 5]), Any[true, true, false, true, false, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 6, 15, 6, 14, 8, 6]), Any[true, true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 13]), Any[true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 3, 3, 1, 3]), Any[true, false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 1, 15, 2, 4, 0]), Any[false, false, false, true, false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 15]), Any[false, true])])
problem_has_k_with_k_0 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[6, 11, 0, 11]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 8, 9]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 0, 0, 0]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 8]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 9, 6, 11]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[13]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 7, 6, 8, 3]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 12]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 9, 11, 7, 5, 5, 0]), true)])
problem_append_k_with_k_0 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 14]), Any[0, 14, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 0]), Any[4, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 5]), Any[7, 7, 5, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 16, 10, 0, 8, 6, 4]), Any[3, 16, 10, 0, 8, 6, 4, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 13, 12]), Any[7, 7, 13, 12, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 9]), Any[2, 2, 9, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1, 4, 15, 11]), Any[14, 1, 4, 15, 11, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 9]), Any[6, 4, 9, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 16]), Any[15, 16, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 5]), Any[3, 5, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 15, 4, 3]), Any[5, 15, 4, 3, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 10, 0]), Any[8, 10, 0, 0])])
problem_prepend_index_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 13, 3, 1, 12, 6, 11, 9]), Any[13, 0, 13, 3, 1, 12, 6, 11, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 14, 6]), Any[14, 9, 14, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 7, 8, 16, 16, 14, 8, 6, 2]), Any[7, 10, 7, 8, 16, 16, 14, 8, 6, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 12, 3, 13]), Any[12, 9, 12, 3, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 6, 3, 5]), Any[6, 6, 6, 3, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 5, 11, 12, 14]), Any[5, 6, 5, 11, 12, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 6]), Any[6, 15, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 11]), Any[11, 12, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 14, 13]), Any[14, 15, 14, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 9, 6, 7, 6, 12, 4, 8]), Any[9, 4, 9, 6, 7, 6, 12, 4, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 8, 15, 5, 8, 12, 7, 9, 9]), Any[8, 4, 8, 15, 5, 8, 12, 7, 9, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 6, 10]), Any[6, 11, 6, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 14, 3, 15, 14, 3, 5, 15]), Any[14, 2, 14, 3, 15, 14, 3, 5, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 15]), Any[15, 1, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 12]), Any[12, 7, 12])])
problem_modulo_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 0, 3, 12, 12]), Any[1, 0, 1, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 10, 16, 8, 7]), Any[1, 0, 0, 0, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 12, 7, 0]), Any[0, 1, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 15]), Any[0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2, 5, 4, 11, 7]), Any[0, 0, 1, 0, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 4, 14, 13]), Any[1, 1, 0, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 14, 16]), Any[0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 1, 11, 11, 10]), Any[0, 0, 1, 1, 1, 0])])
problem_caesar_cipher_k_modulo_n_with_k_2_and_n_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 1]), Any[1, 1, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 1, 2, 2, 2]), Any[0, 0, 1, 0, 1, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 0, 2, 0, 1]), Any[0, 2, 2, 1, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 1]), Any[0, 2, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 2, 2]), Any[2, 2, 2, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 1, 1]), Any[0, 2, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 2, 1]), Any[0, 1, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 1]), Any[0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0]), Any[2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0, 0]), Any[0, 0, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0, 0, 1, 0, 0]), Any[0, 0, 2, 2, 0, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 1, 1, 2, 1, 0]), Any[1, 1, 0, 0, 1, 0, 2])])
problem_remove_mod_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[20, 10, 5, 7]), Any[7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 13, 0, 8]), Any[9, 13, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 5]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 12, 10, 1, 15]), Any[13, 12, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6]), Any[6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 5, 9, 25, 6]), Any[8, 9, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[30]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 16, 10, 9, 6]), Any[14, 16, 9, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 2, 1]), Any[2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 30]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5, 10, 5, 13, 14, 0]), Any[9, 13, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 15, 40]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 40, 16]), Any[16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[35, 1, 4, 13, 10, 6, 35]), Any[1, 4, 13, 6])])
problem_last = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 0, 1, 3, 16, 9, 7]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 9, 14, 16]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 12, 4, 0, 0, 14, 14]), 14), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 0, 7, 3, 15, 11]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12, 11, 14, 15, 9]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 4, 3, 13]), 13), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 6, 12]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 1, 4, 12, 12, 0]), 0)])
problem_slice_k_n_with_k_3_and_n_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[8, 5, 10, 10, 13, 4, 5, 1, 4, 5]), Any[10, 10, 13, 4, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 8, 14, 13, 9, 7, 3, 1, 8, 3]), Any[14, 13, 9, 7, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 3, 15, 15, 11, 1, 0, 3, 6, 14, 12, 3, 8, 4]), Any[15, 15, 11, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 5, 5, 13, 10, 14, 4, 11]), Any[5, 5, 13, 10, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 10, 6, 5, 14, 1, 2, 4, 1, 2, 5, 6, 15]), Any[10, 6, 5, 14, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1, 6, 4, 10, 10, 13, 9, 1, 10, 4, 3, 12, 8, 14, 13]), Any[6, 4, 10, 10, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 0, 15, 4, 12, 16, 4, 3, 2, 7, 5, 6, 0, 0, 14]), Any[15, 4, 12, 16, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 13, 2, 11, 3, 1, 16, 11, 4, 12, 2, 1, 1]), Any[2, 11, 3, 1, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 4, 1, 7, 8, 12, 15, 14, 12, 9, 2, 15, 5]), Any[4, 1, 7, 8, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 15, 15, 7, 15, 7, 11, 15, 14, 5, 4, 7, 10, 6, 4, 2]), Any[15, 7, 15, 7, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 7, 14, 14, 0, 8, 10, 4, 1, 9, 0, 9, 4]), Any[14, 14, 0, 8, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 1, 2, 6, 9, 7, 13, 2, 3, 16, 8]), Any[2, 6, 9, 7, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 0, 14, 1, 3, 6, 0, 6, 16, 3, 2, 14, 8, 7, 8, 16]), Any[14, 1, 3, 6, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 11, 6, 1, 16, 9, 12, 12, 9, 5, 6, 4, 13, 16, 14, 6]), Any[6, 1, 16, 9, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 11, 0, 8, 5, 11, 15, 6, 12]), Any[0, 8, 5, 11, 15])])
problem_rotate_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[13, 6, 15, 16, 4]), Any[15, 16, 4, 13, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 7, 6, 12, 4, 8, 16, 4, 8, 15, 5, 8, 12, 7, 9]), Any[12, 7, 9, 6, 7, 6, 12, 4, 8, 16, 4, 8, 15, 5, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 9, 4, 8, 5, 5, 11, 4, 5, 11, 4, 11, 13, 15, 14, 8]), Any[15, 14, 8, 15, 9, 4, 8, 5, 5, 11, 4, 5, 11, 4, 11, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 13, 9, 6, 8, 6]), Any[6, 8, 6, 8, 13, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 12, 6, 2, 11, 16, 10, 9, 10, 13, 6, 3]), Any[13, 6, 3, 4, 3, 12, 6, 2, 11, 16, 10, 9, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 4, 5, 2, 14, 6, 9, 15, 1, 1, 7, 3, 11]), Any[7, 3, 11, 5, 4, 5, 2, 14, 6, 9, 15, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 6, 9, 4, 16, 10, 12]), Any[16, 10, 12, 0, 6, 9, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 16, 4, 8, 4, 0, 0, 16, 14, 7, 13, 4]), Any[7, 13, 4, 12, 16, 4, 8, 4, 0, 0, 16, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 0, 10, 14, 5, 13, 11, 2, 7, 7, 12]), Any[7, 7, 12, 6, 0, 10, 14, 5, 13, 11, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 11, 6, 10, 14, 2, 14, 3, 15, 14, 3, 5, 15, 0, 1, 15, 1]), Any[1, 15, 1, 2, 11, 6, 10, 14, 2, 14, 3, 15, 14, 3, 5, 15, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 12, 0, 3, 11, 2, 9, 13, 0, 10, 2, 5, 7, 6, 4, 13, 1]), Any[4, 13, 1, 13, 12, 0, 3, 11, 2, 9, 13, 0, 10, 2, 5, 7, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 5, 4, 2, 14, 6]), Any[2, 14, 6, 0, 5, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 6, 1, 11, 4, 8, 15, 15, 16, 13, 3, 11, 8, 14]), Any[11, 8, 14, 2, 6, 1, 11, 4, 8, 15, 15, 16, 13, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 10, 7, 5, 7, 1, 2, 14, 10, 13]), Any[14, 10, 13, 4, 10, 7, 5, 7, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 13, 10, 0, 1, 2, 6, 4]), Any[2, 6, 4, 4, 13, 10, 0, 1])])
problem_pow_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 14, 8, 2, 12, 10, 3]), Any[100, 196, 64, 4, 144, 100, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 7]), Any[4, 49]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 11, 10, 12, 13]), Any[169, 121, 100, 144, 169]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15]), Any[225]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 6, 2, 8, 9]), Any[25, 36, 4, 64, 81]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 14, 11]), Any[49, 196, 121]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 15, 0, 1, 3, 16]), Any[225, 225, 0, 1, 9, 256]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 8, 1, 9]), Any[49, 64, 1, 81]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 15, 1, 12, 4, 0, 0]), Any[256, 225, 1, 144, 16, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 14, 14, 0, 7, 3]), Any[196, 196, 196, 0, 49, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 1, 16, 14, 2, 12, 11]), Any[121, 1, 256, 196, 4, 144, 121])])
problem_prepend_index_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[16, 13, 9, 8, 8, 0, 2, 15, 9]), Any[8, 16, 13, 9, 8, 8, 0, 2, 15, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 10, 5, 16, 1, 1, 4, 13, 16, 15]), Any[16, 14, 10, 5, 16, 1, 1, 4, 13, 16, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2, 8, 7, 6, 14, 0, 0, 12]), Any[7, 0, 2, 8, 7, 6, 14, 0, 0, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 12, 16, 3, 6, 16, 5, 3, 16, 14, 7]), Any[3, 10, 12, 16, 3, 6, 16, 5, 3, 16, 14, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 11, 3, 0, 8, 13]), Any[0, 16, 11, 3, 0, 8, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 0, 1, 16, 1, 11, 0, 5, 9]), Any[16, 3, 0, 1, 16, 1, 11, 0, 5, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 4, 14, 5, 13, 5, 9, 9, 15, 13]), Any[5, 5, 4, 14, 5, 13, 5, 9, 9, 15, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 10, 1, 10, 5, 16]), Any[10, 1, 10, 1, 10, 5, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 2, 8, 11, 5, 9, 8, 9, 7]), Any[11, 7, 2, 8, 11, 5, 9, 8, 9, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 8, 16, 0, 1, 16, 0, 10, 13, 7]), Any[0, 2, 8, 16, 0, 1, 16, 0, 10, 13, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 8, 5, 3, 1, 7, 5, 6, 13]), Any[3, 4, 8, 5, 3, 1, 7, 5, 6, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 7, 5, 13, 1, 3, 2, 7, 0, 12]), Any[13, 11, 7, 5, 13, 1, 3, 2, 7, 0, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 1, 3, 2, 14, 16, 8, 4]), Any[2, 13, 1, 3, 2, 14, 16, 8, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 15, 10, 13, 3, 12, 0, 7, 5, 2, 5]), Any[13, 8, 15, 10, 13, 3, 12, 0, 7, 5, 2, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 12, 8, 7, 11, 1, 15]), Any[7, 13, 12, 8, 7, 11, 1, 15])])
problem_count_head_in_tail = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 2]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 4]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 5, 4, 0, 2]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1, 3, 3, 2]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2, 6, 10, 8, 12]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[7]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[10]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 14]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 14, 15, 7, 2, 6, 2]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 12, 1, 6, 9, 3, 11]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[11]), 0)])
problem_max = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 1]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 9, 16, 8]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 10, 9, 16, 4, 15, 13]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[9]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 14, 11, 7, 12, 0, 15]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 12]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 10, 4, 9, 3]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 13, 4, 2]), 13), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 11, 5, 12, 1, 2]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 8]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 9]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 12]), 12)])
problem_has_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 3, 2, 3]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 4, 7, 15]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 6]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 6, 6, 7, 7]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 2, 2]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 2, 2, 2]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 9, 16, 9, 7, 2, 6]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 15, 4, 7]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 9, 16]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 8, 4, 13, 12]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 16]), false)])
problem_slice_k_n_with_k_5_and_n_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 6, 5, 7, 13, 8, 11, 13, 3, 16, 12, 10, 6, 15, 11, 3, 4]), Any[13, 8, 11, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 3, 6, 2, 1, 10, 1, 13, 7, 6, 3, 8, 11, 11, 8, 10, 8]), Any[1, 10, 1, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 4, 7, 1, 8, 1, 2, 3, 7, 5]), Any[8, 1, 2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 4, 14, 10, 8, 12, 12, 9, 1, 0, 4, 0, 15, 13, 1, 11]), Any[8, 12, 12, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 1, 8, 16, 7, 10, 9, 3, 9, 9, 10, 3, 15, 16, 5, 5]), Any[7, 10, 9, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 13, 13, 3, 4, 15, 1, 7, 10, 13, 7]), Any[4, 15, 1, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 4, 5, 14, 3, 13, 3, 0, 8, 6, 11, 0, 0]), Any[3, 13, 3, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 3, 10, 5, 6, 16, 1, 11, 7, 13, 13, 13, 4]), Any[6, 16, 1, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 15, 13, 3, 10, 16, 13, 3, 11, 5, 15, 6, 6, 14, 6, 10, 9]), Any[10, 16, 13, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 12, 3, 12, 15, 2, 6, 6, 15, 11, 16, 2]), Any[15, 2, 6, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 9, 15, 1, 14, 7, 13, 10, 12, 14, 1, 11, 5, 12]), Any[1, 14, 7, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 8, 1, 11, 12, 14, 12, 5, 7, 4, 10, 13, 6, 4]), Any[12, 14, 12, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 12, 15, 16, 4, 2, 7, 8, 2, 0, 2]), Any[16, 4, 2, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 4, 15, 3, 15, 8, 14, 5, 9, 4, 4, 2, 15, 7, 8]), Any[15, 8, 14, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 2, 16, 15, 14, 4, 10, 0, 10, 0, 3]), Any[14, 4, 10, 0])])
problem_mult_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[12, 2, 8, 5]), Any[60, 10, 40, 25]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 2, 14]), Any[40, 10, 70]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 6, 6, 16]), Any[15, 30, 30, 80]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 3, 15, 2, 12]), Any[35, 15, 75, 10, 60]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 15, 5, 10, 8, 14, 12]), Any[0, 75, 25, 50, 40, 70, 60]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 12, 3, 15, 5, 5, 2]), Any[20, 60, 15, 75, 25, 25, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 15, 9, 0, 1]), Any[40, 75, 45, 0, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 9, 12, 12, 4, 12]), Any[15, 45, 60, 60, 20, 60]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[40]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[60]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 11, 13, 1, 10]), Any[50, 55, 65, 5, 50]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 15, 1, 15]), Any[80, 75, 5, 75]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 13]), Any[40, 65]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 7, 3, 10, 14]), Any[60, 35, 15, 50, 70])])
problem_append_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 13]), Any[2, 13, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 0, 13]), Any[15, 0, 13, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9]), Any[9, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 16, 7, 11, 7]), Any[2, 1, 16, 7, 11, 7, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[8, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 16, 1, 5, 11, 8, 5]), Any[6, 16, 1, 5, 11, 8, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 14, 6, 9, 8, 2]), Any[9, 14, 6, 9, 8, 2, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 3]), Any[13, 3, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 14, 7]), Any[5, 14, 7, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1, 4, 9]), Any[3, 1, 4, 9, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2]), Any[4, 2, 5])])
problem_append_index_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 14, 6]), Any[0, 14, 6, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 7]), Any[0, 1, 7, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 5, 16, 3]), Any[7, 5, 16, 3, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 0, 8, 6, 4, 9, 7, 7]), Any[10, 0, 8, 6, 4, 9, 7, 7, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 7, 2, 2, 9, 11, 14]), Any[12, 7, 2, 2, 9, 11, 14, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 7, 6, 4, 9, 4, 15, 16]), Any[11, 7, 6, 4, 9, 4, 15, 16, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 5, 0]), Any[3, 5, 0, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10]), Any[10, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 4, 3]), Any[15, 4, 3, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 10, 0, 16]), Any[8, 10, 0, 16, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[12, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 2, 5]), Any[16, 2, 5, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 4, 8, 4, 0, 16, 13]), Any[1, 4, 8, 4, 0, 16, 13, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 14, 9, 10, 15, 3, 9, 15]), Any[13, 14, 9, 10, 15, 3, 9, 15, 13])])
problem_bool_identify_is_prime = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0]), Any[true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11]), Any[true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 12]), Any[true, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 4, 5, 7, 9]), Any[true, true, false, true, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 11]), Any[true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 13, 0, 2]), Any[false, true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 6]), Any[true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 0]), Any[true, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 14, 10, 15, 6]), Any[true, false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 12, 15, 7]), Any[false, false, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 6, 11]), Any[true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8, 4, 7]), Any[false, false, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[true])])
problem_count_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 13]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3, 3, 3, 6, 3]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 0, 3, 3, 3, 3, 3]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 7, 9, 10]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 0, 15, 9, 13]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 6, 1, 15, 12, 13]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 3, 14]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 8, 0, 14, 3, 10]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3, 4]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 12]), 0)])
problem_count_k_with_k_0 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[11, 9, 0]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 7]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 15]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 12, 15]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 9]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 8]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 14, 15, 0]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 14, 9]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 15, 11]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 7, 2, 6]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 15, 4, 7]), 0)])
problem_bool_identify_geq_k_with_k_0 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[11, 11]), Any[true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 6, 8, 4, 6, 6, 7]), Any[true, true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 14, 0, 12, 14]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3, 3, 13, 14, 9]), Any[true, true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 10, 8, 13, 11, 15]), Any[true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 15, 5, 16, 9, 7, 9]), Any[true, true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 2, 7, 1, 6]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 5, 6, 15, 0, 13]), Any[true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 14, 12, 8, 4, 3, 12]), Any[true, true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[-1, -1, 13]), Any[false, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0]), Any[true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 2, 5, 8, 2, 2]), Any[true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 16]), Any[true, true])])
problem_repeat = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1]), Any[1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3]), Any[3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 7]), Any[7, 7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 13]), Any[13, 13, 13, 13, 13, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 6]), Any[6, 6, 6, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 7]), Any[7, 7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3]), Any[3, 3, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 7]), Any[7, 7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 6]), Any[6, 6, 6, 6, 6, 6, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3]), Any[3, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 5]), Any[5, 5, 5, 5])])
problem_prepend_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 15, 1, 15, 16, 7, 10]), Any[5, 7, 15, 1, 15, 16, 7, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), Any[5, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 10, 11, 11, 16, 7, 14]), Any[5, 4, 10, 11, 11, 16, 7, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 7, 15, 13, 14, 13, 3]), Any[5, 10, 7, 15, 13, 14, 13, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[5, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 16, 2]), Any[5, 4, 16, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 15, 6, 1, 7, 2]), Any[5, 12, 15, 6, 1, 7, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 5, 0]), Any[5, 2, 5, 5, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 9, 8, 16]), Any[5, 10, 9, 8, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 9]), Any[5, 5, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 11, 7]), Any[5, 8, 11, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1, 4, 13, 1, 11, 12]), Any[5, 14, 1, 4, 13, 1, 11, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[5, 3])])
problem_drop_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[16, 3, 9, 1, 7, 12, 5, 12, 4, 14]), Any[1, 7, 12, 5, 12, 4, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 6, 5, 4, 15, 11, 8, 8]), Any[4, 15, 11, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 0, 5, 14, 1, 12, 1, 12, 5, 4]), Any[14, 1, 12, 1, 12, 5, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 15, 13, 9, 13, 15, 7, 12, 3, 14]), Any[9, 13, 15, 7, 12, 3, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 1, 11, 2, 3, 15, 2, 0, 12]), Any[2, 3, 15, 2, 0, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 5, 8, 16, 15, 10, 14, 11]), Any[16, 15, 10, 14, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 12, 13, 4, 0, 13, 6, 9, 1, 9]), Any[4, 0, 13, 6, 9, 1, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 5, 1, 4, 15, 4, 9, 11, 1]), Any[4, 15, 4, 9, 11, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 15, 11, 10, 4, 13]), Any[10, 4, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 11, 12, 8, 15, 1, 9, 2]), Any[8, 15, 1, 9, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 0, 5, 8, 5, 8, 13]), Any[8, 5, 8, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 14, 8, 8]), Any[8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 0, 7, 11, 10, 0, 5, 2]), Any[11, 10, 0, 5, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 9, 15, 4]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 16, 4, 13, 11, 6, 13, 16, 1, 5]), Any[13, 11, 6, 13, 16, 1, 5])])
problem_kth_largest_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 2, 7, 14, 6, 0, 2, 14, 2, 16, 16]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 2, 1, 7, 7, 2, 11, 14, 6, 7, 11, 13]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 12, 11, 6, 11, 15, 11, 2, 7, 8, 13]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 1, 4, 3, 5, 6, 0]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 16, 14, 5, 10, 1, 5, 6]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 9, 2, 7, 13, 11, 1, 8, 14, 3, 14, 3]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 11, 14, 8, 14, 2, 8, 4, 1, 9, 9, 4]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14, 0, 12, 7]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 9, 16, 2, 7, 12]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 8, 7, 16, 13, 3, 8, 0, 13]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 15, 0, 1, 8, 6, 2, 11, 4, 11]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 16, 16, 16, 6, 0, 4, 7]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 7, 3, 14, 4, 9, 1, 13, 4, 8, 6]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 13, 16, 12, 4, 5]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 11, 10, 7, 13, 11, 9]), 10)])
problem_take_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[12, 3, 13, 16, 6, 4, 12, 2, 16, 12]), Any[12, 3, 13, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 15, 3, 1, 3, 1, 8, 2, 1, 8]), Any[14, 15, 3, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 13, 13, 8]), Any[7, 13, 13, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 9, 9, 11, 0]), Any[8, 9, 9, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 2, 6, 8, 3, 14, 12, 7, 16, 16, 5]), Any[12, 2, 6, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 1, 6, 11]), Any[9, 1, 6, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 9, 9, 10, 3, 3]), Any[3, 9, 9, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 9, 3, 11, 1]), Any[8, 9, 3, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 12, 6, 14, 16, 4]), Any[14, 12, 6, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 2, 4, 3]), Any[5, 2, 4, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 15, 5, 3, 4, 9, 6, 14, 6]), Any[10, 15, 5, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 11, 15, 7, 12]), Any[1, 11, 15, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 10, 3, 15]), Any[3, 10, 3, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 12, 5]), Any[7, 7, 12, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 6, 11, 0, 7, 6, 0, 10, 9, 6, 6]), Any[0, 6, 11, 0])])
problem_remove_mod_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[6]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 3, 11, 12]), Any[11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 7, 11, 27, 24, 7]), Any[7, 11, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 9, 6, 15, 14, 11, 13]), Any[13, 14, 11, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 9, 10, 15, 0, 1, 13]), Any[11, 10, 1, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 5, 6]), Any[10, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 15, 6]), Any[7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7]), Any[7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 3, 11]), Any[5, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1]), Any[1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 15, 1, 6]), Any[4, 1])])
problem_repeat_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[14, 13, 13, 4, 9]), Any[14, 13, 13, 4, 9, 14, 13, 13, 4, 9, 14, 13, 13, 4, 9, 14, 13, 13, 4, 9, 14, 13, 13, 4, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 6]), Any[7, 6, 7, 6, 7, 6, 7, 6, 7, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 8, 16, 4]), Any[4, 8, 16, 4, 4, 8, 16, 4, 4, 8, 16, 4, 4, 8, 16, 4, 4, 8, 16, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 5, 8]), Any[15, 5, 8, 15, 5, 8, 15, 5, 8, 15, 5, 8, 15, 5, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 9, 9, 2]), Any[7, 9, 9, 2, 7, 9, 9, 2, 7, 9, 9, 2, 7, 9, 9, 2, 7, 9, 9, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 10, 14, 2]), Any[6, 10, 14, 2, 6, 10, 14, 2, 6, 10, 14, 2, 6, 10, 14, 2, 6, 10, 14, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 15, 14, 3, 5]), Any[3, 15, 14, 3, 5, 3, 15, 14, 3, 5, 3, 15, 14, 3, 5, 3, 15, 14, 3, 5, 3, 15, 14, 3, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 15, 1, 7]), Any[0, 1, 15, 1, 7, 0, 1, 15, 1, 7, 0, 1, 15, 1, 7, 0, 1, 15, 1, 7, 0, 1, 15, 1, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 15, 12, 9]), Any[6, 15, 12, 9, 6, 15, 12, 9, 6, 15, 12, 9, 6, 15, 12, 9, 6, 15, 12, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 9, 7, 7]), Any[7, 9, 7, 7, 7, 9, 7, 7, 7, 9, 7, 7, 7, 9, 7, 7, 7, 9, 7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 6]), Any[1, 6, 1, 6, 1, 6, 1, 6, 1, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 13, 11, 3, 1]), Any[11, 13, 11, 3, 1, 11, 13, 11, 3, 1, 11, 13, 11, 3, 1, 11, 13, 11, 3, 1, 11, 13, 11, 3, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 7, 7]), Any[15, 7, 7, 15, 7, 7, 15, 7, 7, 15, 7, 7, 15, 7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 9, 11, 15]), Any[1, 3, 9, 11, 15, 1, 3, 9, 11, 15, 1, 3, 9, 11, 15, 1, 3, 9, 11, 15, 1, 3, 9, 11, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[])])
problem_caesar_cipher_k_modulo_n_with_k_5_and_n_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 0]), Any[0, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0, 2]), Any[0, 0, 2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 0, 2, 1]), Any[0, 1, 2, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 1, 2]), Any[0, 1, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 1, 0, 0, 2, 2]), Any[1, 0, 0, 2, 2, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 1]), Any[0, 2, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0]), Any[1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 2, 1, 0, 2, 2]), Any[2, 2, 1, 0, 2, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 0]), Any[1, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 1, 0, 0]), Any[1, 1, 0, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 1, 1, 1]), Any[2, 2, 2, 0, 0, 0])])
problem_slice_k_n_with_k_3_and_n_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[16, 9, 5, 7, 3, 5, 12, 1]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 11, 6, 12, 5, 5]), Any[11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1, 10, 10, 16, 4, 9, 14, 15]), Any[10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 5, 11, 0, 2, 6, 2, 10, 16]), Any[11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 11, 16, 7, 2]), Any[11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 4, 14, 6, 13, 1, 6, 5]), Any[14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 6, 16, 2, 7, 8, 16]), Any[16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 6, 10, 0, 13]), Any[10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 9, 2, 16, 15, 0, 5, 10, 3]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 3, 7, 9, 10, 9, 13]), Any[7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 13, 5, 8, 16, 1, 4]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 16, 10, 8, 15, 1, 14]), Any[10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 15, 6, 12, 8, 9, 8, 16, 16, 5, 4, 16]), Any[6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 13, 4, 0, 8, 4]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 4, 7, 0, 3, 9, 10, 5, 0, 10, 10, 14]), Any[7])])
problem_bool_identify_is_mod_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 14]), Any[true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 12, 3, 15, 5, 5]), Any[true, true, false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 2, 14, 3, 9, 12]), Any[true, false, false, false, false, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 2, 4, 4, 4]), Any[true, true, false, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 12, 7]), Any[false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14]), Any[false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 0]), Any[true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 1, 16]), Any[false, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 2]), Any[false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 4]), Any[false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 4, 5]), Any[false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 4, 4]), Any[false, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[false])])
problem_caesar_cipher_k_modulo_n_with_k_4_and_n_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 1, 0]), Any[0, 0, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 1, 0, 1, 0]), Any[0, 0, 1, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 1]), Any[0, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 0, 0, 1, 0]), Any[1, 0, 1, 0, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0]), Any[1, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0, 1, 0]), Any[0, 1, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0]), Any[1, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 1, 1]), Any[1, 0, 1, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0]), Any[1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0, 0, 1, 0]), Any[0, 1, 0, 0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0]), Any[0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 1]), Any[0, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1])])
problem_keep_mod_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 12]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 15, 4, 16]), Any[0, 0, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 12, 6, 12]), Any[12, 6, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 9, 3, 15, 10]), Any[3, 9, 3, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 6, 9, 4, 16]), Any[0, 6, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 4, 13, 10, 0]), Any[3, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 15, 0]), Any[12, 15, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 3]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 13, 5, 8, 8, 9, 4]), Any[9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[18, 0]), Any[18, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 7]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 10, 2, 7, 12]), Any[6, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[])])
problem_slice_k_n_with_k_4_and_n_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14, 2, 9, 2, 14, 16]), Any[9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 3, 2, 15, 14, 2]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 13, 12, 9, 14, 1, 12, 4, 14, 8, 8, 0, 1]), Any[9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 3, 6, 1, 10, 12, 5]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 5, 5, 12, 14, 10, 3, 6, 7, 15, 0]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 16, 7, 9, 12, 14, 2, 9]), Any[9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 8, 10, 12, 12, 3, 13, 4, 7, 10, 10]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 10, 14, 13, 9, 8, 7, 13, 10, 12, 11, 4, 16]), Any[13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 8, 3, 14, 10, 10]), Any[14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 6, 2, 7, 9, 8, 11, 4, 9, 11, 2]), Any[7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 8, 12, 12, 3, 7, 5, 12, 3, 13]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 16, 10, 5, 14, 0, 1, 4]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 13, 9, 1, 16, 0, 7, 5, 7, 11, 3, 2, 8]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 12, 4, 9, 16, 11, 8]), Any[9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 10, 10, 2, 9, 6, 10, 4, 1, 7, 14, 8]), Any[2])])
problem_is_evens = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 4]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 4, 2, 0, 5, 1, 1]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 6, 5]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 3]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 16, 22, 22, 4, 2, 6]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 4]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[26, 20, 32, 10, 16, 16, 12]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[28]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 16, 10, 2, 1, 8]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 10, 4, 0, 12, 6]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[24, 10, 30, 4, 14]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 7, 14, 0, 13, 5, 9]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 13, 12, 8, 14, 1, 7]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[22, 2, 20]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 6, 4]), false)])
problem_drop_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[15, 16, 10, 8, 15, 9, 15]), Any[10, 8, 15, 9, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12, 4, 8, 13, 5, 2, 6]), Any[4, 8, 13, 5, 2, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 13, 0, 15, 8, 9, 16, 7, 6]), Any[0, 15, 8, 9, 16, 7, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 14, 1]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12, 7, 12]), Any[7, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 0]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 1, 6, 12, 5, 6, 10, 10]), Any[1, 6, 12, 5, 6, 10, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 3, 2, 8]), Any[2, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 10, 5, 13, 5, 1]), Any[5, 13, 5, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 1]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 11, 4, 15, 14, 16, 2]), Any[4, 15, 14, 16, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 5, 5]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 5, 7, 15, 6]), Any[7, 15, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 14, 6, 12]), Any[6, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 9, 12, 12, 2, 16, 1, 3, 4]), Any[12, 12, 2, 16, 1, 3, 4])])
problem_keep_mod_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 25, 6]), Any[0, 25]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 2]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 20]), Any[20]), 
	IOExample(Dict{Symbol, Any}(:i => Any[20]), Any[20]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 7, 0]), Any[10, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 1, 20, 2, 2]), Any[15, 20]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 8, 16, 13]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 5]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 13, 8, 0, 14, 0]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[35, 25]), Any[35, 25]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 2, 7, 11, 13]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 13, 2, 15, 11]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 9]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[40]), Any[40])])
problem_is_mod_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[24, 0, 21]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 6, 11, 14, 7, 6, 2]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[39, 27, 6, 33, 12, 39, 33]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 8]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[39, 39, 48, 30]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[39, 9, 45, 9, 6]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[21, 0, 27, 6]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 3, 7, 14]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[36, 27, 45, 21, 18, 45]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 16, 0, 3]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 9, 0, 21, 27, 30, 30]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[33, 33, 3, 21, 9, 6]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 12, 4, 7]), false)])
problem_pow_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[15, 9, 8, 8, 4, 3]), Any[3375, 729, 512, 512, 64, 27]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 16, 6, 4, 6, 12]), Any[1, 4096, 216, 64, 216, 1728]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 16, 12]), Any[1, 4096, 1728]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 4, 12]), Any[1, 64, 1728]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 15, 15, 16, 9]), Any[0, 3375, 3375, 4096, 729]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 0, 2, 7, 11, 13]), Any[3375, 0, 8, 343, 1331, 2197]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 10, 9, 7, 8, 8]), Any[343, 1000, 729, 343, 512, 512]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 7, 10, 4]), Any[64, 27, 343, 1000, 64]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 16, 5, 15, 8, 10, 13]), Any[1, 4096, 125, 3375, 512, 1000, 2197]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 0, 3, 12, 12]), Any[343, 0, 27, 1728, 1728]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 10, 16, 8, 7]), Any[125, 4096, 1000, 4096, 512, 343]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[1728]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1])])
problem_repeat_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[3, 12, 15, 12]), Any[3, 12, 15, 12, 3, 12, 15, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15]), Any[15, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 10, 13, 15, 3]), Any[2, 10, 13, 15, 3, 2, 10, 13, 15, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 4]), Any[0, 4, 0, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 6]), Any[13, 6, 13, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 11, 11, 12]), Any[4, 11, 11, 12, 4, 11, 11, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13]), Any[13, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 16, 0, 8]), Any[4, 16, 0, 8, 4, 16, 0, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 7, 16]), Any[6, 7, 16, 6, 7, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 6, 11, 5, 9]), Any[6, 6, 11, 5, 9, 6, 6, 11, 5, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5, 0, 0, 13]), Any[9, 5, 0, 0, 13, 9, 5, 0, 0, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 3, 1, 2]), Any[0, 9, 3, 1, 2, 0, 9, 3, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11]), Any[11, 11])])
problem_slice_k_n_with_k_2_and_n_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 0, 2, 0, 3, 8, 2, 0, 5, 2]), Any[0, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 13, 8, 6, 3, 9, 0, 11, 6, 7, 4]), Any[13, 8, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 2, 6, 5, 15, 7, 0, 10, 16]), Any[11, 2, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 11, 16, 11, 10, 9, 5, 12, 6, 0, 5]), Any[11, 16, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 11, 0, 1, 0, 12, 14, 10, 7]), Any[11, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 15, 11, 10, 13, 6, 9, 7, 2, 9, 4, 6, 4]), Any[15, 11, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 9, 0, 10, 16, 9, 5, 11]), Any[11, 9, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 12, 8, 6, 15, 15, 11, 13, 16, 16, 11, 2, 7]), Any[12, 8, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 8, 13, 3, 9, 1, 16, 9, 3, 4]), Any[8, 13, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 11, 13, 11, 16, 9, 4, 14, 13, 1, 2, 15]), Any[4, 11, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 5, 3, 16, 8, 12]), Any[5, 3, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 11, 10, 0, 7, 14]), Any[11, 10, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 5, 2, 9, 12, 0, 3, 11, 9, 15]), Any[5, 2, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 5, 3, 6, 16, 9]), Any[5, 3, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 15, 1, 6, 7, 10, 1, 8, 8, 7, 8]), Any[15, 1, 6])])
problem_caesar_cipher_k_modulo_n_with_k_3_and_n_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0]), Any[0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0]), Any[0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0]), Any[0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0]), Any[0, 0])])
problem_kth_largest_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[16, 9, 15, 4, 16]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 4, 13, 11, 6, 13, 16, 1, 5, 6]), 13), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 3, 6, 10, 4, 3, 1]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 6, 13, 5, 0, 5, 2, 14, 9, 3]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 13, 4, 2]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 12, 2, 4, 15, 16]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 5, 6, 7, 1, 3, 9, 14, 8]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 8, 4, 5]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 10, 12, 0, 2, 10, 9, 6]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 8, 1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 14, 14, 11, 8, 14, 3, 8, 6, 1]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 4, 4, 13, 12]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 16, 6, 13, 16, 4, 7]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 8, 1, 14, 9, 6]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 1, 8, 6, 5, 4, 10, 12, 15, 8]), 10)])
problem_prepend_k_with_k_0 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[12, 0, 1, 9, 4]), Any[0, 12, 0, 1, 9, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 10, 8]), Any[0, 9, 10, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 9, 0, 7, 1, 7]), Any[0, 5, 11, 9, 0, 7, 1, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 0, 3]), Any[0, 14, 0, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 9, 8, 16, 1, 2]), Any[0, 6, 9, 8, 16, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 11]), Any[0, 16, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 0, 16, 10, 7, 12, 10]), Any[0, 8, 0, 16, 10, 7, 12, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 4]), Any[0, 12, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 5, 13, 1, 3]), Any[0, 1, 2, 5, 13, 1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 8, 0, 11]), Any[0, 6, 8, 0, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), Any[0, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14, 11, 0]), Any[0, 4, 14, 11, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[0, 5])])
problem_repeat_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 9, 11, 7]), Any[7, 9, 11, 7, 7, 9, 11, 7, 7, 9, 11, 7, 7, 9, 11, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 10, 10, 8]), Any[15, 10, 10, 8, 15, 10, 10, 8, 15, 10, 10, 8, 15, 10, 10, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 13]), Any[1, 3, 13, 1, 3, 13, 1, 3, 13, 1, 3, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 8, 13, 0]), Any[5, 8, 13, 0, 5, 8, 13, 0, 5, 8, 13, 0, 5, 8, 13, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1, 12, 6]), Any[3, 1, 12, 6, 3, 1, 12, 6, 3, 1, 12, 6, 3, 1, 12, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 3, 9, 14]), Any[9, 3, 9, 14, 9, 3, 9, 14, 9, 3, 9, 14, 9, 3, 9, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 10]), Any[15, 10, 15, 10, 15, 10, 15, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 16]), Any[8, 16, 8, 16, 8, 16, 8, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 8, 6, 2, 6]), Any[14, 8, 6, 2, 6, 14, 8, 6, 2, 6, 14, 8, 6, 2, 6, 14, 8, 6, 2, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 3, 13]), Any[12, 3, 13, 12, 3, 13, 12, 3, 13, 12, 3, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6]), Any[6, 6, 6, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 5]), Any[3, 5, 3, 5, 3, 5, 3, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 5]), Any[6, 5, 6, 5, 6, 5, 6, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 14, 1]), Any[12, 14, 1, 12, 14, 1, 12, 14, 1, 12, 14, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 0, 12, 11, 3]), Any[6, 0, 12, 11, 3, 6, 0, 12, 11, 3, 6, 0, 12, 11, 3, 6, 0, 12, 11, 3])])
problem_add_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[16, 10, 7, 12, 13, 3]), Any[20, 14, 11, 16, 17, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 2, 8, 8, 7, 0, 9]), Any[7, 6, 12, 12, 11, 4, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 3, 7, 14]), Any[13, 7, 11, 18]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 12, 9, 15, 7]), Any[18, 16, 13, 19, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 7, 9]), Any[19, 11, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 3, 8, 15, 3, 3, 0]), Any[4, 7, 12, 19, 7, 7, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 10, 10]), Any[13, 14, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 11, 1, 7, 3, 2]), Any[15, 15, 5, 11, 7, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8]), Any[14, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 7, 15, 3, 2]), Any[8, 11, 19, 7, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[])])
problem_repeat_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[10, 9]), Any[10, 9, 10, 9, 10, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8, 4]), Any[10, 8, 4, 10, 8, 4, 10, 8, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 10, 5, 13, 1]), Any[7, 10, 5, 13, 1, 7, 10, 5, 13, 1, 7, 10, 5, 13, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 10]), Any[11, 10, 11, 10, 11, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 5]), Any[11, 5, 11, 5, 11, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 6, 0, 0]), Any[16, 6, 0, 0, 16, 6, 0, 0, 16, 6, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 10]), Any[12, 10, 12, 10, 12, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[8, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 11]), Any[6, 11, 6, 11, 6, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[4, 4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[8, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 14]), Any[11, 14, 11, 14, 11, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[2, 2, 2])])
problem_replace_all_with_index_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[4, 7, 15, 9, 4, 15, 3]), Any[15, 15, 15, 15, 15, 15, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 8, 0, 11, 14, 13, 12, 10, 1, 15]), Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 6, 11, 4]), Any[11, 11, 11, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 5, 9, 6, 6, 10]), Any[9, 9, 9, 9, 9, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 16, 14, 9, 11, 11]), Any[16, 16, 16, 16, 16, 16, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 14, 16, 10, 9, 6]), Any[16, 16, 16, 16, 16, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 5, 2, 1, 4, 8]), Any[2, 2, 2, 2, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 12, 14, 10, 3]), Any[14, 14, 14, 14, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 15, 7, 9, 9, 5, 10, 5]), Any[7, 7, 7, 7, 7, 7, 7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 0, 6, 5, 14, 1, 2, 5, 3]), Any[6, 6, 6, 6, 6, 6, 6, 6, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 14, 8, 5]), Any[8, 8, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 5, 1, 16, 1]), Any[5, 5, 5, 5, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 15, 15, 7]), Any[15, 15, 15, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 4, 13, 14]), Any[4, 4, 4, 4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 10, 4, 1, 12]), Any[4, 4, 4, 4, 4])])
problem_kth_smallest_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5, 11, 2, 10, 13, 9]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 5, 4, 5, 2, 14, 6, 9, 15]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 3]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 4, 10, 7, 5, 7, 1, 2]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 13, 9, 10, 8, 6, 7, 15, 2]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 16, 4, 0, 3, 4, 9]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 4, 8, 5]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 16, 5, 11, 11, 14]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 6, 12]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 14, 9, 7, 11, 16]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 1, 4]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8, 7, 4, 2, 3, 12, 8]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 6, 5, 2, 13, 14, 5, 12, 6]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 8, 8, 5, 6, 2, 15, 9, 1, 6]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14, 15]), 15)])
problem_remove_mod_head = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1, 3, 4, 7, 6, 9, 2]), Any[1, 4, 7, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2, 6, 10, 8, 12]), Any[2, 6, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 36]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 2, 14, 10, 13]), Any[2, 14, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 6, 7, 15, 2]), Any[6, 7, 15, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 4, 0, 3, 4]), Any[4, 3, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 4, 8, 5, 8]), Any[4, 8, 5, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 5, 11, 11]), Any[5, 11, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 6, 12, 8, 1, 14, 9]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 0, 15, 1]), Any[15, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8, 7]), Any[8, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 21, 9, 15]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 6, 16, 11, 8, 8, 5]), Any[6, 16, 11, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 9, 1, 6]), Any[9, 1])])
problem_bool_identify_geq_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[12, 10]), Any[true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 7, 10, 3, 8]), Any[true, true, true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 6, 12, 16, 3, 6, 16]), Any[true, true, true, true, false, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 10, 6, 6, 12]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 13]), Any[false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 15, 10, 15, 0]), Any[false, true, true, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 12]), Any[false, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 8, 10, 0, 15, 8, 4]), Any[false, true, true, false, true, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 6, 1, 11, 0, 12]), Any[false, false, true, false, true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 4, 2, 12, 2]), Any[false, true, false, false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 10]), Any[true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 7, 1]), Any[false, false, true, false])])
problem_bool_identify_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 14, 4, 16]), Any[true, true, false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 4, 0]), Any[false, true, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 4, 12]), Any[true, true, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 13, 10, 4, 4, 4]), Any[true, false, false, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 16, 10]), Any[true, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 4, 0, 1, 4]), Any[false, true, false, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 1, 2, 7, 5, 4, 0]), Any[false, false, false, false, false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 4, 4, 4, 4]), Any[true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 7, 12]), Any[false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 7, 3, 3]), Any[false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 4, 4, 4]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 2]), Any[false, true, false])])
problem_keep_mod_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12, 12, 11, 5, 12]), Any[2, 12, 12, 11, 5, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 2]), Any[9, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 11, 13, 15, 16]), Any[7, 11, 13, 15, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 11, 4, 14, 6, 14, 0]), Any[11, 11, 4, 14, 6, 14, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 8, 1]), Any[3, 8, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 11, 13, 5, 14, 4]), Any[16, 11, 13, 5, 14, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7]), Any[7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 5]), Any[15, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 8, 6, 3, 16, 4, 9]), Any[4, 8, 6, 3, 16, 4, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 15, 8]), Any[5, 15, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 15]), Any[5, 15])])
problem_count_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 14, 4, 16]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 4, 0]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 4, 12]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 13, 10, 4, 4, 4]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 16, 10]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 4, 0, 1, 4]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 1, 2, 7, 5, 4, 0]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 4, 4, 4, 4]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 7, 12]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 7, 3, 3]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 4, 4, 4]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 4, 2]), 1)])
problem_append_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 14, 9]), Any[7, 14, 9, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 15, 6]), Any[6, 15, 6, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 13, 8, 15, 13, 7, 2]), Any[5, 13, 8, 15, 13, 7, 2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 16]), Any[10, 16, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 15, 12]), Any[12, 15, 12, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 4, 7, 9, 5, 2]), Any[11, 4, 7, 9, 5, 2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 1, 9, 3, 13, 5, 7]), Any[8, 1, 9, 3, 13, 5, 7, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3]), Any[3, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 14, 12, 4, 4, 15]), Any[6, 14, 12, 4, 4, 15, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 14]), Any[12, 14, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 7, 9, 14]), Any[6, 7, 9, 14, 3])])
problem_caesar_cipher_k_modulo_n_with_k_1_and_n_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 1]), Any[0, 0, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 1, 2, 2, 2]), Any[2, 2, 0, 2, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 0, 2, 0, 1]), Any[2, 1, 1, 0, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 1]), Any[2, 1, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 2, 2]), Any[1, 1, 1, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 1, 1]), Any[2, 1, 2, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 2, 1]), Any[2, 0, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 1]), Any[2, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0]), Any[1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0, 0]), Any[2, 2, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0, 0, 1, 0, 0]), Any[2, 2, 1, 1, 2, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 1, 1, 2, 1, 0]), Any[0, 0, 2, 2, 0, 2, 1])])
problem_caesar_cipher_k_modulo_n_with_k_2_and_n_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0, 0, 0])])
problem_take_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 10, 3, 0, 7, 7]), Any[7, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 6, 2, 14]), Any[3, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 4, 16]), Any[7, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 0, 14, 12, 16, 15, 1, 14]), Any[15, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 2, 13, 4, 15, 6, 14, 8]), Any[5, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 14, 1]), Any[13, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 2, 11, 4, 1, 6, 11, 4, 1]), Any[14, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 14]), Any[14, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 6]), Any[7, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 5, 1, 15, 2, 14, 14, 1, 11]), Any[3, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 2, 1, 14, 8, 6, 9]), Any[11, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 16, 11, 2, 2, 5, 12, 2]), Any[7, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 0, 16, 1, 2, 5]), Any[15, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 9, 12, 12, 2, 3, 5, 15]), Any[1, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 7, 1, 11]), Any[14, 7])])
problem_caesar_cipher_k_modulo_n_with_k_0_and_n_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[])])
problem_take_k_with_k_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 3, 11, 12, 6, 7, 13, 9, 9]), Any[7, 3, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 9, 2, 2, 6, 6, 15, 1]), Any[1, 7, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 13, 16, 16, 1]), Any[2, 13, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2, 15]), Any[0, 2, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 5, 11, 7]), Any[6, 5, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 15, 15]), Any[7, 7, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 13, 8, 1, 9]), Any[2, 13, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 10, 10]), Any[1, 10, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 6, 0, 9, 4, 13]), Any[14, 6, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 2, 16, 13, 6, 16, 8, 2, 11, 8]), Any[11, 2, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 7, 11, 10, 10, 9, 8]), Any[15, 7, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 16, 15, 16, 3, 10, 11, 3]), Any[7, 4, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 0, 13, 7, 10, 12, 4]), Any[1, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 7, 14]), Any[10, 7, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 15, 6, 6, 1, 5]), Any[8, 15, 6])])
problem_add_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[14, 13, 12, 6]), Any[16, 15, 14, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 6, 14, 7, 14, 16, 13]), Any[10, 8, 16, 9, 16, 18, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 1, 0, 11, 0, 10]), Any[9, 3, 2, 13, 2, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 4, 9, 6]), Any[11, 6, 11, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 4, 3, 13, 13]), Any[4, 6, 5, 15, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 5, 7, 6, 8]), Any[13, 7, 9, 8, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 12, 16, 9]), Any[11, 14, 18, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 11, 7]), Any[11, 13, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 0]), Any[7, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 6, 0, 3]), Any[13, 8, 2, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 11, 0, 0, 5, 3, 2]), Any[11, 13, 2, 2, 7, 5, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 13, 6, 8, 14, 8, 2]), Any[18, 15, 8, 10, 16, 10, 4])])
problem_bool_identify_k_with_k_0 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[11, 9, 0]), Any[false, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 7]), Any[true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 15]), Any[false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 12, 15]), Any[false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 9]), Any[true, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0]), Any[true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12]), Any[false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 8]), Any[true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 14, 15, 0]), Any[false, false, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 14, 9]), Any[true, true, true, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 15, 11]), Any[false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 7, 2, 6]), Any[false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 15, 4, 7]), Any[false, false, false, false])])
problem_odds = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 3]), Any[1, 1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 4, 2, 0, 5, 1, 1]), Any[5, 5, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 10]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 8]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12, 6, 9, 1, 12]), Any[9, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 8, 13, 9, 6, 8]), Any[1, 13, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 0]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 10, 15, 8, 14, 3]), Any[15, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 16, 4, 8]), Any[5])])
problem_caesar_cipher_k_modulo_n_with_k_4_and_n_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 2, 3, 3, 1]), Any[3, 2, 1, 2, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 2, 2, 2, 0, 2]), Any[0, 4, 1, 1, 1, 4, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 2, 4]), Any[1, 0, 1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 2, 4, 2]), Any[3, 2, 1, 3, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2, 2]), Any[3, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 2, 4, 0, 1, 0]), Any[4, 4, 1, 3, 4, 0, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 3]), Any[1, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 0, 2, 1, 0]), Any[2, 2, 4, 1, 0, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2]), Any[1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 4, 1, 0]), Any[0, 1, 3, 0, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[])])
problem_replace_all_with_index_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[8, 7, 16, 9, 3, 15]), Any[3, 3, 3, 3, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 13, 7, 14, 0, 3, 12]), Any[0, 0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 16, 9, 13, 14, 13]), Any[14, 14, 14, 14, 14, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 16, 8, 9, 13, 8, 12, 11, 4, 5, 2]), Any[13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 10, 1, 16, 2, 11, 10, 12, 4, 10, 8, 6]), Any[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 4, 9, 8, 7, 9, 16]), Any[7, 7, 7, 7, 7, 7, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 8, 15, 3, 4, 13, 9, 3, 3]), Any[4, 4, 4, 4, 4, 4, 4, 4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 5, 16, 14, 4, 6, 15, 12, 9, 13, 15]), Any[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 5, 7, 1, 5]), Any[5, 5, 5, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 5, 7, 11, 11, 0, 12, 3, 1]), Any[11, 11, 11, 11, 11, 11, 11, 11, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 12, 12, 15, 13, 16, 5, 13]), Any[13, 13, 13, 13, 13, 13, 13, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 3, 6, 14, 5]), Any[5, 5, 5, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 1, 15, 8, 5, 3, 10, 11, 6, 8]), Any[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 5, 3, 0, 9, 15, 1, 1]), Any[9, 9, 9, 9, 9, 9, 9, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 13, 9, 8, 3, 4, 5]), Any[3, 3, 3, 3, 3, 3, 3])])
problem_caesar_cipher_k_modulo_n_with_k_1_and_n_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 0, 0, 0, 0]), Any[0, 0, 0, 0, 0, 0, 0])])
problem_bool_identify_geq_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 11]), Any[true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 1, 3, 4, 15, 3]), Any[true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 5, 7, 7, 2]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3, 3]), Any[true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3, 3]), Any[true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 4, 0, 7, 4]), Any[true, true, true, false, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 0, 1]), Any[true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[-3, -3]), Any[false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 5, 1, 5, 6]), Any[true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 15, 11, 14, 1]), Any[true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 15, 1, 15, 13, 10]), Any[true, true, true, true, true, true])])
problem_index_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 11, 0, 11]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 16, 6, 4, 4, 1, 5, 1, 10]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 13, 4, 8, 10, 3]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 9, 0, 0, 5]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 5, 2, 16, 10, 1, 9, 16, 8, 11, 16]), 16), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 11, 7, 2, 5, 9, 11, 13, 2, 9]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 2, 10, 13, 9, 13, 16]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 5, 2, 14, 6, 9]), 14), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 7, 3, 11, 16, 4, 10, 7, 5, 7]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 14, 10, 13]), 13), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8, 6, 7, 15, 2, 9, 16]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 0, 3, 4, 9, 2, 15, 4, 8, 5, 8]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 16, 5, 11, 11, 14]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 6, 12, 8]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 9, 7, 11]), 11)])
problem_repeat_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 3, 7, 14]), Any[15, 3, 7, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 8]), Any[15, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 11, 12]), Any[0, 11, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 16, 0]), Any[15, 16, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 6]), Any[9, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 8]), Any[13, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 7, 10, 10]), Any[16, 7, 10, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 10, 2, 3]), Any[9, 10, 2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 8]), Any[1, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), Any[16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 4]), Any[16, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[])])
problem_caesar_cipher_k_modulo_n_with_k_1_and_n_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 0, 1, 0]), Any[1, 1, 1, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 1, 0, 1, 0]), Any[1, 1, 0, 1, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 1]), Any[1, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 0, 0, 1, 0]), Any[0, 1, 0, 1, 1, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0]), Any[0, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0, 1, 0]), Any[1, 0, 1, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 0]), Any[0, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1, 1, 1]), Any[0, 1, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0]), Any[0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0, 0, 1, 0]), Any[1, 0, 1, 1, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0]), Any[1, 0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 1]), Any[1, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[0])])
problem_slice_k_n_with_k_4_and_n_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[4, 15, 8, 1, 13, 7, 5]), Any[1, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 11, 3, 5, 1, 14, 8, 3, 14, 11, 16, 1, 7]), Any[5, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 4, 13, 5, 6, 10, 8, 2, 4, 2]), Any[5, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 14, 0, 16, 0, 12, 0, 2, 7, 8, 5, 9, 10, 2]), Any[16, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 3, 6, 9, 13, 11, 0, 10, 5, 15, 4, 6, 6]), Any[9, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 10, 10, 3, 9, 11, 10, 2, 9, 0, 5]), Any[3, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 5, 10, 13, 4, 1, 14, 4]), Any[13, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 11, 12, 6, 11, 5, 0]), Any[6, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 9, 10, 1, 7, 7, 10, 7, 4, 1, 2, 12, 9, 14]), Any[1, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 8, 0, 14, 10, 16, 6, 9, 10, 3]), Any[14, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 2, 9, 6, 5, 9, 12, 11, 11, 6]), Any[6, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 14, 15, 4, 16, 7, 14, 14, 2, 10, 1, 1, 1]), Any[4, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 6, 14, 11, 16, 9, 5, 16]), Any[11, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 7, 8, 0, 7, 6, 8, 6, 9, 8]), Any[0, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 7, 9, 2, 4, 16, 11]), Any[2, 4])])
problem_index_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 15, 1, 4, 12, 10, 8, 7, 4, 2, 3, 12]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 15, 6, 5, 2, 13, 14, 5, 12]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 11, 8, 8, 5, 6, 2]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 1, 6, 0, 4, 14, 15, 6, 6, 14, 4, 7]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 1, 4, 0, 6, 0, 14, 13, 12]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 3, 16, 10, 12, 14, 12, 16, 13, 8, 3]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 4, 2, 11, 6, 4, 9, 11, 5, 11, 1, 0]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 12, 15, 3, 7, 14]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 8, 9, 0, 11, 12, 9, 15]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 8, 9, 6, 7, 13, 8, 13, 16, 7, 10, 10]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 10, 2, 3, 5, 1, 8, 4, 3, 3, 16]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 4, 1, 12, 3, 12, 15]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 5, 15, 15, 2, 10, 13, 15, 3, 7]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 7, 13, 6, 12]), 12), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 11, 12, 5, 13, 11]), 13)])
problem_append_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[3, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 2, 9, 8, 8]), Any[11, 2, 9, 8, 8, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 11]), Any[13, 11, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 16, 15, 0, 13, 10, 7]), Any[2, 16, 15, 0, 13, 10, 7, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 10, 10, 6, 11, 0]), Any[5, 10, 10, 6, 11, 0, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 15, 13, 8, 14, 10]), Any[10, 15, 13, 8, 14, 10, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 14, 2, 9, 2]), Any[14, 14, 2, 9, 2, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 16, 14, 12, 2]), Any[7, 16, 14, 12, 2, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13]), Any[13, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 14, 14, 0, 5, 10]), Any[11, 14, 14, 0, 5, 10, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1, 8, 0, 5, 7]), Any[14, 1, 8, 0, 5, 7, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[3, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 9]), Any[8, 9, 4])])
problem_add_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[3, 4, 4, 13, 6]), Any[4, 5, 5, 14, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2, 12, 2, 11, 0]), Any[1, 3, 13, 3, 12, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 12, 15]), Any[5, 13, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 2, 16, 2, 5, 15, 6]), Any[16, 3, 17, 3, 6, 16, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 13, 6]), Any[9, 14, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 11, 7, 9, 3]), Any[1, 12, 8, 10, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 10, 4]), Any[10, 11, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 1, 13, 10, 13]), Any[10, 2, 14, 11, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 6]), Any[10, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 9, 8, 1, 12, 3]), Any[8, 10, 9, 2, 13, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14, 1]), Any[5, 15, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 2, 13]), Any[7, 3, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14]), Any[15])])
problem_caesar_cipher_k_modulo_n_with_k_0_and_n_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 0]), Any[1, 1, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3]), Any[3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 4]), Any[3, 3, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 3, 3, 1, 4, 1]), Any[4, 4, 3, 3, 1, 4, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 2, 0, 2, 3, 0]), Any[0, 1, 2, 0, 2, 3, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 3, 1]), Any[0, 3, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 4, 1, 4, 1, 0, 4]), Any[3, 4, 1, 4, 1, 0, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 3, 4]), Any[1, 3, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 1]), Any[4, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 4]), Any[0, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2]), Any[2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 4, 2, 1]), Any[1, 4, 2, 1])])
problem_modulo_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 8, 1, 9]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 15, 1, 12, 4, 0, 0]), Any[0, 0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 14, 14, 0, 7, 3]), Any[0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 1, 16, 14, 2, 12, 11]), Any[0, 0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 9, 8, 8, 4, 3]), Any[0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 16, 6, 4, 6, 12]), Any[0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 16, 12]), Any[0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 4, 12]), Any[0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 15, 15, 16, 9]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 0, 2, 7, 11, 13]), Any[0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 10, 9, 7, 8, 8]), Any[0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 7, 10, 4]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 16, 5, 15, 8, 10, 13]), Any[0, 0, 0, 0, 0, 0, 0])])
problem_slice_k_n_with_k_3_and_n_3 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5, 7, 11, 0, 7, 16]), Any[7, 11, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 16, 12, 7, 5, 4, 15, 1, 11, 1]), Any[12, 7, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 3, 4, 11, 12, 2, 8, 12]), Any[4, 11, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 9, 3, 2, 14, 6, 2, 8, 14]), Any[3, 2, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 13, 9, 7, 8, 15, 9, 15, 7, 4, 9]), Any[9, 7, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 16, 13, 4, 15, 14]), Any[16, 13, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 13, 13, 11, 6, 15, 7, 8, 5, 10, 1]), Any[13, 11, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 6, 3, 11, 8, 0, 13, 2, 12, 10, 12, 12, 15]), Any[3, 11, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 10, 15, 15, 6, 3, 4, 10, 12, 11, 7, 15]), Any[15, 15, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 5, 13, 13, 16, 11, 3, 7]), Any[13, 13, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 10, 5, 13, 10, 7, 5]), Any[5, 13, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 6, 3, 12, 2, 3, 11, 6, 2, 7, 11, 2, 13, 8]), Any[3, 12, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 2, 1, 10, 0, 14, 0, 14]), Any[2, 1, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 15, 7, 4, 2, 15, 1, 7, 10, 3]), Any[7, 4, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 1, 1, 7, 1, 12, 3, 5, 1, 12, 11]), Any[1, 7, 1])])
problem_slice_k_n_with_k_5_and_n_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[9, 1, 14, 12, 11, 7, 8]), Any[11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 11, 14, 5, 8, 11, 7]), Any[8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 12, 11, 0, 0, 5, 10, 14]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 3, 16, 10, 7, 13, 3, 4]), Any[7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 2, 13, 14, 12, 1, 7, 1, 13, 4, 5]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 12, 1, 4, 5, 14, 3]), Any[5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 3, 7, 9, 3, 8, 10, 9]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 16, 6, 11, 11, 16, 8, 1, 1, 1, 15, 11]), Any[11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 11, 4, 16, 12, 5, 4, 3, 7, 10, 16, 16, 11, 7]), Any[12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 12, 11, 12, 3, 4, 0, 2, 13, 16, 6, 13, 5]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 2, 13, 7, 6, 6, 14, 5, 15, 5, 16]), Any[6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 14, 4, 6, 15, 10, 14, 8]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 16, 9, 15, 13, 13, 15, 4, 11, 9, 16]), Any[13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 8, 9, 14, 16, 4, 5, 9, 9, 3, 9, 14, 10, 0]), Any[16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 8, 9, 8, 14, 11, 12, 14, 12, 14, 8]), Any[14])])
problem_slice_k_n_with_k_1_and_n_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[10, 0, 10, 4, 4, 5, 5, 2, 13, 14, 13, 6, 3]), Any[10, 0, 10, 4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 8, 2, 14, 6, 14, 5, 5]), Any[7, 8, 2, 14, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 1, 16, 9, 16, 14, 6, 15, 2, 9, 1]), Any[7, 4, 1, 16, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 2, 10, 8, 8, 14, 6, 4, 8, 8, 16]), Any[15, 2, 10, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 11, 5, 14, 15, 11, 12, 9, 7, 5]), Any[7, 11, 5, 14, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 6, 12, 11, 12, 12, 2]), Any[15, 6, 12, 11, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12, 15, 7, 10, 4, 14, 11, 7]), Any[2, 12, 15, 7, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 15, 4, 2, 11, 12, 11, 9, 16, 11, 16, 12, 2, 1]), Any[1, 15, 4, 2, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 7, 4, 16, 10, 8, 12]), Any[5, 7, 4, 16, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 10, 7, 16, 3, 14, 0]), Any[8, 10, 7, 16, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 11, 9, 11, 9, 7, 3, 3, 13, 10, 3]), Any[3, 11, 9, 11, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 12, 3, 12, 5, 14, 2, 5, 1, 13]), Any[10, 12, 3, 12, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 14, 10, 13, 16, 6, 1, 14, 12, 3, 12, 15, 5]), Any[3, 14, 10, 13, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 0, 13, 7, 3, 5, 13, 11, 12, 5, 11]), Any[3, 0, 13, 7, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 2, 3, 14, 10, 0, 12, 16, 13]), Any[14, 2, 3, 14, 10])])
problem_append_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 13, 1, 7, 8]), Any[4, 13, 1, 7, 8, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 5, 15]), Any[1, 5, 15, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 7, 12]), Any[12, 7, 12, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 13, 11]), Any[8, 13, 11, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 5, 15, 0]), Any[4, 5, 15, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 12, 13, 12, 1]), Any[14, 12, 13, 12, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), Any[5, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 1, 3, 1, 4, 15]), Any[7, 1, 3, 1, 4, 15, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 11, 8, 4, 10]), Any[4, 11, 8, 4, 10, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2, 12, 14, 9]), Any[4, 2, 12, 14, 9, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 12, 9, 6, 8, 2]), Any[12, 12, 9, 6, 8, 2, 2])])
problem_append_index_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 13, 14, 11, 14, 14, 0, 5]), Any[2, 3, 13, 14, 11, 14, 14, 0, 5, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 14, 1, 8, 0, 5, 7, 3]), Any[12, 14, 1, 8, 0, 5, 7, 3, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 4, 8, 9, 3]), Any[2, 4, 8, 9, 3, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 2, 13, 3, 0, 8]), Any[5, 2, 13, 3, 0, 8, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 13, 3, 9, 14, 2, 1, 16, 7, 11, 7]), Any[0, 13, 3, 9, 14, 2, 1, 16, 7, 11, 7, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 1, 16, 6, 16]), Any[8, 1, 16, 6, 16, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 8, 5]), Any[5, 11, 8, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 14, 6, 9, 8, 2, 5, 13, 3, 7]), Any[9, 14, 6, 9, 8, 2, 5, 13, 3, 7, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 7, 10, 3, 1, 4]), Any[14, 7, 10, 3, 1, 4, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 5, 4, 4, 2, 0, 1, 8]), Any[3, 5, 4, 4, 2, 0, 1, 8, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 12, 16, 14, 14, 8, 4, 0, 6, 2, 7]), Any[0, 12, 16, 14, 14, 8, 4, 0, 6, 2, 7, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 13, 11, 9, 0, 13, 6, 16, 12]), Any[8, 13, 11, 9, 0, 13, 6, 16, 12, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 3, 7, 1, 14, 0, 0, 2]), Any[5, 3, 7, 1, 14, 0, 0, 2, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 12, 1, 15, 3, 12, 4, 5, 5, 4]), Any[11, 12, 1, 15, 3, 12, 4, 5, 5, 4, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 10, 6, 6, 12, 0, 7, 13, 15, 16]), Any[1, 1, 10, 6, 6, 12, 0, 7, 13, 15, 16, 6])])
problem_slice_k_n_with_k_5_and_n_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[11, 6, 2, 10, 12, 4, 9, 5, 7, 10, 5]), Any[12, 4, 9, 5, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 15, 3, 13, 4, 13, 4, 11, 8, 1, 3, 9, 13, 13]), Any[4, 13, 4, 11, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 4, 13, 12, 10, 10, 3, 2, 10, 4, 10, 1, 0, 4, 4]), Any[10, 10, 3, 2, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 2, 11, 14, 15, 6, 12, 8, 12, 4, 3, 2, 3, 1, 1]), Any[15, 6, 12, 8, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 11, 2, 2, 14, 5, 13, 9, 10, 2, 11]), Any[14, 5, 13, 9, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 15, 0, 13, 13, 9, 2, 11, 6, 7, 3, 3, 12, 10, 2, 10]), Any[13, 9, 2, 11, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 0, 5, 2, 1, 6, 13, 16, 14, 6, 13, 16, 6]), Any[1, 6, 13, 16, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 0, 6, 7, 6, 2, 8, 6, 13, 3, 6]), Any[6, 2, 8, 6, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 3, 11, 16, 10, 4, 8, 12, 0, 15, 9, 4, 4, 8, 11, 11, 9, 1]), Any[10, 4, 8, 12, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 0, 10, 14, 10, 8, 12, 8, 7, 16, 0, 8, 5, 3, 10]), Any[10, 8, 12, 8, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 9, 6, 15, 6, 12, 6, 7, 5, 9, 6, 5, 13]), Any[6, 12, 6, 7, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 13, 5, 7, 16, 11, 12, 2, 0, 3, 9, 14, 6, 2]), Any[16, 11, 12, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 5, 3, 2, 12, 3, 9, 10, 9, 16, 15, 6, 9, 0, 7, 16]), Any[12, 3, 9, 10, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 5, 3, 2, 6, 16, 16, 15, 11, 11, 16, 3, 16]), Any[6, 16, 16, 15, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 13, 3, 15, 11, 5, 0, 16, 4, 9, 8, 7, 16, 4, 9, 6]), Any[11, 5, 0, 16, 4])])
problem_sort = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 4]), Any[0, 2, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 4, 2, 0, 5, 1, 1]), Any[0, 1, 1, 2, 2, 4, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 2, 10, 13]), Any[2, 7, 10, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9]), Any[9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 14]), Any[0, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 2, 10, 14]), Any[2, 8, 10, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 8, 14, 7, 8]), Any[7, 8, 8, 11, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 2, 8, 5, 15]), Any[2, 5, 8, 12, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 3, 8]), Any[3, 8, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 0]), Any[0, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13]), Any[13])])
problem_is_primes = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 12]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 9, 13, 0, 3, 10, 12]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[71, 13]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 13]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[67, 179, 17, 163, 79]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 14]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[17, 193, 149, 13, 3, 47]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2, 6, 16]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), false), 
	IOExample(Dict{Symbol, Any}(:i => Any[5]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 13, 7, 5]), true), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), true)])
problem_caesar_cipher_k_modulo_n_with_k_0_and_n_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1]), Any[0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 0]), Any[0, 1, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 0, 1, 2, 3, 0, 2]), Any[3, 0, 1, 2, 3, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 2, 3]), Any[3, 2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 2]), Any[3, 3, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 0, 3, 3]), Any[3, 0, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 3, 2]), Any[3, 3, 3, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 3]), Any[2, 0, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 2, 0, 2]), Any[2, 3, 2, 0, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1]), Any[3, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 2, 0, 0]), Any[2, 1, 2, 0, 0])])
problem_rotate_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[16, 15, 10, 15, 5, 16, 9, 7, 9, 11, 2, 2]), Any[2, 16, 15, 10, 15, 5, 16, 9, 7, 9, 11, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 5, 9, 13, 4, 8, 10, 3, 2, 12, 9, 0]), Any[0, 10, 5, 9, 13, 4, 8, 10, 3, 2, 12, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 5, 16, 12, 11]), Any[11, 8, 5, 16, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 13, 14, 2, 11, 6, 6, 5, 6, 13, 16, 7, 6, 13]), Any[13, 1, 13, 14, 2, 11, 6, 6, 5, 6, 13, 16, 7, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 14, 6, 2, 2, 13, 5, 7, 3, 4, 9, 6, 4, 11]), Any[11, 1, 14, 6, 2, 2, 13, 5, 7, 3, 4, 9, 6, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 5, 6, 6, 3, 5, 7, 6, 5, 11]), Any[11, 13, 5, 6, 6, 3, 5, 7, 6, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 0, 2, 3, 8, 4, 12, 4, 15, 7, 13, 4, 4, 9, 16, 7]), Any[7, 12, 0, 2, 3, 8, 4, 12, 4, 15, 7, 13, 4, 4, 9, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 3, 6, 7, 6, 8, 5, 6, 10, 3, 14, 4, 3, 8]), Any[8, 11, 3, 6, 7, 6, 8, 5, 6, 10, 3, 14, 4, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 12]), Any[12, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 14, 10, 5, 2, 16, 10, 1, 9, 16]), Any[16, 5, 14, 10, 5, 2, 16, 10, 1, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 10, 4, 14, 4, 16, 1, 8, 4, 7, 6, 0, 2, 0, 7, 8]), Any[8, 7, 10, 4, 14, 4, 16, 1, 8, 4, 7, 6, 0, 2, 0, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 15, 10, 14, 4, 10, 1, 3, 13]), Any[13, 0, 1, 15, 10, 14, 4, 10, 1, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 2, 5, 10, 14, 15, 9, 11, 13, 5, 15, 1, 15, 0, 9, 0, 12]), Any[12, 10, 2, 5, 10, 14, 15, 9, 11, 13, 5, 15, 1, 15, 0, 9, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1]), Any[1, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 16, 6, 14, 11, 5, 1, 4, 2, 0, 15, 14, 13, 16, 12, 8, 11]), Any[11, 10, 16, 6, 14, 11, 5, 1, 4, 2, 0, 15, 14, 13, 16, 12, 8])])
problem_rotate_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 6, 10, 10, 8, 15, 16, 15, 1, 2, 7, 5, 4, 0, 13]), Any[5, 4, 0, 13, 2, 6, 10, 10, 8, 15, 16, 15, 1, 2, 7]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 15, 3, 7]), Any[9, 15, 3, 7, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 2, 1, 10, 7, 2, 4, 3, 4, 10, 3, 12, 0, 15, 14]), Any[12, 0, 15, 14, 7, 7, 2, 1, 10, 7, 2, 4, 3, 4, 10, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 6, 15, 12, 9, 14, 7, 9, 7, 7, 8, 1]), Any[7, 7, 8, 1, 12, 6, 15, 12, 9, 14, 7, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 9, 13, 6, 10, 10, 14, 4, 11, 3, 0, 3, 12, 13, 13, 16]), Any[12, 13, 13, 16, 7, 9, 13, 6, 10, 10, 14, 4, 11, 3, 0, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 8, 14, 3, 4, 16, 1, 2, 5, 10, 5, 16, 4, 8]), Any[5, 16, 4, 8, 15, 8, 14, 3, 4, 16, 1, 2, 5, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 2, 5, 8, 2, 2, 2, 10, 12, 5, 13]), Any[10, 12, 5, 13, 5, 2, 5, 8, 2, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 8, 6, 7, 15, 2, 9, 16, 16, 4, 0, 3, 4, 9, 2]), Any[3, 4, 9, 2, 10, 8, 6, 7, 15, 2, 9, 16, 16, 4, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 3, 16, 12, 14, 13, 5, 8, 8, 9]), Any[5, 8, 8, 9, 15, 3, 16, 12, 14, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 7, 0, 0, 4, 2, 5, 8, 9, 11, 5, 6, 10, 0, 15, 6, 0]), Any[0, 15, 6, 0, 14, 7, 0, 0, 4, 2, 5, 8, 9, 11, 5, 6, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 2, 8, 16, 9, 8, 11, 10, 14, 11, 16, 5, 15, 2, 5, 13]), Any[15, 2, 5, 13, 11, 2, 8, 16, 9, 8, 11, 10, 14, 11, 16, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 11, 13, 11, 3, 1, 8, 15, 7, 7]), Any[8, 15, 7, 7, 16, 11, 13, 11, 3, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 0, 13, 13, 1, 8, 8, 4, 5]), Any[8, 8, 4, 5, 8, 0, 13, 13, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 5, 11, 7, 11, 10, 3, 14, 0]), Any[10, 3, 14, 0, 3, 5, 11, 7, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 0, 11, 7, 9, 2, 5, 11]), Any[9, 2, 5, 11, 16, 0, 11, 7])])
problem_bool_identify_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[14, 0, 2, 6]), Any[false, false, true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 2, 2, 2, 2]), Any[true, true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 15]), Any[true, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 8, 7, 2, 5, 2]), Any[false, false, false, true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 16, 3, 2, 7, 2]), Any[false, false, false, true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 10, 9]), Any[false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 2, 2, 2, 2]), Any[true, true, true, true, true, true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12, 11, 5, 12, 1]), Any[true, false, false, false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2]), Any[true, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 2, 16, 2]), Any[true, true, true, true, false, true]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3]), Any[false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 8, 1]), Any[false, false, false]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 2, 2, 2, 2]), Any[true, true, true, true, true, true])])
problem_append_k_with_k_1 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[0, 12, 5, 16, 2, 5, 12]), Any[0, 12, 5, 16, 2, 5, 12, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[8, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 16]), Any[0, 16, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 13, 14, 9, 10, 15]), Any[16, 13, 14, 9, 10, 15, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9]), Any[9, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 11, 5, 15, 11, 1, 3]), Any[5, 11, 5, 15, 11, 1, 3, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 0, 6, 13, 5, 15, 6]), Any[4, 0, 6, 13, 5, 15, 6, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7]), Any[7, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 14, 16, 4, 12]), Any[8, 14, 16, 4, 12, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 6]), Any[4, 6, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 11, 5, 1]), Any[13, 11, 5, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 0, 1, 16, 14, 12]), Any[5, 0, 1, 16, 14, 12, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 5, 12, 2, 8]), Any[15, 5, 12, 2, 8, 1])])
problem_mult_k_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 0, 15, 0, 2]), Any[4, 0, 30, 0, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 15, 10]), Any[22, 30, 20]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 13, 13, 15, 3, 6, 1]), Any[18, 26, 26, 30, 6, 12, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 13, 2, 4, 7, 15, 12]), Any[24, 26, 4, 8, 14, 30, 24]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14]), Any[28]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 14, 2, 8, 0, 14, 3]), Any[26, 28, 4, 16, 0, 28, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5, 11, 4, 6]), Any[18, 10, 22, 8, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 1, 5, 8]), Any[8, 2, 10, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 5, 16]), Any[16, 10, 32]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 2, 7, 10, 4]), Any[22, 4, 14, 20, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 16, 1, 8, 4, 7]), Any[8, 32, 2, 16, 8, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 2, 0]), Any[0, 4, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 2, 8]), Any[16, 4, 16])])
problem_keep_mod_head = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[3, 1, 3, 4, 7, 6, 9, 2]), Any[3, 6, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2, 6, 10, 8, 12]), Any[8, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 3]), Any[2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 24, 32]), Any[24, 32]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 15]), Any[15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 18]), Any[18]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 24, 3, 9, 12]), Any[24, 3, 9, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 13]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 2, 12, 9]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 6, 5, 24, 54, 24]), Any[6, 24, 54, 24]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 15, 0, 20, 13, 7]), Any[15, 0, 20]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 3]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 3, 9]), Any[])])
problem_repeat_many = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 2, 3]), Any[1, 2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 2, 3]), Any[1, 2, 3, 1, 2, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 1, 2]), Any[1, 2, 1, 2, 1, 2, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 7, 0]), Any[7, 0, 7, 0, 7, 0, 7, 0, 7, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 2, 5]), Any[3, 2, 5, 3, 2, 5, 3, 2, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 1]), Any[1, 1, 1, 1, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 15, 1]), Any[15, 1, 15, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3]), Any[3, 3, 3, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 7, 16, 2, 2]), Any[7, 16, 2, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 13, 5, 2, 6]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 12]), Any[12, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 10, 11]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 1]), Any[0, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 11, 11, 2]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 4, 4, 1, 5]), Any[4, 4, 1, 5, 4, 4, 1, 5])])
problem_slice_k_n_with_k_2_and_n_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[9, 15, 11, 12, 12, 14, 9, 2, 0, 9, 15, 13, 7, 16]), Any[15, 11, 12, 12, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 10, 0, 3, 8, 5, 1, 7, 4, 2, 7, 14, 16]), Any[10, 0, 3, 8, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 10, 12, 11, 11, 0, 5, 1, 8, 0]), Any[10, 12, 11, 11, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 14, 14, 0, 16, 0, 9, 15, 1, 15, 10]), Any[14, 14, 0, 16, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 6, 8, 15, 15, 14, 12, 3]), Any[6, 8, 15, 15, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 5, 3, 3, 12, 2, 11, 16, 6, 6, 12, 9, 13, 15, 0]), Any[5, 3, 3, 12, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 4, 13, 9, 10, 2, 9, 14, 4, 16]), Any[4, 13, 9, 10, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 14, 6, 13, 10, 6, 12, 8, 11, 14]), Any[14, 6, 13, 10, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 15, 3, 9, 0, 16, 1, 0, 8, 15, 8]), Any[15, 3, 9, 0, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 3, 7, 16, 4, 8, 6, 7, 9, 3, 0, 5, 6]), Any[3, 7, 16, 4, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 10, 2, 15, 16, 11, 16, 9, 13, 10, 1, 8, 14, 5]), Any[10, 2, 15, 16, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 1, 7, 10, 5, 11, 16, 8, 1, 1, 14, 16, 0, 14, 14]), Any[1, 7, 10, 5, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 4, 13, 11, 12, 10, 12, 3, 1, 10, 15, 7]), Any[4, 13, 11, 12, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 12, 10, 16, 5, 6, 9, 4, 1, 0, 13, 4, 15, 7]), Any[12, 10, 16, 5, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 7, 2, 5, 0, 11, 10, 2, 1, 15, 16, 8]), Any[7, 2, 5, 0, 11])])
problem_caesar_cipher_k_modulo_n_with_k_2_and_n_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 2, 3, 3, 1]), Any[1, 0, 4, 0, 0, 3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 0, 2, 2, 2, 0, 2]), Any[3, 2, 4, 4, 4, 2, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1]), Any[3]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 2, 4]), Any[4, 3, 4, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 3, 2, 4, 2]), Any[1, 0, 4, 1, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2, 2]), Any[1, 4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 0, 2, 4, 0, 1, 0]), Any[2, 2, 4, 1, 2, 3, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 3, 3]), Any[4, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 0, 2, 1, 0]), Any[0, 0, 2, 4, 3, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2]), Any[4, 4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 2, 4, 1, 0]), Any[3, 4, 1, 3, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[])])
problem_kth_smallest_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[6, 14, 4, 7, 12, 4, 3]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 0, 6, 0]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 12, 15, 1, 7, 3, 16, 10, 12, 14]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[16, 13, 8, 3, 15, 0, 4, 2, 11]), 4), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 9, 11, 5, 11, 1]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 1, 12, 15]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 14, 8, 15, 8]), 14), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 11, 12, 9, 15, 16, 0, 8]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 7, 13, 8, 13, 16, 7, 10]), 8), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 9, 10, 2, 3, 5, 1, 8]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 16, 6, 16, 4]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 3, 12, 15]), 15), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 5, 15, 15, 2, 10, 13, 15, 3]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 4, 7, 13, 6, 12, 4]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 12, 5, 13, 11, 4, 16, 0, 8]), 8)])
problem_kth_smallest_with_k_2 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[1, 1, 6, 8]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 3, 10]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 5]), 9), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 9, 6, 7, 15]), 6), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 11]), 11), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 3, 7]), 7), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 2, 13, 0, 13, 5, 2, 6, 2]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 5, 0, 10]), 5), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 0, 1, 11, 0, 11]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 16, 6, 4, 4, 1, 5]), 2), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 5]), 10), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 4, 8, 10, 3, 2]), 3), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 0, 0, 5, 14, 10, 5, 2]), 0), 
	IOExample(Dict{Symbol, Any}(:i => Any[10, 1, 9, 16, 8, 11, 16, 13, 1]), 1), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 2, 5, 9, 11, 13, 2]), 2)])
problem_prepend_index_k_with_k_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[9, 14, 2, 7, 6, 8, 8]), Any[6, 9, 14, 2, 7, 6, 8, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 7, 1, 14, 7, 1, 10, 4, 2, 6]), Any[7, 3, 7, 1, 14, 7, 1, 10, 4, 2, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 5, 5, 10, 11, 7, 2, 2, 2, 10, 2, 0]), Any[11, 7, 5, 5, 10, 11, 7, 2, 2, 2, 10, 2, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 7, 0, 4, 12, 2, 4, 13, 6]), Any[12, 14, 7, 0, 4, 12, 2, 4, 13, 6]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 9, 3, 9, 3, 11]), Any[3, 3, 9, 3, 9, 3, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 11, 12, 7, 2, 1, 15, 16]), Any[2, 4, 11, 12, 7, 2, 1, 15, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 9, 0, 7, 11]), Any[11, 8, 9, 0, 7, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 7, 0, 0, 11, 15, 13, 14]), Any[11, 7, 7, 0, 0, 11, 15, 13, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 5, 12, 15, 10, 13]), Any[10, 2, 5, 12, 15, 10, 13]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 15, 14, 11, 13, 15, 13, 11, 9]), Any[13, 6, 15, 14, 11, 13, 15, 13, 11, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 0, 1, 13, 8, 3, 2, 10, 5, 5]), Any[8, 15, 0, 1, 13, 8, 3, 2, 10, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 3, 7, 11, 3, 7, 2, 10, 7, 15]), Any[3, 3, 3, 7, 11, 3, 7, 2, 10, 7, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 11, 7, 7, 0, 4, 5, 11]), Any[0, 2, 11, 7, 7, 0, 4, 5, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 2, 5, 11, 1, 1, 9, 13, 4, 15]), Any[1, 11, 2, 5, 11, 1, 1, 9, 13, 4, 15]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 10, 0, 12, 3]), Any[3, 6, 10, 0, 12, 3])])
problem_mult_k_with_k_0 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[7, 11, 13, 15, 16, 16]), Any[0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 11, 4, 14, 6, 14, 0]), Any[0, 0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 8, 1, 13, 5]), Any[0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[11, 13, 5, 14, 4, 2, 14]), Any[0, 0, 0, 0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 10, 15]), Any[0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 5]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 16]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[9, 7]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 15, 8, 6]), Any[0, 0, 0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[15, 10]), Any[0, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[])])
problem_keep_mod_k_with_k_4 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[2, 7, 3, 3]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[24, 16, 28, 4, 0]), Any[24, 16, 28, 4, 0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 2]), Any[4]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0]), Any[0]), 
	IOExample(Dict{Symbol, Any}(:i => Any[20, 6, 28, 4, 32]), Any[20, 28, 4, 32]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 8, 5, 7]), Any[8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[36, 36, 16]), Any[36, 36, 16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[16]), Any[16]), 
	IOExample(Dict{Symbol, Any}(:i => Any[]), Any[]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 14]), Any[8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[4, 12, 3, 15, 5, 5]), Any[4, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8]), Any[8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[0, 1, 2, 14, 3, 9, 12]), Any[0, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[24, 8, 28, 36, 11, 12]), Any[24, 8, 28, 36, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 3, 10, 14, 4]), Any[4])])
problem_slice_k_n_with_k_4_and_n_5 = Problem(Example[
	IOExample(Dict{Symbol, Any}(:i => Any[13, 8, 8, 16, 2, 3, 13, 1, 9, 9, 1, 16, 7, 11]), Any[16, 2, 3, 13, 1]), 
	IOExample(Dict{Symbol, Any}(:i => Any[13, 11, 11, 9, 11, 2, 7, 2, 7, 2, 0, 12, 10, 4, 14, 11, 15]), Any[9, 11, 2, 7, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[8, 4, 13, 6, 7, 13, 7, 5, 15, 11, 8, 13, 6, 1, 0]), Any[6, 7, 13, 7, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[2, 8, 6, 13, 2, 0, 0, 8, 8, 7, 8, 15, 12, 12, 13]), Any[13, 2, 0, 0, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 15, 7, 1, 16, 16, 6, 8, 9, 15, 14, 1, 12]), Any[1, 16, 16, 6, 8]), 
	IOExample(Dict{Symbol, Any}(:i => Any[6, 5, 16, 5, 5, 12, 12, 9, 9, 16, 14, 14]), Any[5, 5, 12, 12, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 6, 1, 5, 16, 14, 0, 9, 9, 13, 4, 9, 14]), Any[5, 16, 14, 0, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 8, 2, 2, 13, 15, 0, 9, 8, 8, 13, 13, 10, 11, 7]), Any[2, 13, 15, 0, 9]), 
	IOExample(Dict{Symbol, Any}(:i => Any[7, 4, 12, 1, 11, 13, 14, 11, 11, 2, 2, 0, 14, 15]), Any[1, 11, 13, 14, 11]), 
	IOExample(Dict{Symbol, Any}(:i => Any[12, 11, 15, 8, 8, 10, 5, 5, 5, 14, 16]), Any[8, 8, 10, 5, 5]), 
	IOExample(Dict{Symbol, Any}(:i => Any[1, 12, 7, 12, 0, 14, 12, 14, 5, 12, 15, 12, 1, 12, 6]), Any[12, 0, 14, 12, 14]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 8, 12, 8, 2, 14, 1, 2, 15, 2, 14, 0, 0]), Any[8, 2, 14, 1, 2]), 
	IOExample(Dict{Symbol, Any}(:i => Any[3, 0, 1, 14, 6, 10, 10, 12, 6, 0, 1, 9, 6, 7]), Any[14, 6, 10, 10, 12]), 
	IOExample(Dict{Symbol, Any}(:i => Any[5, 14, 2, 6, 12, 5, 6, 10, 4, 8, 14, 12]), Any[6, 12, 5, 6, 10]), 
	IOExample(Dict{Symbol, Any}(:i => Any[14, 14, 8, 2, 4, 8, 10, 9, 12, 11, 10]), Any[2, 4, 8, 10, 9])])
all_problems = [problem_pop, problem_remove_index_k_with_k_5, problem_remove_index_k_with_k_1, problem_empty, problem_prepend_index_k_with_k_3, problem_count_k_with_k_2, problem_is_mod_k_with_k_1, problem_caesar_cipher_k_modulo_n_with_k_0_and_n_3, problem_caesar_cipher_k_modulo_n_with_k_2_and_n_4, problem_evens, problem_slice_k_n_with_k_1_and_n_3, problem_bool_identify_k_with_k_1, problem_kth_largest_with_k_1, problem_modulo_k_with_k_4, problem_caesar_cipher_k_modulo_n_with_k_3_and_n_2, problem_index_k_with_k_3, problem_kth_largest_with_k_3, problem_product, problem_add_k_with_k_3, problem_index_k_with_k_1, problem_reverse, problem_has_k_with_k_1, problem_bool_identify_is_mod_k_with_k_5, problem_slice_k_n_with_k_3_and_n_2, problem_tail, problem_keep_mod_k_with_k_2, problem_append_index_k_with_k_5, problem_slice_k_n_with_k_1_and_n_4, problem_prepend_k_with_k_1, problem_caesar_cipher_k_modulo_n_with_k_0_and_n_2, problem_remove_index_k_with_k_2, problem_remove_index_k_with_k_3, problem_drop_k_with_k_1, problem_modulo_k_with_k_5, problem_append_index_k_with_k_3, problem_caesar_cipher_k_modulo_n_with_k_5_and_n_4, problem_bool_identify_geq_k_with_k_3, problem_bool_identify_is_mod_k_with_k_2, problem_prepend_k_with_k_4, problem_is_mod_k_with_k_4, problem_slice_k_n_with_k_4_and_n_4, problem_add_k_with_k_5, problem_is_squares, problem_has_k_with_k_3, problem_mult_k_with_k_1, problem_slice_k_n_with_k_2_and_n_1, problem_pow_k_with_k_4, problem_is_odds, problem_slice_k_n_with_k_2_and_n_2, problem_caesar_cipher_k_modulo_n_with_k_2_and_n_2, problem_slice_k_n_with_k_1_and_n_2, problem_caesar_cipher_k_modulo_n_with_k_3_and_n_5, problem_prepend_k_with_k_3, problem_prepend_k_with_k_2, problem_caesar_cipher_k_modulo_n_with_k_1_and_n_5, problem_is_mod_k_with_k_2, problem_slice_k_n_with_k_1_and_n_1, problem_mult_k_with_k_4, problem_has_head_in_tail, problem_add_k_with_k_0, problem_caesar_cipher_k_modulo_n_with_k_4_and_n_1, problem_remove_index_k_with_k_4, problem_kth_smallest_with_k_1, problem_range, problem_bool_identify_is_mod_k_with_k_1, problem_slice_k_n_with_k_5_and_n_2, problem_bool_identify_geq_k_with_k_2, problem_append_index_k_with_k_2, problem_sum, problem_count_k_with_k_1, problem_slice_k_n_with_k_5_and_n_3, problem_caesar_cipher_k_modulo_n_with_k_3_and_n_4, problem_has_k_with_k_5, problem_slice_k_n_with_k_2_and_n_4, problem_prepend_index_k_with_k_1, problem_caesar_cipher_k_modulo_n_with_k_3_and_n_3, problem_modulo_k_with_k_3, problem_is_mod_k_with_k_5, problem_take_k_with_k_1, problem_bool_identify_k_with_k_3, problem_rotate_k_with_k_2, problem_pow_k_with_k_5, problem_slice_k_n_with_k_4_and_n_3, problem_caesar_cipher_k_modulo_n_with_k_5_and_n_5, problem_count_k_with_k_5, problem_replace_all_with_index_k_with_k_4, problem_dup, problem_remove_mod_k_with_k_2, problem_take_k_with_k_5, problem_replace_all_with_index_k_with_k_2, problem_index_k_with_k_2, problem_caesar_cipher_k_modulo_n_with_k_5_and_n_2, problem_caesar_cipher_k_modulo_n_with_k_4_and_n_3, problem_caesar_cipher_k_modulo_n_with_k_1_and_n_4, problem_drop_k_with_k_0, problem_fibonacci, problem_drop_k_with_k_5, problem_bool_identify_k_with_k_5, problem_min, problem_caesar_cipher_k_modulo_n_with_k_5_and_n_1, problem_pow_k_with_k_1, problem_mult_k_with_k_3, problem_drop_k_with_k_4, problem_slice_k_n_with_k_3_and_n_4, problem_index_head, problem_caesar_cipher_k_modulo_n_with_k_4_and_n_4, problem_kth_largest_with_k_2, problem_len, problem_remove_mod_k_with_k_4, problem_replace_all_with_index_k_with_k_1, problem_rotate_k_with_k_5, problem_kth_smallest_with_k_5, problem_head, problem_bool_identify_is_mod_k_with_k_3, problem_has_k_with_k_4, problem_bool_identify_geq_k_with_k_4, problem_has_k_with_k_0, problem_append_k_with_k_0, problem_prepend_index_k_with_k_2, problem_modulo_k_with_k_2, problem_caesar_cipher_k_modulo_n_with_k_2_and_n_3, problem_remove_mod_k_with_k_5, problem_last, problem_slice_k_n_with_k_3_and_n_5, problem_rotate_k_with_k_3, problem_pow_k_with_k_2, problem_prepend_index_k_with_k_4, problem_count_head_in_tail, problem_max, problem_has_k_with_k_2, problem_slice_k_n_with_k_5_and_n_4, problem_mult_k_with_k_5, problem_append_k_with_k_5, problem_append_index_k_with_k_1, problem_bool_identify_is_prime, problem_count_k_with_k_3, problem_count_k_with_k_0, problem_bool_identify_geq_k_with_k_0, problem_repeat, problem_prepend_k_with_k_5, problem_drop_k_with_k_3, problem_kth_largest_with_k_5, problem_take_k_with_k_4, problem_remove_mod_k_with_k_3, problem_repeat_k_with_k_5, problem_caesar_cipher_k_modulo_n_with_k_5_and_n_3, problem_slice_k_n_with_k_3_and_n_1, problem_bool_identify_is_mod_k_with_k_4, problem_caesar_cipher_k_modulo_n_with_k_4_and_n_2, problem_keep_mod_k_with_k_3, problem_slice_k_n_with_k_4_and_n_1, problem_is_evens, problem_drop_k_with_k_2, problem_keep_mod_k_with_k_5, problem_is_mod_k_with_k_3, problem_pow_k_with_k_3, problem_repeat_k_with_k_2, problem_slice_k_n_with_k_2_and_n_3, problem_caesar_cipher_k_modulo_n_with_k_3_and_n_1, problem_kth_largest_with_k_4, problem_prepend_k_with_k_0, problem_repeat_k_with_k_4, problem_add_k_with_k_4, problem_repeat_k_with_k_3, problem_replace_all_with_index_k_with_k_3, problem_kth_smallest_with_k_3, problem_remove_mod_head, problem_bool_identify_geq_k_with_k_5, problem_bool_identify_k_with_k_4, problem_keep_mod_k_with_k_1, problem_count_k_with_k_4, problem_append_k_with_k_3, problem_caesar_cipher_k_modulo_n_with_k_1_and_n_3, problem_caesar_cipher_k_modulo_n_with_k_2_and_n_1, problem_take_k_with_k_2, problem_caesar_cipher_k_modulo_n_with_k_0_and_n_1, problem_take_k_with_k_3, problem_add_k_with_k_2, problem_bool_identify_k_with_k_0, problem_odds, problem_caesar_cipher_k_modulo_n_with_k_4_and_n_5, problem_replace_all_with_index_k_with_k_5, problem_caesar_cipher_k_modulo_n_with_k_1_and_n_1, problem_bool_identify_geq_k_with_k_1, problem_index_k_with_k_4, problem_repeat_k_with_k_1, problem_caesar_cipher_k_modulo_n_with_k_1_and_n_2, problem_slice_k_n_with_k_4_and_n_2, problem_index_k_with_k_5, problem_append_k_with_k_4, problem_add_k_with_k_1, problem_caesar_cipher_k_modulo_n_with_k_0_and_n_5, problem_modulo_k_with_k_1, problem_slice_k_n_with_k_3_and_n_3, problem_slice_k_n_with_k_5_and_n_1, problem_slice_k_n_with_k_1_and_n_5, problem_append_k_with_k_2, problem_append_index_k_with_k_4, problem_slice_k_n_with_k_5_and_n_5, problem_sort, problem_is_primes, problem_caesar_cipher_k_modulo_n_with_k_0_and_n_4, problem_rotate_k_with_k_1, problem_rotate_k_with_k_4, problem_bool_identify_k_with_k_2, problem_append_k_with_k_1, problem_mult_k_with_k_2, problem_keep_mod_head, problem_repeat_many, problem_slice_k_n_with_k_2_and_n_5, problem_caesar_cipher_k_modulo_n_with_k_2_and_n_5, problem_kth_smallest_with_k_4, problem_kth_smallest_with_k_2, problem_prepend_index_k_with_k_5, problem_mult_k_with_k_0, problem_keep_mod_k_with_k_4, problem_slice_k_n_with_k_4_and_n_5]
