problem_basement = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-1]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-100]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-1, 100]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-95, 100]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-30, 5]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-50, 50]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, -1]), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[1, -2]), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[3, -97]), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[99, -100]), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[1, -1, -1]), Dict{Symbol, Any}(:output1 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[1, -2, -1]), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, -1, -1]), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 0, -1]), Dict{Symbol, Any}(:output1 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[2, -2, -1]), Dict{Symbol, Any}(:output1 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[5, -6, -5]), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[5, -5, -5]), Dict{Symbol, Any}(:output1 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[100, -100, -100]), Dict{Symbol, Any}(:output1 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-100, -100, -100]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-1, 100, 99]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[5, -10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, -99]), Dict{Symbol, Any}(:output1 => 19)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 10]), Dict{Symbol, Any}(:output1 => 18)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[93, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5]), Dict{Symbol, Any}(:output1 => 19)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[99, -10, -9, -12, -10, -5, -12, -3, -10, -9, -9, -10, -12, -11, -12, -9, -10, -12, -11, -10]), Dict{Symbol, Any}(:output1 => 12)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[1, 1, 1, 1, 2, 2, 2, 2, -1, -1, -1, -2, -3, -4, -5, -1, 1, 2, 3, 4]), Dict{Symbol, Any}(:output1 => 14)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1]), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1]), Dict{Symbol, Any}(:output1 => 10)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]), Dict{Symbol, Any}(:output1 => 19)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[50, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30]), Dict{Symbol, Any}(:output1 => 10)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[50, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30]), Dict{Symbol, Any}(:output1 => 19)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60]), Dict{Symbol, Any}(:output1 => 19)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[20, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30]), Dict{Symbol, Any}(:output1 => 1))])
problem_bouncing_balls = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => 1.001, :input2 => 1.0, :input3 => 1), Dict{Symbol, Any}(:output1 => 2.001)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 100.0, :input2 => 99.999, :input3 => 20), Dict{Symbol, Any}(:output1 => 3999.599534511501)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 100.0, :input2 => 1.0, :input3 => 20), Dict{Symbol, Any}(:output1 => 102.02020201974588)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 15.319, :input2 => 5.635, :input3 => 1), Dict{Symbol, Any}(:output1 => 20.954)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 2.176, :input2 => 1.787, :input3 => 1), Dict{Symbol, Any}(:output1 => 3.963)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 17.165, :input2 => 5.627, :input3 => 1), Dict{Symbol, Any}(:output1 => 22.791999999999998)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 60.567, :input2 => 37.053, :input3 => 1), Dict{Symbol, Any}(:output1 => 97.62)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 62.145, :input2 => 62.058, :input3 => 1), Dict{Symbol, Any}(:output1 => 124.203)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 36.311, :input2 => 33.399, :input3 => 1), Dict{Symbol, Any}(:output1 => 69.71000000000001)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 46.821, :input2 => 8.151, :input3 => 1), Dict{Symbol, Any}(:output1 => 54.971999999999994))])
problem_bowling = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => "--------------------"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "XXXXXXXXXXXX"), Dict{Symbol, Any}(:output1 => 300)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "5/5/5/5/5/5/5/5/5/5/5"), Dict{Symbol, Any}(:output1 => 150)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "7115XXX548/279-X53"), Dict{Symbol, Any}(:output1 => 145)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "532/4362X179-41447/5"), Dict{Symbol, Any}(:output1 => 100)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "24815361356212813581"), Dict{Symbol, Any}(:output1 => 75)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "------X------------"), Dict{Symbol, Any}(:output1 => 10)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "----------3/--------"), Dict{Symbol, Any}(:output1 => 10)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "--------------1-----"), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "11111111111111111111"), Dict{Symbol, Any}(:output1 => 20)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "111111X111111111111"), Dict{Symbol, Any}(:output1 => 30)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "-4-/-2-/-7-6-/-3-/-4"), Dict{Symbol, Any}(:output1 => 66)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "-/-/-/-/-/-/-/-/-/-/-"), Dict{Symbol, Any}(:output1 => 100)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "X52X52X52X52X52"), Dict{Symbol, Any}(:output1 => 120)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "XXXXX----------"), Dict{Symbol, Any}(:output1 => 120)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "XXXXX81XXX-1"), Dict{Symbol, Any}(:output1 => 208)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "XXXX9/XXX2/XXX"), Dict{Symbol, Any}(:output1 => 251)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "XXXXXXXXXXX9"), Dict{Symbol, Any}(:output1 => 299)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "--X34--------------"), Dict{Symbol, Any}(:output1 => 24)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "------3/61----------"), Dict{Symbol, Any}(:output1 => 23)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "----------XX7-----"), Dict{Symbol, Any}(:output1 => 51))])
problem_camel_case = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => ""), Dict{Symbol, Any}(:output1 => "")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "nospaceordash"), Dict{Symbol, Any}(:output1 => "nospaceordash")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "two-words"), Dict{Symbol, Any}(:output1 => "twoWords")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "two words"), Dict{Symbol, Any}(:output1 => "two words")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "all separate words"), Dict{Symbol, Any}(:output1 => "all separate words")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "all-one-word-dashed"), Dict{Symbol, Any}(:output1 => "allOneWordDashed")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "loooooong-wooooords"), Dict{Symbol, Any}(:output1 => "loooooongWooooords")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "loooooong wooooords"), Dict{Symbol, Any}(:output1 => "loooooong wooooords")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "a-b-c-d-e-f-g-h-i-j"), Dict{Symbol, Any}(:output1 => "aBCDEFGHIJ")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "a b c d e f g h i j"), Dict{Symbol, Any}(:output1 => "a b c d e f g h i j")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "saaaaaaaaaaaaaaaaame"), Dict{Symbol, Any}(:output1 => "saaaaaaaaaaaaaaaaame"))])
problem_coin_sums = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => 1), Dict{Symbol, Any}(:output1 => 1, :output4 => 0, :output3 => 0, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 2), Dict{Symbol, Any}(:output1 => 2, :output4 => 0, :output3 => 0, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 3), Dict{Symbol, Any}(:output1 => 3, :output4 => 0, :output3 => 0, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 4), Dict{Symbol, Any}(:output1 => 4, :output4 => 0, :output3 => 0, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 5), Dict{Symbol, Any}(:output1 => 0, :output4 => 0, :output3 => 0, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 6), Dict{Symbol, Any}(:output1 => 1, :output4 => 0, :output3 => 0, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 7), Dict{Symbol, Any}(:output1 => 2, :output4 => 0, :output3 => 0, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 8), Dict{Symbol, Any}(:output1 => 3, :output4 => 0, :output3 => 0, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 9), Dict{Symbol, Any}(:output1 => 4, :output4 => 0, :output3 => 0, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 10), Dict{Symbol, Any}(:output1 => 0, :output4 => 0, :output3 => 1, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 11), Dict{Symbol, Any}(:output1 => 1, :output4 => 0, :output3 => 1, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 12), Dict{Symbol, Any}(:output1 => 2, :output4 => 0, :output3 => 1, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 13), Dict{Symbol, Any}(:output1 => 3, :output4 => 0, :output3 => 1, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 14), Dict{Symbol, Any}(:output1 => 4, :output4 => 0, :output3 => 1, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 15), Dict{Symbol, Any}(:output1 => 0, :output4 => 0, :output3 => 1, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 16), Dict{Symbol, Any}(:output1 => 1, :output4 => 0, :output3 => 1, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 17), Dict{Symbol, Any}(:output1 => 2, :output4 => 0, :output3 => 1, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 18), Dict{Symbol, Any}(:output1 => 3, :output4 => 0, :output3 => 1, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 19), Dict{Symbol, Any}(:output1 => 4, :output4 => 0, :output3 => 1, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 20), Dict{Symbol, Any}(:output1 => 0, :output4 => 0, :output3 => 2, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 21), Dict{Symbol, Any}(:output1 => 1, :output4 => 0, :output3 => 2, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 22), Dict{Symbol, Any}(:output1 => 2, :output4 => 0, :output3 => 2, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 23), Dict{Symbol, Any}(:output1 => 3, :output4 => 0, :output3 => 2, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 24), Dict{Symbol, Any}(:output1 => 4, :output4 => 0, :output3 => 2, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 25), Dict{Symbol, Any}(:output1 => 0, :output4 => 1, :output3 => 0, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 26), Dict{Symbol, Any}(:output1 => 1, :output4 => 1, :output3 => 0, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 27), Dict{Symbol, Any}(:output1 => 2, :output4 => 1, :output3 => 0, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 28), Dict{Symbol, Any}(:output1 => 3, :output4 => 1, :output3 => 0, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 29), Dict{Symbol, Any}(:output1 => 4, :output4 => 1, :output3 => 0, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 30), Dict{Symbol, Any}(:output1 => 0, :output4 => 1, :output3 => 0, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 35), Dict{Symbol, Any}(:output1 => 0, :output4 => 1, :output3 => 1, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 41), Dict{Symbol, Any}(:output1 => 1, :output4 => 1, :output3 => 1, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 109), Dict{Symbol, Any}(:output1 => 4, :output4 => 4, :output3 => 0, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 10000), Dict{Symbol, Any}(:output1 => 0, :output4 => 400, :output3 => 0, :output2 => 0))])
problem_cut_vector = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0]), Dict{Symbol, Any}(:output1 => Any[0], :output2 => Any[])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[10]), Dict{Symbol, Any}(:output1 => Any[10], :output2 => Any[])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[100]), Dict{Symbol, Any}(:output1 => Any[100], :output2 => Any[])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[1000]), Dict{Symbol, Any}(:output1 => Any[1000], :output2 => Any[])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[10000]), Dict{Symbol, Any}(:output1 => Any[10000], :output2 => Any[])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[2, 129]), Dict{Symbol, Any}(:output1 => Any[2], :output2 => Any[129])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 40]), Dict{Symbol, Any}(:output1 => Any[0], :output2 => Any[40])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9999, 74]), Dict{Symbol, Any}(:output1 => Any[9999], :output2 => Any[74])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9879, 9950]), Dict{Symbol, Any}(:output1 => Any[9879], :output2 => Any[9950])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9225, 9994]), Dict{Symbol, Any}(:output1 => Any[9225], :output2 => Any[9994]))])
problem_dice_game = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => 1, :input2 => 2), Dict{Symbol, Any}(:output1 => 0.0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 2, :input2 => 1), Dict{Symbol, Any}(:output1 => 0.5)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 99, :input2 => 100), Dict{Symbol, Any}(:output1 => 0.49)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 100, :input2 => 99), Dict{Symbol, Any}(:output1 => 0.5)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 1, :input2 => 100), Dict{Symbol, Any}(:output1 => 0.0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 100, :input2 => 1), Dict{Symbol, Any}(:output1 => 0.99)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 3, :input2 => 4), Dict{Symbol, Any}(:output1 => 0.25)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 4, :input2 => 3), Dict{Symbol, Any}(:output1 => 0.5)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 4, :input2 => 6), Dict{Symbol, Any}(:output1 => 0.25)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 6, :input2 => 4), Dict{Symbol, Any}(:output1 => 0.5833333)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 49, :input2 => 50), Dict{Symbol, Any}(:output1 => 0.48)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 50, :input2 => 49), Dict{Symbol, Any}(:output1 => 0.5)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 1, :input2 => 1), Dict{Symbol, Any}(:output1 => 0.0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 50, :input2 => 50), Dict{Symbol, Any}(:output1 => 0.49)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 100, :input2 => 100), Dict{Symbol, Any}(:output1 => 0.495))])
problem_find_pair = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[5, 7], :input2 => 12), Dict{Symbol, Any}(:output1 => 5, :output2 => 7)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[2500, 6352], :input2 => 8852), Dict{Symbol, Any}(:output1 => 2500, :output2 => 6352)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-14, 5], :input2 => -9), Dict{Symbol, Any}(:output1 => -14, :output2 => 5)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[40, -19], :input2 => 21), Dict{Symbol, Any}(:output1 => 40, :output2 => -19)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-4, 4], :input2 => 0), Dict{Symbol, Any}(:output1 => -4, :output2 => 4)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-5, -20], :input2 => -25), Dict{Symbol, Any}(:output1 => -5, :output2 => -20)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-7831, -3001], :input2 => -10832), Dict{Symbol, Any}(:output1 => -7831, :output2 => -3001)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[10000, -10000], :input2 => 0), Dict{Symbol, Any}(:output1 => 10000, :output2 => -10000)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[8310, -8320], :input2 => -10), Dict{Symbol, Any}(:output1 => 8310, :output2 => -8320)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 1234], :input2 => 1234), Dict{Symbol, Any}(:output1 => 0, :output2 => 1234)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[1, 3, 5], :input2 => 4), Dict{Symbol, Any}(:output1 => 1, :output2 => 3)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[1, 3, 5], :input2 => 6), Dict{Symbol, Any}(:output1 => 1, :output2 => 5)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[1, 3, 5], :input2 => 8), Dict{Symbol, Any}(:output1 => 3, :output2 => 5)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-1, 0, 1], :input2 => 0), Dict{Symbol, Any}(:output1 => -1, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-1, 0, 1], :input2 => 1), Dict{Symbol, Any}(:output1 => 0, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-1, 0, 1], :input2 => -1), Dict{Symbol, Any}(:output1 => -1, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[14, -35, 78], :input2 => -21), Dict{Symbol, Any}(:output1 => 14, :output2 => -35)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[14, -35, 78], :input2 => 92), Dict{Symbol, Any}(:output1 => 14, :output2 => 78)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[14, -35, 78], :input2 => 43), Dict{Symbol, Any}(:output1 => -35, :output2 => 78)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9492, -3791, -7317], :input2 => 5701), Dict{Symbol, Any}(:output1 => 9492, :output2 => -3791)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9492, -3791, -7317], :input2 => 2175), Dict{Symbol, Any}(:output1 => 9492, :output2 => -7317)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9492, -3791, -7317], :input2 => -11108), Dict{Symbol, Any}(:output1 => -3791, :output2 => -7317)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[237, 410, -777], :input2 => 647), Dict{Symbol, Any}(:output1 => 237, :output2 => 410)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[237, 410, -777], :input2 => -540), Dict{Symbol, Any}(:output1 => 237, :output2 => -777)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[237, 410, -777], :input2 => -367), Dict{Symbol, Any}(:output1 => 410, :output2 => -777))])
problem_fizz_buzz = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => 1), Dict{Symbol, Any}(:output1 => "1")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 2), Dict{Symbol, Any}(:output1 => "2")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 3), Dict{Symbol, Any}(:output1 => "Fizz")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 4), Dict{Symbol, Any}(:output1 => "4")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 5), Dict{Symbol, Any}(:output1 => "Buzz")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 6), Dict{Symbol, Any}(:output1 => "Fizz")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 7), Dict{Symbol, Any}(:output1 => "7")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 8), Dict{Symbol, Any}(:output1 => "8")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 9), Dict{Symbol, Any}(:output1 => "Fizz")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 10), Dict{Symbol, Any}(:output1 => "Buzz")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 11), Dict{Symbol, Any}(:output1 => "11")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 12), Dict{Symbol, Any}(:output1 => "Fizz")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 13), Dict{Symbol, Any}(:output1 => "13")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 14), Dict{Symbol, Any}(:output1 => "14")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 15), Dict{Symbol, Any}(:output1 => "FizzBuzz")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 16), Dict{Symbol, Any}(:output1 => "16")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 17), Dict{Symbol, Any}(:output1 => "17")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 18), Dict{Symbol, Any}(:output1 => "Fizz")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 19), Dict{Symbol, Any}(:output1 => "19")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 20), Dict{Symbol, Any}(:output1 => "Buzz")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 49995), Dict{Symbol, Any}(:output1 => "FizzBuzz")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 49998), Dict{Symbol, Any}(:output1 => "Fizz")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 49999), Dict{Symbol, Any}(:output1 => "49999")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 50000), Dict{Symbol, Any}(:output1 => "Buzz"))])
problem_fuel_cost = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[6]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[7]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[8]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9]), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[10]), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[11]), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[12]), Dict{Symbol, Any}(:output1 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[13]), Dict{Symbol, Any}(:output1 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[14]), Dict{Symbol, Any}(:output1 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[15]), Dict{Symbol, Any}(:output1 => 3)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[16]), Dict{Symbol, Any}(:output1 => 3)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[17]), Dict{Symbol, Any}(:output1 => 3)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9998]), Dict{Symbol, Any}(:output1 => 3330)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9999]), Dict{Symbol, Any}(:output1 => 3331)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[10000]), Dict{Symbol, Any}(:output1 => 3331)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[6, 6]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9, 14]), Dict{Symbol, Any}(:output1 => 3)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9, 15]), Dict{Symbol, Any}(:output1 => 4)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[14, 9]), Dict{Symbol, Any}(:output1 => 3)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[15, 9]), Dict{Symbol, Any}(:output1 => 4)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[32, 32]), Dict{Symbol, Any}(:output1 => 16)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[33, 33]), Dict{Symbol, Any}(:output1 => 18)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[10000, 9]), Dict{Symbol, Any}(:output1 => 3332)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9, 10000]), Dict{Symbol, Any}(:output1 => 3332)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[10000, 10000]), Dict{Symbol, Any}(:output1 => 6662)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]), Dict{Symbol, Any}(:output1 => 20)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]), Dict{Symbol, Any}(:output1 => 20)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]), Dict{Symbol, Any}(:output1 => 20)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), Dict{Symbol, Any}(:output1 => 40)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]), Dict{Symbol, Any}(:output1 => 40)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998]), Dict{Symbol, Any}(:output1 => 66600)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999]), Dict{Symbol, Any}(:output1 => 66620)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000]), Dict{Symbol, Any}(:output1 => 66620)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]), Dict{Symbol, Any}(:output1 => 15))])
problem_gcd = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => 1, :input2 => 1), Dict{Symbol, Any}(:output1 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 4, :input2 => 400000), Dict{Symbol, Any}(:output1 => 4)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 54, :input2 => 24), Dict{Symbol, Any}(:output1 => 6)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 4200, :input2 => 3528), Dict{Symbol, Any}(:output1 => 168)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 820000, :input2 => 63550), Dict{Symbol, Any}(:output1 => 2050)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 123456, :input2 => 654321), Dict{Symbol, Any}(:output1 => 3))])
problem_indices_of_substring = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => "a", :input2 => "5"), Dict{Symbol, Any}(:output1 => Any[])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "!", :input2 => "!"), Dict{Symbol, Any}(:output1 => Any[0])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "r", :input2 => "nm,xcnwqnd@#\$fwkdjn3"), Dict{Symbol, Any}(:output1 => Any[])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "hi", :input2 => "hihihihihihihihihihi"), Dict{Symbol, Any}(:output1 => Any[])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "############", :input2 => "#"), Dict{Symbol, Any}(:output1 => Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "GGGGGGGGGGGGGGGGGGGG", :input2 => "G"), Dict{Symbol, Any}(:output1 => Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$", :input2 => "\$\$"), Dict{Symbol, Any}(:output1 => Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "33333333333333333333", :input2 => "333"), Dict{Symbol, Any}(:output1 => Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "hahahahahahahahahaha", :input2 => "haha"), Dict{Symbol, Any}(:output1 => Any[0, 2, 4, 6, 8, 10, 12, 14, 16])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "GCTGCTGCTGCTGCTGCTGC", :input2 => "GCTGC"), Dict{Symbol, Any}(:output1 => Any[0, 3, 6, 9, 12, 15])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "bbbbbbb(bb#bbbbbbbb", :input2 => "bbb"), Dict{Symbol, Any}(:output1 => Any[0, 1, 2, 3, 4, 11, 12, 13, 14, 15, 16])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "fa la la la la, la ", :input2 => "la"), Dict{Symbol, Any}(:output1 => Any[3, 6, 9, 12, 16])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "start and and with s", :input2 => "s"), Dict{Symbol, Any}(:output1 => Any[0, 19])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "tomato", :input2 => "tom"), Dict{Symbol, Any}(:output1 => Any[0])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "tomatotomatotomato", :input2 => "tom"), Dict{Symbol, Any}(:output1 => Any[0, 6, 12])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "tomatotomatotomato", :input2 => "to"), Dict{Symbol, Any}(:output1 => Any[0, 4, 6, 10, 12, 16])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "will be zero", :input2 => "this will be zero"), Dict{Symbol, Any}(:output1 => Any[])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "APPEAR twice APPEAR", :input2 => "APPEAR"), Dict{Symbol, Any}(:output1 => Any[0, 13])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "a few ending <3<3<3", :input2 => "<3"), Dict{Symbol, Any}(:output1 => Any[13, 15, 17])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "middle of this one", :input2 => "of"), Dict{Symbol, Any}(:output1 => Any[7]))])
problem_leaders = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[]), Dict{Symbol, Any}(:output1 => Any[])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0]), Dict{Symbol, Any}(:output1 => Any[0])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[451]), Dict{Symbol, Any}(:output1 => Any[451])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[1000, 0]), Dict{Symbol, Any}(:output1 => Any[1000, 0])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 1000]), Dict{Symbol, Any}(:output1 => Any[1000])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[20, 137, 20]), Dict{Symbol, Any}(:output1 => Any[137, 20])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[47, 87, 43, 44]), Dict{Symbol, Any}(:output1 => Any[87, 44])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[5, 5, 5, 5, 5, 5, 5]), Dict{Symbol, Any}(:output1 => Any[5, 5, 5, 5, 5, 5, 5])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]), Dict{Symbol, Any}(:output1 => Any[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), Dict{Symbol, Any}(:output1 => Any[10]))])
problem_luhn = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3]), Dict{Symbol, Any}(:output1 => 80)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]), Dict{Symbol, Any}(:output1 => 144)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]), Dict{Symbol, Any}(:output1 => 48)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]), Dict{Symbol, Any}(:output1 => 96)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[1, 0, 2, 0, 4, 3, 2, 1, 0, 4, 1, 2, 3, 4, 2, 1]), Dict{Symbol, Any}(:output1 => 45)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]), Dict{Symbol, Any}(:output1 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), Dict{Symbol, Any}(:output1 => 4)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]), Dict{Symbol, Any}(:output1 => 6)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0]), Dict{Symbol, Any}(:output1 => 8)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), Dict{Symbol, Any}(:output1 => 5)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), Dict{Symbol, Any}(:output1 => 6)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0]), Dict{Symbol, Any}(:output1 => 5)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]), Dict{Symbol, Any}(:output1 => 7)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), Dict{Symbol, Any}(:output1 => 9)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[8, 0, 0, 0, 0, 6, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0]), Dict{Symbol, Any}(:output1 => 22)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0]), Dict{Symbol, Any}(:output1 => 14)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5]), Dict{Symbol, Any}(:output1 => 40)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9, 9, 8, 7, 6, 6, 7, 8, 9, 9, 8, 7, 6, 5, 5, 6]), Dict{Symbol, Any}(:output1 => 101)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0, 0, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]), Dict{Symbol, Any}(:output1 => 10))])
problem_mastermind = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => "RRRR", :input2 => "RRRR"), Dict{Symbol, Any}(:output1 => 0, :output2 => 4)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "BOYG", :input2 => "GYOB"), Dict{Symbol, Any}(:output1 => 4, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "WYYW", :input2 => "BBOG"), Dict{Symbol, Any}(:output1 => 0, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "GGGB", :input2 => "BGGG"), Dict{Symbol, Any}(:output1 => 2, :output2 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "BBBB", :input2 => "OOOO"), Dict{Symbol, Any}(:output1 => 0, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "BWYG", :input2 => "YWBG"), Dict{Symbol, Any}(:output1 => 2, :output2 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "RGOW", :input2 => "OGWR"), Dict{Symbol, Any}(:output1 => 3, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "YGGB", :input2 => "GYGB"), Dict{Symbol, Any}(:output1 => 2, :output2 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "YGGB", :input2 => "GYBG"), Dict{Symbol, Any}(:output1 => 4, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "GOGY", :input2 => "OGGO"), Dict{Symbol, Any}(:output1 => 2, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "GOGR", :input2 => "GOYR"), Dict{Symbol, Any}(:output1 => 0, :output2 => 3)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "YMOO", :input2 => "YMRG"), Dict{Symbol, Any}(:output1 => 0, :output2 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "GROY", :input2 => "BGOW"), Dict{Symbol, Any}(:output1 => 1, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "GGYG", :input2 => "BYBB"), Dict{Symbol, Any}(:output1 => 1, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "WWWW", :input2 => "BYWR"), Dict{Symbol, Any}(:output1 => 0, :output2 => 1)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "RBYO", :input2 => "BWBB"), Dict{Symbol, Any}(:output1 => 1, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "RBRB", :input2 => "ORBY"), Dict{Symbol, Any}(:output1 => 2, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "WORR", :input2 => "BYOW"), Dict{Symbol, Any}(:output1 => 2, :output2 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "YOWW", :input2 => "YWWR"), Dict{Symbol, Any}(:output1 => 1, :output2 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "BRYB", :input2 => "WOGG"), Dict{Symbol, Any}(:output1 => 0, :output2 => 0))])
problem_middle_character = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => "Q"), Dict{Symbol, Any}(:output1 => "Q")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => " "), Dict{Symbol, Any}(:output1 => " ")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "\$"), Dict{Symbol, Any}(:output1 => "\$")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "E9"), Dict{Symbol, Any}(:output1 => "E9")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => ")b"), Dict{Symbol, Any}(:output1 => ")b")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "DOG"), Dict{Symbol, Any}(:output1 => "O")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "OGD"), Dict{Symbol, Any}(:output1 => "G")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "test"), Dict{Symbol, Any}(:output1 => "es")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "\$3^:1"), Dict{Symbol, Any}(:output1 => "^")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "middle"), Dict{Symbol, Any}(:output1 => "dd")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "      "), Dict{Symbol, Any}(:output1 => "  ")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "hi  ~1"), Dict{Symbol, Any}(:output1 => "  ")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "  hi~1"), Dict{Symbol, Any}(:output1 => "hi")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "hi~1  "), Dict{Symbol, Any}(:output1 => "~1")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "testing"), Dict{Symbol, Any}(:output1 => "t"))])
problem_paired_digits = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => "99"), Dict{Symbol, Any}(:output1 => 9)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "88"), Dict{Symbol, Any}(:output1 => 8)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "77"), Dict{Symbol, Any}(:output1 => 7)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "55"), Dict{Symbol, Any}(:output1 => 5)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "44"), Dict{Symbol, Any}(:output1 => 4)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "22"), Dict{Symbol, Any}(:output1 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "00"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "83"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "38"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "71"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "90"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "32"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "05"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "64"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "42"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "999"), Dict{Symbol, Any}(:output1 => 18)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "555"), Dict{Symbol, Any}(:output1 => 10)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "111"), Dict{Symbol, Any}(:output1 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "844"), Dict{Symbol, Any}(:output1 => 4)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "522"), Dict{Symbol, Any}(:output1 => 2)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "688"), Dict{Symbol, Any}(:output1 => 8)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "233"), Dict{Symbol, Any}(:output1 => 3)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "660"), Dict{Symbol, Any}(:output1 => 6)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "004"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "992"), Dict{Symbol, Any}(:output1 => 9)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "123"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "841"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "808"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "454"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "295"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "99999999999999999999"), Dict{Symbol, Any}(:output1 => 171)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "88888888885555555555"), Dict{Symbol, Any}(:output1 => 117)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "85858585858585858585"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "00000000000000000000"), Dict{Symbol, Any}(:output1 => 0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "11111111111111111111"), Dict{Symbol, Any}(:output1 => 19)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "11223344556677889900"), Dict{Symbol, Any}(:output1 => 45)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "11111888882222266666"), Dict{Symbol, Any}(:output1 => 68)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "91181171161151141131"), Dict{Symbol, Any}(:output1 => 6)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "77777377777377777377"), Dict{Symbol, Any}(:output1 => 91)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "09876543210987654321"), Dict{Symbol, Any}(:output1 => 0))])
problem_shopping_list = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[50.0], :input2 => Any[100.0]), Dict{Symbol, Any}(:output1 => 0.0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[50.0], :input2 => Any[10.0]), Dict{Symbol, Any}(:output1 => 45.0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[20.0, 20.0], :input2 => Any[100.0, 50.0]), Dict{Symbol, Any}(:output1 => 10.0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[20.0, 20.0], :input2 => Any[20.0, 0.0]), Dict{Symbol, Any}(:output1 => 36.0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[10.0, 20.0, 30.0], :input2 => Any[5.0, 10.0, 95.0]), Dict{Symbol, Any}(:output1 => 29.0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[43.14, 18.23, 5.33, 1.35, 39.68], :input2 => Any[100.0, 100.0, 100.0, 100.0, 100.0]), Dict{Symbol, Any}(:output1 => 0.0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73], :input2 => Any[59.19, 91.24, 25.93, 16.18, 24.65, 61.96, 67.91, 43.87, 36.23, 34.3, 96.27, 69.25, 73.78, 0.52, 8.91, 39.18, 79.67, 64.22, 14.15, 52.44]), Dict{Symbol, Any}(:output1 => 59.6)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[25.43, 43.22, 23.42, 42.09, 25.7], :input2 => Any[0.0, 0.0, 0.0, 0.0, 0.0]), Dict{Symbol, Any}(:output1 => 159.86)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01], :input2 => Any[85.77, 43.99, 22.78, 34.14, 34.12, 8.54, 11.03]), Dict{Symbol, Any}(:output1 => 0.05)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[9.99, 9.99, 9.99, 9.99, 9.99, 9.99, 9.99, 9.99, 9.99, 9.99], :input2 => Any[33.65, 33.65, 33.65, 33.65, 33.65, 33.65, 33.65, 33.65, 33.65, 33.65]), Dict{Symbol, Any}(:output1 => 66.28))])
problem_snow_day = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input4 => 0.0, :input1 => 0, :input2 => 0.0, :input3 => 0.0), Dict{Symbol, Any}(:output1 => 0.0)), HerbData.IOExample(Dict{Symbol, Any}(:input4 => 0.15, :input1 => 15, :input2 => 15.0, :input3 => 15.0), Dict{Symbol, Any}(:output1 => 92.5748913763936)), HerbData.IOExample(Dict{Symbol, Any}(:input4 => 0.999, :input1 => 20, :input2 => 19.99, :input3 => 9.999), Dict{Symbol, Any}(:output1 => 10.00900900900901)), HerbData.IOExample(Dict{Symbol, Any}(:input4 => 0.0, :input1 => 20, :input2 => 19.99, :input3 => 9.999), Dict{Symbol, Any}(:output1 => 219.96999999999994)), HerbData.IOExample(Dict{Symbol, Any}(:input4 => 0.0, :input1 => 10, :input2 => 0.0, :input3 => 1.0), Dict{Symbol, Any}(:output1 => 10.0)), HerbData.IOExample(Dict{Symbol, Any}(:input4 => 0.0, :input1 => 8, :input2 => 10.0, :input3 => 2.0), Dict{Symbol, Any}(:output1 => 26.0)), HerbData.IOExample(Dict{Symbol, Any}(:input4 => 0.0, :input1 => 13, :input2 => 0.0, :input3 => 0.0), Dict{Symbol, Any}(:output1 => 0.0)), HerbData.IOExample(Dict{Symbol, Any}(:input4 => 0.0, :input1 => 15, :input2 => 14.56, :input3 => 0.0), Dict{Symbol, Any}(:output1 => 14.56)), HerbData.IOExample(Dict{Symbol, Any}(:input4 => 0.05, :input1 => 16, :input2 => 18.19, :input3 => 0.0), Dict{Symbol, Any}(:output1 => 8.005904102775611)), HerbData.IOExample(Dict{Symbol, Any}(:input4 => 0.3, :input1 => 8, :input2 => 11.3, :input3 => 0.5), Dict{Symbol, Any}(:output1 => 2.2220091629999996)), HerbData.IOExample(Dict{Symbol, Any}(:input4 => 0.05, :input1 => 5, :input2 => 1.3, :input3 => 1.5), Dict{Symbol, Any}(:output1 => 7.792487093749998)), HerbData.IOExample(Dict{Symbol, Any}(:input4 => 0.0, :input1 => 10, :input2 => 0.0, :input3 => 2.0), Dict{Symbol, Any}(:output1 => 20.0))])
problem_solve_boolean = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => "t"), Dict{Symbol, Any}(:output1 => true)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "f"), Dict{Symbol, Any}(:output1 => false)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "f&f"), Dict{Symbol, Any}(:output1 => false)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "f&t"), Dict{Symbol, Any}(:output1 => false)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "t&f"), Dict{Symbol, Any}(:output1 => false)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "t&t"), Dict{Symbol, Any}(:output1 => true)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "f|f"), Dict{Symbol, Any}(:output1 => false)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "f|t"), Dict{Symbol, Any}(:output1 => true)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "t|f"), Dict{Symbol, Any}(:output1 => true)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "t|t"), Dict{Symbol, Any}(:output1 => true))])
problem_spin_words = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => ""), Dict{Symbol, Any}(:output1 => "")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "a"), Dict{Symbol, Any}(:output1 => "a")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "this is a test"), Dict{Symbol, Any}(:output1 => "this is a test")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "this is another test"), Dict{Symbol, Any}(:output1 => "this is rehtona test")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "hi"), Dict{Symbol, Any}(:output1 => "hi")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "cat"), Dict{Symbol, Any}(:output1 => "cat")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "walk"), Dict{Symbol, Any}(:output1 => "walk")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "jazz"), Dict{Symbol, Any}(:output1 => "jazz")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "llama"), Dict{Symbol, Any}(:output1 => "amall")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "heart"), Dict{Symbol, Any}(:output1 => "traeh")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "pantry"), Dict{Symbol, Any}(:output1 => "yrtnap")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "helpful"), Dict{Symbol, Any}(:output1 => "lufpleh")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "disrespectful"), Dict{Symbol, Any}(:output1 => "luftcepsersid")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "stop spinning these"), Dict{Symbol, Any}(:output1 => "stop gninnips eseht")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "couple longer words"), Dict{Symbol, Any}(:output1 => "elpuoc regnol sdrow")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "oneloongworrrrrrrrrd"), Dict{Symbol, Any}(:output1 => "drrrrrrrrrowgnooleno")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "a b c d e f g h i j"), Dict{Symbol, Any}(:output1 => "a b c d e f g h i j")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "ab cd ef gh ij kl mn"), Dict{Symbol, Any}(:output1 => "ab cd ef gh ij kl mn")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "abc def gef hij klm"), Dict{Symbol, Any}(:output1 => "abc def gef hij klm")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "word less than five"), Dict{Symbol, Any}(:output1 => "word less than five")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "abcde fghij klmno"), Dict{Symbol, Any}(:output1 => "edcba jihgf onmlk")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "abcdef ghijkl mnopqr"), Dict{Symbol, Any}(:output1 => "fedcba lkjihg rqponm")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "abcdefg hijklmn"), Dict{Symbol, Any}(:output1 => "gfedcba nmlkjih")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "abcdefgh ijklmnop"), Dict{Symbol, Any}(:output1 => "hgfedcba ponmlkji")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "abcdefghi jklmnopqrs"), Dict{Symbol, Any}(:output1 => "ihgfedcba srqponmlkj")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "on pineapple island"), Dict{Symbol, Any}(:output1 => "on elppaenip dnalsi")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "maybe this isgood"), Dict{Symbol, Any}(:output1 => "ebyam this doogsi")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "racecar palindrome"), Dict{Symbol, Any}(:output1 => "racecar emordnilap")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "ella is a short pali"), Dict{Symbol, Any}(:output1 => "ella is a trohs pali")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "science hi"), Dict{Symbol, Any}(:output1 => "ecneics hi"))])
problem_square_digits = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => 0), Dict{Symbol, Any}(:output1 => "0")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 1), Dict{Symbol, Any}(:output1 => "1")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 2), Dict{Symbol, Any}(:output1 => "4")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 3), Dict{Symbol, Any}(:output1 => "9")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 4), Dict{Symbol, Any}(:output1 => "16")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 5), Dict{Symbol, Any}(:output1 => "25")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 7), Dict{Symbol, Any}(:output1 => "49")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 9), Dict{Symbol, Any}(:output1 => "81")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 10), Dict{Symbol, Any}(:output1 => "10")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 12), Dict{Symbol, Any}(:output1 => "14")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 16), Dict{Symbol, Any}(:output1 => "136")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 24), Dict{Symbol, Any}(:output1 => "416")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 35), Dict{Symbol, Any}(:output1 => "925")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 46), Dict{Symbol, Any}(:output1 => "1636")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 57), Dict{Symbol, Any}(:output1 => "2549")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 68), Dict{Symbol, Any}(:output1 => "3664")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 79), Dict{Symbol, Any}(:output1 => "4981")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 80), Dict{Symbol, Any}(:output1 => "640")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 92), Dict{Symbol, Any}(:output1 => "814")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 98), Dict{Symbol, Any}(:output1 => "8164")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 100), Dict{Symbol, Any}(:output1 => "100")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 185), Dict{Symbol, Any}(:output1 => "16425")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 231), Dict{Symbol, Any}(:output1 => "491")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 372), Dict{Symbol, Any}(:output1 => "9494")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 408), Dict{Symbol, Any}(:output1 => "16064")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 794), Dict{Symbol, Any}(:output1 => "498116")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 321012), Dict{Symbol, Any}(:output1 => "941014")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 987654), Dict{Symbol, Any}(:output1 => "816449362516")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 999999), Dict{Symbol, Any}(:output1 => "818181818181")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => 1000000), Dict{Symbol, Any}(:output1 => "1000000"))])
problem_substitution_cipher = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => "", :input2 => "", :input3 => ""), Dict{Symbol, Any}(:output1 => "")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "a", :input2 => "a", :input3 => "a"), Dict{Symbol, Any}(:output1 => "a")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "j", :input2 => "h", :input3 => "j"), Dict{Symbol, Any}(:output1 => "h")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "a", :input2 => "z", :input3 => "a"), Dict{Symbol, Any}(:output1 => "z")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "e", :input2 => "l", :input3 => "eeeeeeeeee"), Dict{Symbol, Any}(:output1 => "llllllllll")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "h", :input2 => "d", :input3 => "hhhhhhhhhhhhhhhhhhhh"), Dict{Symbol, Any}(:output1 => "dddddddddddddddddddd")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "o", :input2 => "z", :input3 => "oooooooooooooooooooooooooo"), Dict{Symbol, Any}(:output1 => "zzzzzzzzzzzzzzzzzzzzzzzzzz")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "abcdefghijklmnopqrstuvwxyz", :input2 => "zyxwvutsrqponmlkjihgfedcba", :input3 => "bvafvuqgjkkbeccipwdfqttgzl"), Dict{Symbol, Any}(:output1 => "yezuefjtqppyvxxrkdwujggtao")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "abcdefghijklmnopqrstuvwxyz", :input2 => "cdqutzayxshgfenjowrkvmpbil", :input3 => "thequickbrownfxjmpsvlazydg"), Dict{Symbol, Any}(:output1 => "kytovxqhdwnpezbsfjrmgcliua")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "otghvwmkclidzryxsfqeapnjbu", :input2 => "alpebhxmnrcyiosvtgzjwuqdfk", :input3 => "aaabbbccc"), Dict{Symbol, Any}(:output1 => "wwwfffnnn"))])
problem_twitter = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => ""), Dict{Symbol, Any}(:output1 => "You didn't type anything")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "1"), Dict{Symbol, Any}(:output1 => "Your tweet has 1 characters")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "max length tweet that just contains letters and spaces even SOME CAPITAL LETTERS just to MAKE it INTERESTING now repeeeeeeeeeEEEEEEEeeeat it"), Dict{Symbol, Any}(:output1 => "Your tweet has 140 characters")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "40172875*&(&(%^^*!@&#()!@&^(*\$787031264123984721-43214876*%^#!(@^\$_!@^%#\$(!#@%\$(01234~~``)"), Dict{Symbol, Any}(:output1 => "Your tweet has 90 characters")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "Tooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooolong1"), Dict{Symbol, Any}(:output1 => "Too many characters")), HerbData.IOExample(Dict{Symbol, Any}(:input1 => "(@)&#N)&#@!M#&17t8023n217830123bn6 BN23780BC3879N01nc3n473N962n9768062BC3718N396b21v8365n9072B638705b097B6*&b%&%b(*B5*&%b7%(*vb&V8%v&(85V80%0857(%v97%(*&%v87c%&*c ()0*^c%08v^mN098)vf%9P8V6TfB97b99870)"), Dict{Symbol, Any}(:output1 => "Too many characters"))])
problem_vector_distance = HerbData.Problem(HerbData.Example[HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[-100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0], :input2 => Any[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]), Dict{Symbol, Any}(:output1 => 894.4271909999159)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32], :input2 => Any[5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32]), Dict{Symbol, Any}(:output1 => 0.0)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[42.91283], :input2 => Any[-22.134]), Dict{Symbol, Any}(:output1 => 65.04683)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[1.5, 2.87, 3.3324, 4.654, 5.123, 6.867, 7.5324, 8.534, 9.4132, 10.43], :input2 => Any[-1.534, -2.543, -3.423, -4.13427, -5.714, -6.713, -7.4328, -8.43, -9.73, -10.752]), Dict{Symbol, Any}(:output1 => 42.309638973086265)), HerbData.IOExample(Dict{Symbol, Any}(:input1 => Any[0.4378, 0.634, 0.1234, 0.764, 0.243], :input2 => Any[-0.254, -0.1223, -0.19582, -0.8971, -0.8743]), Dict{Symbol, Any}(:output1 => 2.2715833329200144))])
