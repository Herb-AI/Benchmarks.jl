module gcd
grammar_gcd = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 1)[1]), 1, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 4)[1]), 4, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 400000)[1]), 400000, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 54)[1]), 54, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 24)[1]), 24, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 6)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 4200)[1]), 4200, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 3528)[1]), 3528, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 168)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 820000)[1]), 820000, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 63550)[1]), 63550, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2050)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 123456)[1]), 123456, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 654321)[1]), 654321, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
end
module snow_day
grammar_snow_day = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
end
    input4 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input4, 0.0)[1]), 0.0, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 0)[1]), 0, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 0.0)[1]), 0.0, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 0.0)[1]), 0.0, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.0)[1]), Float64, x)
    input4 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input4, 0.15)[1]), 0.15, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 15)[1]), 15, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 15.0)[1]), 15.0, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 15.0)[1]), 15.0, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 92.5748913763936)[1]), Float64, x)
    input4 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input4, 0.999)[1]), 0.999, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 20)[1]), 20, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 19.99)[1]), 19.99, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 9.999)[1]), 9.999, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 10.00900900900901)[1]), Float64, x)
    input4 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input4, 0.0)[1]), 0.0, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 20)[1]), 20, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 19.99)[1]), 19.99, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 9.999)[1]), 9.999, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 219.96999999999994)[1]), Float64, x)
    input4 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input4, 0.0)[1]), 0.0, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 10)[1]), 10, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 0.0)[1]), 0.0, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 1.0)[1]), 1.0, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 10.0)[1]), Float64, x)
    input4 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input4, 0.0)[1]), 0.0, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 8)[1]), 8, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 10.0)[1]), 10.0, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 2.0)[1]), 2.0, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 26.0)[1]), Float64, x)
    input4 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input4, 0.0)[1]), 0.0, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 13)[1]), 13, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 0.0)[1]), 0.0, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 0.0)[1]), 0.0, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.0)[1]), Float64, x)
    input4 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input4, 0.0)[1]), 0.0, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 15)[1]), 15, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 14.56)[1]), 14.56, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 0.0)[1]), 0.0, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 14.56)[1]), Float64, x)
    input4 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input4, 0.05)[1]), 0.05, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 16)[1]), 16, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 18.19)[1]), 18.19, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 0.0)[1]), 0.0, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 8.005904102775611)[1]), Float64, x)
    input4 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input4, 0.3)[1]), 0.3, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 8)[1]), 8, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 11.3)[1]), 11.3, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 0.5)[1]), 0.5, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2.2220091629999996)[1]), Float64, x)
    input4 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input4, 0.05)[1]), 0.05, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 5)[1]), 5, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 1.3)[1]), 1.3, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 1.5)[1]), 1.5, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 7.792487093749998)[1]), Float64, x)
    input4 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input4, 0.0)[1]), 0.0, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 10)[1]), 10, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 0.0)[1]), 0.0, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 2.0)[1]), 2.0, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 20.0)[1]), Float64, x)
end
module paired_digits
grammar_paired_digits = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "99")[1]), 99, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 9)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "88")[1]), 88, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 8)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "77")[1]), 77, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 7)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "55")[1]), 55, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 5)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "44")[1]), 44, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "22")[1]), 22, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "00")[1]), 00, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "83")[1]), 83, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "38")[1]), 38, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "71")[1]), 71, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "90")[1]), 90, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "32")[1]), 32, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "05")[1]), 05, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "64")[1]), 64, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "42")[1]), 42, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "999")[1]), 999, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 18)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "555")[1]), 555, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 10)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "111")[1]), 111, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "844")[1]), 844, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "522")[1]), 522, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "688")[1]), 688, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 8)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "233")[1]), 233, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "660")[1]), 660, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 6)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "004")[1]), 004, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "992")[1]), 992, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 9)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "123")[1]), 123, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "841")[1]), 841, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "808")[1]), 808, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "454")[1]), 454, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "295")[1]), 295, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "99999999999999999999")[1]), 99999999999999999999, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 171)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "88888888885555555555")[1]), 88888888885555555555, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 117)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "85858585858585858585")[1]), 85858585858585858585, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "00000000000000000000")[1]), 00000000000000000000, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "11111111111111111111")[1]), 11111111111111111111, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 19)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "11223344556677889900")[1]), 11223344556677889900, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 45)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "11111888882222266666")[1]), 11111888882222266666, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 68)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "91181171161151141131")[1]), 91181171161151141131, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 6)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "77777377777377777377")[1]), 77777377777377777377, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 91)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "09876543210987654321")[1]), 09876543210987654321, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
end
module spin_words
grammar_spin_words = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "")[1]), , x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "a")[1]), a, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "a")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "this is a test")[1]), this is a test, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "this is a test")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "this is another test")[1]), this is another test, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "this is rehtona test")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "hi")[1]), hi, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "hi")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "cat")[1]), cat, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "cat")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "walk")[1]), walk, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "walk")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "jazz")[1]), jazz, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "jazz")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "llama")[1]), llama, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "amall")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "heart")[1]), heart, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "traeh")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "pantry")[1]), pantry, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "yrtnap")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "helpful")[1]), helpful, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "lufpleh")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "disrespectful")[1]), disrespectful, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "luftcepsersid")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "stop spinning these")[1]), stop spinning these, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "stop gninnips eseht")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "couple longer words")[1]), couple longer words, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "elpuoc regnol sdrow")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "oneloongworrrrrrrrrd")[1]), oneloongworrrrrrrrrd, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "drrrrrrrrrowgnooleno")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "a b c d e f g h i j")[1]), a b c d e f g h i j, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "a b c d e f g h i j")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "ab cd ef gh ij kl mn")[1]), ab cd ef gh ij kl mn, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "ab cd ef gh ij kl mn")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "abc def gef hij klm")[1]), abc def gef hij klm, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "abc def gef hij klm")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "word less than five")[1]), word less than five, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "word less than five")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "abcde fghij klmno")[1]), abcde fghij klmno, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "edcba jihgf onmlk")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "abcdef ghijkl mnopqr")[1]), abcdef ghijkl mnopqr, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "fedcba lkjihg rqponm")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "abcdefg hijklmn")[1]), abcdefg hijklmn, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "gfedcba nmlkjih")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "abcdefgh ijklmnop")[1]), abcdefgh ijklmnop, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "hgfedcba ponmlkji")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "abcdefghi jklmnopqrs")[1]), abcdefghi jklmnopqrs, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "ihgfedcba srqponmlkj")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "on pineapple island")[1]), on pineapple island, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "on elppaenip dnalsi")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "maybe this isgood")[1]), maybe this isgood, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "ebyam this doogsi")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "racecar palindrome")[1]), racecar palindrome, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "racecar emordnilap")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "ella is a short pali")[1]), ella is a short pali, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "ella is a trohs pali")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "science hi")[1]), science hi, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "ecneics hi")[1]), String, x)
end
module fuel_cost
grammar_fuel_cost = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[6])[1]), Any[6], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[7])[1]), Any[7], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[8])[1]), Any[8], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9])[1]), Any[9], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[10])[1]), Any[10], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[11])[1]), Any[11], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[12])[1]), Any[12], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[13])[1]), Any[13], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[14])[1]), Any[14], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[15])[1]), Any[15], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[16])[1]), Any[16], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[17])[1]), Any[17], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9998])[1]), Any[9998], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3330)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9999])[1]), Any[9999], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3331)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[10000])[1]), Any[10000], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3331)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[6, 6])[1]), Any[6, 6], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9, 14])[1]), Any[9, 14], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9, 15])[1]), Any[9, 15], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[14, 9])[1]), Any[14, 9], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[15, 9])[1]), Any[15, 9], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[32, 32])[1]), Any[32, 32], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 16)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[33, 33])[1]), Any[33, 33], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 18)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[10000, 9])[1]), Any[10000, 9], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3332)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9, 10000])[1]), Any[9, 10000], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3332)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[10000, 10000])[1]), Any[10000, 10000], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 6662)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])[1]), Any[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])[1]), Any[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])[1]), Any[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])[1]), Any[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 20)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10])[1]), Any[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 20)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11])[1]), Any[11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 20)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])[1]), Any[12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 40)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13])[1]), Any[13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 40)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998])[1]), Any[9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 66600)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999])[1]), Any[9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 66620)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000])[1]), Any[10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 66620)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])[1]), Any[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 15)[1]), Int64, x)
end
module vector_distance
grammar_vector_distance = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0])[1]), Any[-100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0, -100.0], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0])[1]), Any[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 894.4271909999159)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32])[1]), Any[5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32])[1]), Any[5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32, 5.32], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.0)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[42.91283])[1]), Any[42.91283], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[-22.134])[1]), Any[-22.134], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 65.04683)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[1.5, 2.87, 3.3324, 4.654, 5.123, 6.867, 7.5324, 8.534, 9.4132, 10.43])[1]), Any[1.5, 2.87, 3.3324, 4.654, 5.123, 6.867, 7.5324, 8.534, 9.4132, 10.43], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[-1.534, -2.543, -3.423, -4.13427, -5.714, -6.713, -7.4328, -8.43, -9.73, -10.752])[1]), Any[-1.534, -2.543, -3.423, -4.13427, -5.714, -6.713, -7.4328, -8.43, -9.73, -10.752], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 42.309638973086265)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0.4378, 0.634, 0.1234, 0.764, 0.243])[1]), Any[0.4378, 0.634, 0.1234, 0.764, 0.243], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[-0.254, -0.1223, -0.19582, -0.8971, -0.8743])[1]), Any[-0.254, -0.1223, -0.19582, -0.8971, -0.8743], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2.2715833329200144)[1]), Float64, x)
end
module coin_sums
grammar_coin_sums = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 2)[1]), 2, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 3)[1]), 3, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 4)[1]), 4, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 5)[1]), 5, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 6)[1]), 6, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 7)[1]), 7, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 8)[1]), 8, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 9)[1]), 9, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 10)[1]), 10, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 11)[1]), 11, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 12)[1]), 12, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 13)[1]), 13, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 14)[1]), 14, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 15)[1]), 15, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 16)[1]), 16, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 17)[1]), 17, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 18)[1]), 18, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 19)[1]), 19, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 20)[1]), 20, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 2)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 21)[1]), 21, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 2)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 22)[1]), 22, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 2)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 23)[1]), 23, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 2)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 24)[1]), 24, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 0)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 2)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 25)[1]), 25, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 1)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 26)[1]), 26, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 1)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 27)[1]), 27, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 1)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 28)[1]), 28, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 1)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 29)[1]), 29, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 1)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 30)[1]), 30, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 1)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 35)[1]), 35, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 1)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 41)[1]), 41, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 1)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 109)[1]), 109, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 4)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 10000)[1]), 10000, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output4 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output4, 400)[1]), Int64, x)
    output3 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output3, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
end
module square_digits
grammar_square_digits = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 0)[1]), 0, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "0")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "1")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 2)[1]), 2, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "4")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 3)[1]), 3, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "9")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 4)[1]), 4, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "16")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 5)[1]), 5, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "25")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 7)[1]), 7, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "49")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 9)[1]), 9, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "81")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 10)[1]), 10, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "10")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 12)[1]), 12, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "14")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 16)[1]), 16, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "136")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 24)[1]), 24, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "416")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 35)[1]), 35, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "925")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 46)[1]), 46, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "1636")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 57)[1]), 57, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "2549")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 68)[1]), 68, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "3664")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 79)[1]), 79, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "4981")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 80)[1]), 80, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "640")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 92)[1]), 92, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "814")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 98)[1]), 98, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "8164")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 100)[1]), 100, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "100")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 185)[1]), 185, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "16425")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 231)[1]), 231, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "491")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 372)[1]), 372, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "9494")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 408)[1]), 408, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "16064")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 794)[1]), 794, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "498116")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 321012)[1]), 321012, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "941014")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 987654)[1]), 987654, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "816449362516")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 999999)[1]), 999999, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "818181818181")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 1000000)[1]), 1000000, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "1000000")[1]), String, x)
end
module bouncing_balls
grammar_bouncing_balls = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 1.001)[1]), 1.001, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 1.0)[1]), 1.0, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2.001)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 100.0)[1]), 100.0, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 99.999)[1]), 99.999, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 20)[1]), 20, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3999.599534511501)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 100.0)[1]), 100.0, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 1.0)[1]), 1.0, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 20)[1]), 20, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 102.02020201974588)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 15.319)[1]), 15.319, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 5.635)[1]), 5.635, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 20.954)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 2.176)[1]), 2.176, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 1.787)[1]), 1.787, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3.963)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 17.165)[1]), 17.165, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 5.627)[1]), 5.627, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 22.791999999999998)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 60.567)[1]), 60.567, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 37.053)[1]), 37.053, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 97.62)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 62.145)[1]), 62.145, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 62.058)[1]), 62.058, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 124.203)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 36.311)[1]), 36.311, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 33.399)[1]), 33.399, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 69.71000000000001)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 46.821)[1]), 46.821, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 8.151)[1]), 8.151, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 54.971999999999994)[1]), Float64, x)
end
module solve_boolean
grammar_solve_boolean = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "t")[1]), t, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, true)[1]), Bool, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "f")[1]), f, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, false)[1]), Bool, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "f&f")[1]), f&f, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, false)[1]), Bool, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "f&t")[1]), f&t, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, false)[1]), Bool, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "t&f")[1]), t&f, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, false)[1]), Bool, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "t&t")[1]), t&t, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, true)[1]), Bool, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "f|f")[1]), f|f, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, false)[1]), Bool, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "f|t")[1]), f|t, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, true)[1]), Bool, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "t|f")[1]), t|f, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, true)[1]), Bool, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "t|t")[1]), t|t, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, true)[1]), Bool, x)
end
module middle_character
grammar_middle_character = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "Q")[1]), Q, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Q")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, " ")[1]),  , x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, " ")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "\$")[1]), $, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "\$")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "E9")[1]), E9, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "E9")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, ")b")[1]), )b, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, ")b")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "DOG")[1]), DOG, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "O")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "OGD")[1]), OGD, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "G")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "test")[1]), test, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "es")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "\$3^:1")[1]), $3^:1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "^")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "middle")[1]), middle, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "dd")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "      ")[1]),       , x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "  ")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "hi  ~1")[1]), hi  ~1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "  ")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "  hi~1")[1]),   hi~1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "hi")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "hi~1  ")[1]), hi~1  , x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "~1")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "testing")[1]), testing, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "t")[1]), String, x)
end
module twitter
grammar_twitter = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "")[1]), , x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "You didn't type anything")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "1")[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Your tweet has 1 characters")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "max length tweet that just contains letters and spaces even SOME CAPITAL LETTERS just to MAKE it INTERESTING now repeeeeeeeeeEEEEEEEeeeat it")[1]), max length tweet that just contains letters and spaces even SOME CAPITAL LETTERS just to MAKE it INTERESTING now repeeeeeeeeeEEEEEEEeeeat it, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Your tweet has 140 characters")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "40172875*&(&(%^^*!@&#()!@&^(*\$787031264123984721-43214876*%^#!(@^\$_!@^%#\$(!#@%\$(01234~~``)")[1]), 40172875*&(&(%^^*!@&#()!@&^(*$787031264123984721-43214876*%^#!(@^$_!@^%#$(!#@%$(01234~~``), x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Your tweet has 90 characters")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "Tooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooolong1")[1]), Tooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooolong1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Too many characters")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "(@)&#N)&#@!M#&17t8023n217830123bn6 BN23780BC3879N01nc3n473N962n9768062BC3718N396b21v8365n9072B638705b097B6*&b%&%b(*B5*&%b7%(*vb&V8%v&(85V80%0857(%v97%(*&%v87c%&*c()0*^c%08v^mN098)vf%9P8V6TfB97b99870)")[1]), (@)&#N)&#@!M#&17t8023n217830123bn6 BN23780BC3879N01nc3n473N962n9768062BC3718N396b21v8365n9072B638705b097B6*&b%&%b(*B5*&%b7%(*vb&V8%v&(85V80%0857(%v97%(*&%v87c%&*c()0*^c%08v^mN098)vf%9P8V6TfB97b99870), x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Too many characters")[1]), String, x)
end
module find_pair
grammar_find_pair = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[5, 7])[1]), Any[5, 7], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 12)[1]), 12, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 5)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 7)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[2500, 6352])[1]), Any[2500, 6352], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 8852)[1]), 8852, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2500)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 6352)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-14, 5])[1]), Any[-14, 5], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, -9)[1]), -9, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, -14)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 5)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[40, -19])[1]), Any[40, -19], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 21)[1]), 21, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 40)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, -19)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-4, 4])[1]), Any[-4, 4], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 0)[1]), 0, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, -4)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 4)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-5, -20])[1]), Any[-5, -20], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, -25)[1]), -25, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, -5)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, -20)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-7831, -3001])[1]), Any[-7831, -3001], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, -10832)[1]), -10832, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, -7831)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, -3001)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[10000, -10000])[1]), Any[10000, -10000], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 0)[1]), 0, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 10000)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, -10000)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[8310, -8320])[1]), Any[8310, -8320], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, -10)[1]), -10, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 8310)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, -8320)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 1234])[1]), Any[0, 1234], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 1234)[1]), 1234, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1234)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[1, 3, 5])[1]), Any[1, 3, 5], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 4)[1]), 4, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 3)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[1, 3, 5])[1]), Any[1, 3, 5], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 6)[1]), 6, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 5)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[1, 3, 5])[1]), Any[1, 3, 5], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 8)[1]), 8, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 5)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-1, 0, 1])[1]), Any[-1, 0, 1], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 0)[1]), 0, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, -1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-1, 0, 1])[1]), Any[-1, 0, 1], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-1, 0, 1])[1]), Any[-1, 0, 1], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, -1)[1]), -1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, -1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[14, -35, 78])[1]), Any[14, -35, 78], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, -21)[1]), -21, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 14)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, -35)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[14, -35, 78])[1]), Any[14, -35, 78], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 92)[1]), 92, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 14)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 78)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[14, -35, 78])[1]), Any[14, -35, 78], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 43)[1]), 43, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, -35)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 78)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9492, -3791, -7317])[1]), Any[9492, -3791, -7317], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 5701)[1]), 5701, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 9492)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, -3791)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9492, -3791, -7317])[1]), Any[9492, -3791, -7317], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 2175)[1]), 2175, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 9492)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, -7317)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9492, -3791, -7317])[1]), Any[9492, -3791, -7317], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, -11108)[1]), -11108, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, -3791)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, -7317)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[237, 410, -777])[1]), Any[237, 410, -777], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 647)[1]), 647, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 237)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 410)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[237, 410, -777])[1]), Any[237, 410, -777], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, -540)[1]), -540, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 237)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, -777)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[237, 410, -777])[1]), Any[237, 410, -777], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, -367)[1]), -367, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 410)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, -777)[1]), Int64, x)
end
module dice_game
grammar_dice_game = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 1)[1]), 1, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 2)[1]), 2, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.0)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 2)[1]), 2, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.5)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 99)[1]), 99, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 100)[1]), 100, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.49)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 100)[1]), 100, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 99)[1]), 99, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.5)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 1)[1]), 1, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 100)[1]), 100, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.0)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 100)[1]), 100, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.99)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 3)[1]), 3, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 4)[1]), 4, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.25)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 4)[1]), 4, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 3)[1]), 3, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.5)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 4)[1]), 4, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 6)[1]), 6, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.25)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 6)[1]), 6, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 4)[1]), 4, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.5833333)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 49)[1]), 49, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 50)[1]), 50, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.48)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 50)[1]), 50, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 49)[1]), 49, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.5)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 1)[1]), 1, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.0)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 50)[1]), 50, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 50)[1]), 50, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.49)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 100)[1]), 100, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, 100)[1]), 100, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.495)[1]), Float64, x)
end
module mastermind
grammar_mastermind = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "RRRR")[1]), RRRR, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "RRRR")[1]), RRRR, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 4)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "BOYG")[1]), BOYG, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "GYOB")[1]), GYOB, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "WYYW")[1]), WYYW, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "BBOG")[1]), BBOG, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "GGGB")[1]), GGGB, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "BGGG")[1]), BGGG, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "BBBB")[1]), BBBB, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "OOOO")[1]), OOOO, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "BWYG")[1]), BWYG, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "YWBG")[1]), YWBG, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "RGOW")[1]), RGOW, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "OGWR")[1]), OGWR, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 3)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "YGGB")[1]), YGGB, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "GYGB")[1]), GYGB, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "YGGB")[1]), YGGB, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "GYBG")[1]), GYBG, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "GOGY")[1]), GOGY, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "OGGO")[1]), OGGO, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "GOGR")[1]), GOGR, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "GOYR")[1]), GOYR, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 3)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "YMOO")[1]), YMOO, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "YMRG")[1]), YMRG, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "GROY")[1]), GROY, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "BGOW")[1]), BGOW, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "GGYG")[1]), GGYG, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "BYBB")[1]), BYBB, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "WWWW")[1]), WWWW, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "BYWR")[1]), BYWR, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "RBYO")[1]), RBYO, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "BWBB")[1]), BWBB, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "RBRB")[1]), RBRB, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "ORBY")[1]), ORBY, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "WORR")[1]), WORR, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "BYOW")[1]), BYOW, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "YOWW")[1]), YOWW, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "YWWR")[1]), YWWR, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "BRYB")[1]), BRYB, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "WOGG")[1]), WOGG, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, 0)[1]), Int64, x)
end
module camel_case
grammar_camel_case = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "")[1]), , x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "nospaceordash")[1]), nospaceordash, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "nospaceordash")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "two-words")[1]), two-words, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "twoWords")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "two words")[1]), two words, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "two words")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "all separate words")[1]), all separate words, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "all separate words")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "all-one-word-dashed")[1]), all-one-word-dashed, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "allOneWordDashed")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "loooooong-wooooords")[1]), loooooong-wooooords, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "loooooongWooooords")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "loooooong wooooords")[1]), loooooong wooooords, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "loooooong wooooords")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "a-b-c-d-e-f-g-h-i-j")[1]), a-b-c-d-e-f-g-h-i-j, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "aBCDEFGHIJ")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "a b c d e f g h i j")[1]), a b c d e f g h i j, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "a b c d e f g h i j")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "saaaaaaaaaaaaaaaaame")[1]), saaaaaaaaaaaaaaaaame, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "saaaaaaaaaaaaaaaaame")[1]), String, x)
end
module bowling
grammar_bowling = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "--------------------")[1]), --------------------, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "XXXXXXXXXXXX")[1]), XXXXXXXXXXXX, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 300)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "5/5/5/5/5/5/5/5/5/5/5")[1]), 5/5/5/5/5/5/5/5/5/5/5, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 150)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "7115XXX548/279-X53")[1]), 7115XXX548/279-X53, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 145)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "532/4362X179-41447/5")[1]), 532/4362X179-41447/5, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 100)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "24815361356212813581")[1]), 24815361356212813581, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 75)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "------X------------")[1]), ------X------------, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 10)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "----------3/--------")[1]), ----------3/--------, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 10)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "--------------1-----")[1]), --------------1-----, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "11111111111111111111")[1]), 11111111111111111111, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 20)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "111111X111111111111")[1]), 111111X111111111111, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 30)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "-4-/-2-/-7-6-/-3-/-4")[1]), -4-/-2-/-7-6-/-3-/-4, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 66)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "-/-/-/-/-/-/-/-/-/-/-")[1]), -/-/-/-/-/-/-/-/-/-/-, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 100)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "X52X52X52X52X52")[1]), X52X52X52X52X52, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 120)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "XXXXX----------")[1]), XXXXX----------, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 120)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "XXXXX81XXX-1")[1]), XXXXX81XXX-1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 208)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "XXXX9/XXX2/XXX")[1]), XXXX9/XXX2/XXX, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 251)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "XXXXXXXXXXX9")[1]), XXXXXXXXXXX9, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 299)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "--X34--------------")[1]), --X34--------------, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 24)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "------3/61----------")[1]), ------3/61----------, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 23)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "----------XX7-----")[1]), ----------XX7-----, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 51)[1]), Int64, x)
end
module basement
grammar_basement = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-1])[1]), Any[-1], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-100])[1]), Any[-100], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-1, 100])[1]), Any[-1, 100], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-95, 100])[1]), Any[-95, 100], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-30, 5])[1]), Any[-30, 5], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-50, 50])[1]), Any[-50, 50], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, -1])[1]), Any[0, -1], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[1, -2])[1]), Any[1, -2], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[3, -97])[1]), Any[3, -97], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[99, -100])[1]), Any[99, -100], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[1, -1, -1])[1]), Any[1, -1, -1], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[1, -2, -1])[1]), Any[1, -2, -1], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, -1, -1])[1]), Any[0, -1, -1], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 0, -1])[1]), Any[0, 0, -1], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[2, -2, -1])[1]), Any[2, -2, -1], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[5, -6, -5])[1]), Any[5, -6, -5], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[5, -5, -5])[1]), Any[5, -5, -5], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[100, -100, -100])[1]), Any[100, -100, -100], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-100, -100, -100])[1]), Any[-100, -100, -100], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-1, 100, 99])[1]), Any[-1, 100, 99], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10])[1]), Any[-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[-1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])[1]), Any[-1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[5, -10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])[1]), Any[5, -10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, -99])[1]), Any[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, -99], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 19)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 10])[1]), Any[1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 10], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 18)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[93, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5])[1]), Any[93, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 19)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[99, -10, -9, -12, -10, -5, -12, -3, -10, -9, -9, -10, -12, -11, -12, -9, -10, -12, -11, -10])[1]), Any[99, -10, -9, -12, -10, -5, -12, -3, -10, -9, -9, -10, -12, -11, -12, -9, -10, -12, -11, -10], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 12)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[1, 1, 1, 1, 2, 2, 2, 2, -1, -1, -1, -2, -3, -4, -5, -1, 1, 2, 3, 4])[1]), Any[1, 1, 1, 1, 2, 2, 2, 2, -1, -1, -1, -2, -3, -4, -5, -1, 1, 2, 3, 4], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 14)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1])[1]), Any[0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1])[1]), Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 10)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1])[1]), Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 19)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[50, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30])[1]), Any[50, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 10)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[50, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30])[1]), Any[50, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 19)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60])[1]), Any[50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 19)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[20, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30])[1]), Any[20, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 1)[1]), Int64, x)
end
module cut_vector
grammar_cut_vector = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0])[1]), Any[0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0])[1]), Vector{Any}, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, Any[])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[10])[1]), Any[10], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[10])[1]), Vector{Any}, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, Any[])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[100])[1]), Any[100], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[100])[1]), Vector{Any}, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, Any[])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[1000])[1]), Any[1000], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[1000])[1]), Vector{Any}, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, Any[])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[10000])[1]), Any[10000], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[10000])[1]), Vector{Any}, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, Any[])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[2, 129])[1]), Any[2, 129], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[2])[1]), Vector{Any}, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, Any[129])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 40])[1]), Any[0, 40], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0])[1]), Vector{Any}, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, Any[40])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9999, 74])[1]), Any[9999, 74], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[9999])[1]), Vector{Any}, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, Any[74])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9879, 9950])[1]), Any[9879, 9950], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[9879])[1]), Vector{Any}, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, Any[9950])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9225, 9994])[1]), Any[9225, 9994], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[9225])[1]), Vector{Any}, x)
    output2 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output2, Any[9994])[1]), Vector{Any}, x)
end
module leaders
grammar_leaders = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[])[1]), Any[], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0])[1]), Any[0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[451])[1]), Any[451], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[451])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[1000, 0])[1]), Any[1000, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[1000, 0])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 1000])[1]), Any[0, 1000], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[1000])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[20, 137, 20])[1]), Any[20, 137, 20], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[137, 20])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[47, 87, 43, 44])[1]), Any[47, 87, 43, 44], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[87, 44])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[5, 5, 5, 5, 5, 5, 5])[1]), Any[5, 5, 5, 5, 5, 5, 5], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[5, 5, 5, 5, 5, 5, 5])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])[1]), Any[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])[1]), Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[10])[1]), Vector{Any}, x)
end
module fizz_buzz
grammar_fizz_buzz = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 1)[1]), 1, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "1")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 2)[1]), 2, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "2")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 3)[1]), 3, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Fizz")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 4)[1]), 4, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "4")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 5)[1]), 5, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Buzz")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 6)[1]), 6, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Fizz")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 7)[1]), 7, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "7")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 8)[1]), 8, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "8")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 9)[1]), 9, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Fizz")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 10)[1]), 10, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Buzz")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 11)[1]), 11, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "11")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 12)[1]), 12, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Fizz")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 13)[1]), 13, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "13")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 14)[1]), 14, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "14")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 15)[1]), 15, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "FizzBuzz")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 16)[1]), 16, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "16")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 17)[1]), 17, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "17")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 18)[1]), 18, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Fizz")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 19)[1]), 19, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "19")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 20)[1]), 20, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Buzz")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 49995)[1]), 49995, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "FizzBuzz")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 49998)[1]), 49998, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Fizz")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 49999)[1]), 49999, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "49999")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, 50000)[1]), 50000, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "Buzz")[1]), String, x)
end
module shopping_list
grammar_shopping_list = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[50.0])[1]), Any[50.0], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[100.0])[1]), Any[100.0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.0)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[50.0])[1]), Any[50.0], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[10.0])[1]), Any[10.0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 45.0)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[20.0, 20.0])[1]), Any[20.0, 20.0], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[100.0, 50.0])[1]), Any[100.0, 50.0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 10.0)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[20.0, 20.0])[1]), Any[20.0, 20.0], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[20.0, 0.0])[1]), Any[20.0, 0.0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 36.0)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[10.0, 20.0, 30.0])[1]), Any[10.0, 20.0, 30.0], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[5.0, 10.0, 95.0])[1]), Any[5.0, 10.0, 95.0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 29.0)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[43.14, 18.23, 5.33, 1.35, 39.68])[1]), Any[43.14, 18.23, 5.33, 1.35, 39.68], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[100.0, 100.0, 100.0, 100.0, 100.0])[1]), Any[100.0, 100.0, 100.0, 100.0, 100.0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.0)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73])[1]), Any[5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73, 5.73], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[59.19, 91.24, 25.93, 16.18, 24.65, 61.96, 67.91, 43.87, 36.23, 34.3, 96.27, 69.25, 73.78, 0.52, 8.91, 39.18, 79.67, 64.22, 14.15, 52.44])[1]), Any[59.19, 91.24, 25.93, 16.18, 24.65, 61.96, 67.91, 43.87, 36.23, 34.3, 96.27, 69.25, 73.78, 0.52, 8.91, 39.18, 79.67, 64.22, 14.15, 52.44], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 59.6)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[25.43, 43.22, 23.42, 42.09, 25.7])[1]), Any[25.43, 43.22, 23.42, 42.09, 25.7], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[0.0, 0.0, 0.0, 0.0, 0.0])[1]), Any[0.0, 0.0, 0.0, 0.0, 0.0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 159.86)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01])[1]), Any[0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[85.77, 43.99, 22.78, 34.14, 34.12, 8.54, 11.03])[1]), Any[85.77, 43.99, 22.78, 34.14, 34.12, 8.54, 11.03], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0.05)[1]), Float64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9.99, 9.99, 9.99, 9.99, 9.99, 9.99, 9.99, 9.99, 9.99, 9.99])[1]), Any[9.99, 9.99, 9.99, 9.99, 9.99, 9.99, 9.99, 9.99, 9.99, 9.99], x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, Any[33.65, 33.65, 33.65, 33.65, 33.65, 33.65, 33.65, 33.65, 33.65, 33.65])[1]), Any[33.65, 33.65, 33.65, 33.65, 33.65, 33.65, 33.65, 33.65, 33.65, 33.65], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 66.28)[1]), Float64, x)
end
module substitution_cipher
grammar_substitution_cipher = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "")[1]), , x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "")[1]), , x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, "")[1]), , x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "a")[1]), a, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "a")[1]), a, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, "a")[1]), a, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "a")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "j")[1]), j, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "h")[1]), h, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, "j")[1]), j, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "h")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "a")[1]), a, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "z")[1]), z, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, "a")[1]), a, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "z")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "e")[1]), e, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "l")[1]), l, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, "eeeeeeeeee")[1]), eeeeeeeeee, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "llllllllll")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "h")[1]), h, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "d")[1]), d, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, "hhhhhhhhhhhhhhhhhhhh")[1]), hhhhhhhhhhhhhhhhhhhh, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "dddddddddddddddddddd")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "o")[1]), o, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "z")[1]), z, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, "oooooooooooooooooooooooooo")[1]), oooooooooooooooooooooooooo, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "zzzzzzzzzzzzzzzzzzzzzzzzzz")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "abcdefghijklmnopqrstuvwxyz")[1]), abcdefghijklmnopqrstuvwxyz, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "zyxwvutsrqponmlkjihgfedcba")[1]), zyxwvutsrqponmlkjihgfedcba, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, "bvafvuqgjkkbeccipwdfqttgzl")[1]), bvafvuqgjkkbeccipwdfqttgzl, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "yezuefjtqppyvxxrkdwujggtao")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "abcdefghijklmnopqrstuvwxyz")[1]), abcdefghijklmnopqrstuvwxyz, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "cdqutzayxshgfenjowrkvmpbil")[1]), cdqutzayxshgfenjowrkvmpbil, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, "thequickbrownfxjmpsvlazydg")[1]), thequickbrownfxjmpsvlazydg, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "kytovxqhdwnpezbsfjrmgcliua")[1]), String, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "otghvwmkclidzryxsfqeapnjbu")[1]), otghvwmkclidzryxsfqeapnjbu, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "alpebhxmnrcyiosvtgzjwuqdfk")[1]), alpebhxmnrcyiosvtgzjwuqdfk, x)
    input3 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input3, "aaabbbccc")[1]), aaabbbccc, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, "wwwfffnnn")[1]), String, x)
end
module indices_of_substring
grammar_indices_of_substring = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "a")[1]), a, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "5")[1]), 5, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "!")[1]), !, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "!")[1]), !, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "r")[1]), r, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "nm,xcnwqnd@#\$fwkdjn3")[1]), nm,xcnwqnd@#$fwkdjn3, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "hi")[1]), hi, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "hihihihihihihihihihi")[1]), hihihihihihihihihihi, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "############")[1]), ############, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "#")[1]), #, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "GGGGGGGGGGGGGGGGGGGG")[1]), GGGGGGGGGGGGGGGGGGGG, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "G")[1]), G, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$")[1]), $$$$$$$$$$$$$$$$$$$$, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "\$\$")[1]), $$, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "33333333333333333333")[1]), 33333333333333333333, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "333")[1]), 333, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "hahahahahahahahahaha")[1]), hahahahahahahahahaha, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "haha")[1]), haha, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0, 2, 4, 6, 8, 10, 12, 14, 16])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "GCTGCTGCTGCTGCTGCTGC")[1]), GCTGCTGCTGCTGCTGCTGC, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "GCTGC")[1]), GCTGC, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0, 3, 6, 9, 12, 15])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "bbbbbbb(bb#bbbbbbbb")[1]), bbbbbbb(bb#bbbbbbbb, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "bbb")[1]), bbb, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0, 1, 2, 3, 4, 11, 12, 13, 14, 15, 16])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "fa la la la la, la ")[1]), fa la la la la, la , x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "la")[1]), la, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[3, 6, 9, 12, 16])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "start and and with s")[1]), start and and with s, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "s")[1]), s, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0, 19])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "tomato")[1]), tomato, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "tom")[1]), tom, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "tomatotomatotomato")[1]), tomatotomatotomato, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "tom")[1]), tom, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0, 6, 12])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "tomatotomatotomato")[1]), tomatotomatotomato, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "to")[1]), to, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0, 4, 6, 10, 12, 16])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "will be zero")[1]), will be zero, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "this will be zero")[1]), this will be zero, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "APPEAR twice APPEAR")[1]), APPEAR twice APPEAR, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "APPEAR")[1]), APPEAR, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[0, 13])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "a few ending <3<3<3")[1]), a few ending <3<3<3, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "<3")[1]), <3, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[13, 15, 17])[1]), Vector{Any}, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, "middle of this one")[1]), middle of this one, x)
    input2 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input2, "of")[1]), of, x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, Any[7])[1]), Vector{Any}, x)
end
module luhn
grammar_luhn = @csgrammar begin
    State = input1(State)
    State = input2(State)
    State = output1(State)
    State = make_stacks()
    State = integer_add(State)
    State = integer_sub(State)
    State = integer_mult(State)
    State = integer_div(State)
    State = integer_mod(State)
    State = integer_lt(State)
    State = integer_gt(State)
    State = integer_lte(State)
    State = integer_gte(State)
    State = integer_fromboolean(State)
    State = integer_fromfloat(State)
    State = integer_fromstring(State)
    State = integer_fromchar(State)
    State = integer_min(State)
    State = integer_max(State)
    State = integer_inc(State)
    State = integer_dec(State)
    State = integer_abs(State)
    State = integer_negate(State)
    State = integer_pow(State)
    State = boolean_and(State)
    State = boolean_or(State)
    State = boolean_xor(State)
    State = boolean_not(State)
    State = boolean_invert_first_then_and(State)
    State = boolean_invert_second_then_and(State)
    State = boolean_fromfloat(State)
    State = input4(State)
    State = input3(State)
    State = float_add(State)
    State = float_sub(State)
    State = float_mult(State)
    State = float_div(State)
    State = float_mod(State)
    State = float_lt(State)
    State = float_gt(State)
    State = float_lte(State)
    State = float_gte(State)
    State = float_fromboolean(State)
    State = float_fromfloat(State)
    State = float_fromstring(State)
    State = float_fromchar(State)
    State = float_min(State)
    State = float_max(State)
    State = float_inc(State)
    State = float_dec(State)
    State = float_abs(State)
    State = float_negate(State)
    State = float_pow(State)
    State = float_arctan(State)
    State = float_arccos(State)
    State = float_arcsin(State)
    State = float_floor(State)
    State = float_ceiling(State)
    State = float_log10(State)
    State = float_log2(State)
    State = float_square(State)
    State = float_sqrt(State)
    State = float_tan(State)
    State = float_cos(State)
    State = float_sin(State)
    State = string_frominteger(State)
    State = string_fromfloat(State)
    State = string_fromchar(State)
    State = string_fromboolean(State)
    State = string_concat(State)
    State = string_conjchar(State)
    State = string_take(State)
    State = string_substring(State)
    State = string_first(State)
    State = string_last(State)
    State = string_nth(State)
    State = string_rest(State)
    State = string_butlast(State)
    State = string_length(State)
    State = string_reverse(State)
    State = string_parse_to_chars(State)
    State = string_split(State)
    State = string_emptystring(State)
    State = string_containschar(State)
    State = string_indexofchar(State)
    State = string_occurrencesofchar(State)
    State = string_replace(State)
    State = string_replacefirst(State)
    State = string_replacechar(State)
    State = string_replacefirstchar(State)
    State = string_removechar(State)
    State = string_setchar(State)
    State = string_capitalize(State)
    State = string_uppercase(State)
    State = string_lowercase(State)
    State = exec_string_iterate(State)
    State = string_sort(State)
    State = string_includes(State)
    State = string_indexof(State)
    State = char_allfromstring(State)
    State = char_fromfloat(State)
    State = char_isletter(State)
    State = char_isdigit(State)
    State = char_iswhitespace(State)
    State = char_lowercase(State)
    State = char_uppercase(State)
    State = output4(State)
    State = output3(State)
    State = output2(State)
end
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3])[1]), Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 80)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])[1]), Any[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 144)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])[1]), Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 0)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])[1]), Any[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 48)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])[1]), Any[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 96)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[1, 0, 2, 0, 4, 3, 2, 1, 0, 4, 1, 2, 3, 4, 2, 1])[1]), Any[1, 0, 2, 0, 4, 3, 2, 1, 0, 4, 1, 2, 3, 4, 2, 1], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 45)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0])[1]), Any[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 2)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])[1]), Any[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 4)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0])[1]), Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 6)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0])[1]), Any[0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 8)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])[1]), Any[0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 5)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])[1]), Any[0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 6)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0])[1]), Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 5)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0])[1]), Any[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 7)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])[1]), Any[0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 9)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[8, 0, 0, 0, 0, 6, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0])[1]), Any[8, 0, 0, 0, 0, 6, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 22)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0])[1]), Any[0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 14)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5])[1]), Any[0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 40)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[9, 9, 8, 7, 6, 6, 7, 8, 9, 9, 8, 7, 6, 5, 5, 6])[1]), Any[9, 9, 8, 7, 6, 6, 7, 8, 9, 9, 8, 7, 6, 5, 5, 6], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 101)[1]), Int64, x)
    input1 = x -> write_input_to_stack(Symbol(Pair{Symbol, Any}(:input1, Any[0, 0, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0])[1]), Any[0, 0, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], x)
    output1 = x -> get_output_from_stack(Symbol(Pair{Symbol, Any}(:output1, 10)[1]), Int64, x)
end
